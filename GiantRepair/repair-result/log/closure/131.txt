Repair : closure_131
Current failed test : com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps | 2019.09.07 AD at 20:03:37 CDT
Location : com.google.javascript.rhino.Node.checkTreeEquals:[1417, 1415, 1416, 1423]#1.0
Compute Candidate : 2019.09.07 AD at 20:06:27 CDT - 2019.09.07 AD at 20:17:55 CDT , PNumber : 11349, CandNumber : 152 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
-NodeMismatch diff=checkTreeEqualsImpl(node2);
+ NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:18:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
-return null;
+return new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5649/pattern-ver1-serial/src.todolist.logic.FunctionChecker.java-deleteChecker.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
-if(diff!=null){
+if(diff==null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:18:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
-NodeMismatch diff=checkTreeEqualsImpl(node2);
+NodeMismatch diff=node2.checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3555/pattern-ver1-serial/bpm.bonita-core.bonita-process-engine.src.main.java.org.bonitasoft.engine.api.impl.PlatformAPIImpl.java-createTenantFolderInBonitaHome.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+node2.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3614/pattern-ver1-serial/library.src.main.java.com.davidstemmer.screenplay.flow.Screenplay.java-go.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:20:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+node2.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3614/pattern-ver1-serial/library.src.main.java.com.davidstemmer.screenplay.flow.Screenplay.java-go.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:20:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+node2+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:21:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+diff+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+node2+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+node2+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:21:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
-return null;
+return "";
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/5469/pattern-ver1-serial/OnlineBookStoreServer.src.Server.Routines.java-getMYSQLPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toString()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toString()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toString()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toString();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
-if(diff!=null){
+if(node2!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+diff+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:22:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:22:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/523/pattern-ver1-serial/teachme.src.main.java.com.kk.teachme.model.UserProblem.java-toString.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
+checkTreeEquals(node2);
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+diff+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:23:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:23:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+synchronized(this){
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+}
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
-if(diff!=null){
+if(diff.equals(null)){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:23:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
-if(diff!=null){
+if(true){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:23:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+int a=0;
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+int a=0;
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:23:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "ClientConnector{"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4331/pattern-ver1-serial/src.main.java.net.openhft.chronicle.map.TcpReplicator.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return node2+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:24:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+String OUTSTRING="";
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+String OUTSTRING="";
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:24:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(node2.isEmpty()){
+return null;
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:24:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+if(node2.isEmpty()){
+return null;
+}
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:24:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+(toStringTree()+1)+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:25:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+(node2.toStringTree()+1)+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:25:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+(diff.nodeA.toStringTree()+1)+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:25:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(equals(node2)){
+return null;
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(equals(node2)){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+int a=1;
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+int a=1;
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+boolean b=true;
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+boolean b=true;
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:26:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "/saml/logout/request?EncryptedNameIdTime="+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2893/pattern-ver1-serial/platform.security.idp.security-idp-client.src.main.java.org.codice.ddf.security.idp.client.IdpLogoutActionProvider.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(node2==null){
+return "";
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+if(node2==null){
+return "";
+}
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(diff==null){
+return "";
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff==null){
+return "";
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:26:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(node2==null){
+return null;
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:26:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+if(node2==null){
+return null;
+}
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:27:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff==null){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:27:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(diff==null){
+return null;
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(node2==null){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(diff.nodeA==null){
+return null;
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(diff.nodeB==null){
+return null;
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff.nodeA==null){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff.nodeB==null){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if("&null".equals(node2)){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if("&null".equals(diff)){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff.equals("")){
+return "";
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff.equals("-1")){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:28:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+assert (node2!=null);
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+assert (node2!=null);
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+assert (diff!=null);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:29:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+assert (diff!=null);
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+assert (!node2.isEmpty());
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(node2!=null){
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+if(node2!=null){
+NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff!=null){
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+}
+return null;
+}
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:29:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+assert (diff!=checkTreeEqualsImpl(node2));
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:29:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+assert (node2!=null);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:29:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff.equals(null)){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:30:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff.equals("655")){
+System.out.println();
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if((Thread.currentThread().interrupted())){
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
-if(diff!=null){
+if(diff!=null||"查看红包".equals(diff)){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:30:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(node2.isEmpty()){
+node2=null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:30:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+1+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "ClientConnector{"+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4331/pattern-ver1-serial/src.main.java.net.openhft.chronicle.map.TcpReplicator.java-toString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return ("Node tree inequality:"!=null?"Node tree inequality:"+"\nTree1:\n":"")+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3147/pattern-ver1-serial/src.com.pindroid.action.IntentHelper.java-ViewNote.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:31:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
-if(diff!=null){
+if(diff!=null||diff==null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(node2.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(node2.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+if(node2.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+assert (node2!=null):"Appointments day is not allowed to be null!";
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+assert (node2!=null):"Appointments day is not allowed to be null!";
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:32:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+assert (diff!=null):"Appointments day is not allowed to be null!";
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:32:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+assert (diff!=null):"Appointments day is not allowed to be null!";
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:32:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+}
+if(node2.isEmpty()){
+node2=null;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:32:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(node2.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:32:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(node2.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
+if(node2.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:32:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "client "+"Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6134/pattern-ver1-serial/src.main.java.com.fejkathegame.server.ServerProgram.java-received.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "/saml/logout/request?EncryptedNameIdTime="+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2893/pattern-ver1-serial/platform.security.idp.security-idp-client.src.main.java.org.codice.ddf.security.idp.client.IdpLogoutActionProvider.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(node2==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(diff.nodeA==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(diff.nodeB==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:33:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
-if(diff!=null){
+if(diff!=null&&!diff.equals("")){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:33:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+1+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "ClientConnector{"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4331/pattern-ver1-serial/src.main.java.net.openhft.chronicle.map.TcpReplicator.java-toString.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return ("Node tree inequality:"+"\nTree1:\n"+toStringTree()!=null?"Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n":"")+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3147/pattern-ver1-serial/src.com.pindroid.action.IntentHelper.java-ViewNote.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return node2+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:34:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n".trim()+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/5751/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.play.collection.info.ResourceInfoView.java-setCountryCodeDetails.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:34:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4591/pattern-ver1-serial/src.main.model.PeriodDescription.java-toString.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "redirect:/articles/"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/3567/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.MessageController.java-updateMessage.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "/saml/logout/request?EncryptedNameIdTime="+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2893/pattern-ver1-serial/platform.security.idp.security-idp-client.src.main.java.org.codice.ddf.security.idp.client.IdpLogoutActionProvider.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:35:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff==null){
+throw new IllegalStateException("User isn't registered! "+node2);
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(node2==null||diff==null){
+throw new NullPointerException();
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:35:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(node2==null||diff==null){
+throw new NullPointerException();
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:35:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+if(diff==null||node2==null){
+throw new NullPointerException();
+}
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:35:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
+if(diff==null||node2==null){
+throw new NullPointerException();
+}
 if(diff!=null){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+1+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "ClientConnector{"+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4331/pattern-ver1-serial/src.main.java.net.openhft.chronicle.map.TcpReplicator.java-toString.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:36:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"windows"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2927/pattern-ver1-serial/SeleniumCoreAF.src.coreaf.framework.base.DriverFactory.java-createInstance.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:36:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "/saml/logout/request?EncryptedNameIdTime="+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2893/pattern-ver1-serial/platform.security.idp.security-idp-client.src.main.java.org.codice.ddf.security.idp.client.IdpLogoutActionProvider.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:36:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "relativeCursorLocation: "+"Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6500/pattern-ver1-serial/pa.iscde.guibuilder.src.pt.iscte.pidesco.guibuilder.internal.GuiBuilderView.java-drop.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "/"+"Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/628/pattern-ver1-serial/Group9_TwitterDataAnalysis.ICT2107_Hadoop.src.model.task8.Task8Mapper.java-getSentiFile.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:36:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:36:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return ("Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()!=null?"Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: ":"")+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3147/pattern-ver1-serial/src.com.pindroid.action.IntentHelper.java-ViewNote.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:37:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/2810/pattern-ver1-serial/hendrix-api.src.main.java.io.symcpe.hendrix.api.storage.Tenant.java-toString.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+" "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/5232/pattern-ver1-serial/src.com.mydeblob.guard.CommandHandler.java-giveKit.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:37:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: ".trim()+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/5751/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.play.collection.info.ResourceInfoView.java-setCountryCodeDetails.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:37:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:37:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return node2+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:37:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"windows"+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2927/pattern-ver1-serial/SeleniumCoreAF.src.coreaf.framework.base.DriverFactory.java-createInstance.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:37:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/576/pattern-ver1-serial/1.2.sd-api.src.main.java.com.cisco.oss.foundation.directory.client.DirectoryServiceClient.java-toString.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:38:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6468/pattern-ver1-serial/app.src.main.java.com.framgia.framgiarss.data.RSSFeed.java-toString.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:38:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/2922/pattern-ver1-serial/src.IT4.MainMenuPanel.java-showControls.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:38:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "redirect:/articles/"+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/3567/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.MessageController.java-updateMessage.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:38:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3256/pattern-ver1-serial/src.main.java.com.rizomm.misys.model.PictureLink.java-getLink.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return null;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
+synchronized(this){
 return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+}
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return 1+"Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return String.format("EdgesResult{totalSize=%d, results=%s}","\n\nSubtree1: ","\n\nSubtree2: ");
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/714/pattern-ver1-serial/falcon-regression.merlin-core.src.main.java.org.apache.falcon.regression.core.response.lineage.EdgesResult.java-toString.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
+import java.util.Locale;
+
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return String.format(Locale.getDefault(),"ConvertedResult{result=%.1f, resultUnit=%s, inputData=%s}","\n\nTree2:\n","\n\nSubtree1: ","\n\nSubtree2: ");
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2652/pattern-ver1-serial/app.src.main.java.com.alexzh.temperatureconverter.model.ConvertedResult.java-toString.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:41:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return new String("Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree());
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree()+0.0;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:41:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "";
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V36/748/pattern-ver1-serial/docear_plugin_core.src.org.docear.plugin.core.ui.CreateProjectPagePanel.java-getDescription.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:41:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return (String)"Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree()!=null?"Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree():new String();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:42:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "TREE";
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/5808/pattern-ver1-serial/core.src.main.java.com.graphhopper.storage.index.LocationIndexTree.java-toString.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree()==null?new String():"Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: ";
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/4309/pattern-ver1-serial/source.src.com.bizcom.vc.activity.conversation.ConversationSelectFile.java-getCount.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:42:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return (String)("Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree());
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "FolderPersister for '"+this;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:42:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree()+".*";
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:42:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1410,1424]
------------Candidate---------------
 public String checkTreeEquals(Node node2){
 NodeMismatch diff=checkTreeEqualsImpl(node2);
 if(diff!=null){
-return "Node tree inequality:"+"\nTree1:\n"+toStringTree()+"\n\nTree2:\n"+node2.toStringTree()+"\n\nSubtree1: "+diff.nodeA.toStringTree()+"\n\nSubtree2: "+diff.nodeB.toStringTree();
+return "DefaultAtmosphereObjectFactory";
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/76/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereFramework.java-toString.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 20:43:05 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.checkTreeEqualsImpl:[1433, 1446, 1441, 1444, 1445, 1440, 1432, 1436, 1438, 1439, 1449, 1442]#1.0
Compute Candidate : 2019.09.07 AD at 20:45:15 CDT - 2019.09.07 AD at 21:12:04 CDT , PNumber : 11432, CandNumber : 239 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+continue;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(!isEquivalentTo(node2,true,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V3/4718/pattern-ver1-serial/src.com.sleepfuriously.hpgworkout.GraphActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:12:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(!isEquivalentTo(node2,false,true)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V3/4718/pattern-ver1-serial/src.com.sleepfuriously.hpgworkout.GraphActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
-NodeMismatch res=null;
+ NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:12:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=this,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/3216/pattern-ver1-serial/instagram_integration.app.src.main.java.com.hha.instagram_integration.Photo.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:12:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=this){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/3216/pattern-ver1-serial/instagram_integration.app.src.main.java.com.hha.instagram_integration.Photo.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=this,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/3216/pattern-ver1-serial/instagram_integration.app.src.main.java.com.hha.instagram_integration.Photo.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:13:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=this;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/3216/pattern-ver1-serial/instagram_integration.app.src.main.java.com.hha.instagram_integration.Photo.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
-if(res!=null){
+if(res==null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n==null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:15:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:15:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
+if(node2!=null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:15:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res!=null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
-return res;
+return null;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:20:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
-return res;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:20:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
+res=n.checkTreeEqualsImpl(n2);
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+n=n.next;
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+n2=n2.next;
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
+res=n.checkTreeEqualsImpl(n2);
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:21:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
+n=n.next;
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
+n2=n2.next;
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:21:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
+n=first;
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
+n2=node2.first;
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(!node2.isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3555/pattern-ver1-serial/bpm.bonita-core.bonita-process-engine.src.main.java.org.bonitasoft.engine.api.impl.PlatformAPIImpl.java-createTenantFolderInBonitaHome.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:24:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+break;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:24:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
-res=n.checkTreeEqualsImpl(n2);
+res=n2.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:26:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
-res=n.checkTreeEqualsImpl(n2);
+res=node2.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6964/pattern-ver1-serial/storm-core.src.jvm.backtype.storm.elasticity.ElasticTaskHolder.java-handleScalingOutSubtaskCommand.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:26:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+if(node2==null){
+throw new IllegalStateException();
+}
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=node2,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:27:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=node2){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=node2,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=n,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import java.io.UnsupportedEncodingException;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
-throw new IllegalStateException();
+throw new IllegalStateException("UTF-8");
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V37/5909/pattern-ver1-serial/platform.security.handler.security-handler-api.src.main.java.org.codice.ddf.security.handler.api.PKIAuthenticationToken.java-PKIAuthenticationToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(res!=null){
+return res;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
-throw new IllegalStateException();
+throw new UnsupportedOperationException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=null,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=null){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:28:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=null,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=null;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
-if(res!=null){
+if(n!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
-if(res!=null){
+if(n2!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&res!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n2!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:33:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+n=n.next;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+n2=n2.next;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:33:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import java.util.regex.Pattern;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
-throw new IllegalStateException();
+throw new IllegalArgumentException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7192/pattern-ver1-serial/src.main.java.nl.ivonet.dzone.ChemicalSymbol.java-validateElement.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=n.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:34:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=n2.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2427/pattern-ver1-serial/src.java.picard.analysis.oxidation.ArtifactCounter.java-getSummaryMetrics.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:34:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2427/pattern-ver1-serial/src.java.picard.analysis.oxidation.ArtifactCounter.java-getSummaryMetrics.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:34:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
-NodeMismatch res=null;
-Node n,n2;
+ NodeMismatch res=null;
+ Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&first!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
-res=n.checkTreeEqualsImpl(n2);
+res=first.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
+synchronized(this){
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+checkTreeEqualsImpl(node2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+checkTreeEqualsImpl(node2);
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+checkTreeEqualsImpl(n);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:35:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
-return res;
+return (NodeMismatch)(res);
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
-return res;
+return (NodeMismatch)(res);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
+while(true){
+
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:37:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+synchronized(this){
 if(node2==null){
 throw new IllegalStateException();
+}
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:37:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+synchronized(this){
 if(res!=null){
 return res;
+}
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:37:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+synchronized(this){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
+}
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:38:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first,node2.getType();res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:38:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next,node2.getType()){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first,n.getType();res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:38:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first,n2.getType();res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:38:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(!isEquivalentTo(node2,true,true)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1514/pattern-ver1-serial/NetworkLocation.src.org.microg.networklocation.platform.NetworkLocationProviderV2.java-NetworkLocationProviderV2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:38:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+node2=this;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:41:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+node2=this;
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+n=this;
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:41:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
-return new NodeMismatch(this,node2);
+return null;
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:43:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
+if(node2.equals(null)){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
-if(res!=null){
+if(res.equals(null)){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
+synchronized(this){
 throw new IllegalStateException();
+}
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
+synchronized(this){
 return res;
+}
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+synchronized(this){
 return new NodeMismatch(this,node2);
+}
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+if(res==null){
+continue;
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:44:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
+if(node2.isEmpty()){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+node2=node2;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+n=node2;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+n2=node2;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+node2=node2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+node2.first=node2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n.isEmpty()){
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:45:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n2.isEmpty()){
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
+if(!n.isEmpty()){
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1755/pattern-ver1-serial/src.main.java.com.salesforce.phoenix.compile.StatementContext.java-StatementContext.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
+if(true){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:45:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
-if(res!=null){
+if(true){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:45:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
+if(res==null){
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
-res=n.checkTreeEqualsImpl(n2);
+res=res;
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:48:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
+int a=0;
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+int a=0;
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:48:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+int a=0;
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:48:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
+int a=0;
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+int a=0;
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:48:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
+String OUTSTRING="";
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:49:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+String OUTSTRING="";
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+String OUTSTRING="";
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:49:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
+String OUTSTRING="";
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:49:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+String OUTSTRING="";
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:49:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(node2.isEmpty()){
+return null;
+}
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+if(node2.isEmpty()){
+return null;
+}
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+if(node2.isEmpty()){
+return null;
+}
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:50:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
-res=n.checkTreeEqualsImpl(n2);
+res=null;
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+if(equals(node2)){
+return null;
+}
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+if(equals(node2)){
+return null;
+}
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:52:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(equals(node2)){
+return null;
+}
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+if(equals(node2)){
+return null;
+}
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n.isEmpty()){
+return res;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/5123/pattern-ver1-serial/src.main.java.org.mcstats.generator.ReflectionAggregator.java-getValues.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+int indexSelection=0;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+int indexSelection=0;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:53:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
-return new NodeMismatch(this,node2);
+return (NodeMismatch)(new NodeMismatch(this,node2));
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:53:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
+}
+if(n2.isEmpty()){
+return null;
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(node2.equals("sounds")){
+continue;
+}
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
+int a=1;
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:54:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
+int a=1;
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:54:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+int a=1;
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+int a=1;
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+int a=1;
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:54:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
+boolean b=true;
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:54:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+boolean b=true;
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:54:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+boolean b=true;
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:54:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
+boolean b=true;
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:55:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+boolean b=true;
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:55:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+if(node2.isEmpty()){
+return res;
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:55:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(node2.isEmpty()){
+return res;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:55:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+if(node2.isEmpty()){
+return res;
+}
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:55:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(node2==null){
+continue;
+}
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:55:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(node2==null){
+return null;
+}
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+if(node2==null){
+return null;
+}
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:55:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+if(node2==null){
+return null;
+}
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+if(res==null){
+return null;
+}
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(res==null){
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:58:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+if(res==null){
+return null;
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:58:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n==null){
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n2==null){
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
+if(node2==null||node2.isEmpty()){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
+}
+if(n==null){
+return null;
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:59:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n==null){
+return res;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n2==null){
+return res;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+if(node2==null){
+return null;
+}
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:59:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
+}
+if("&null".equals(node2)){
+return null;
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:59:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
+}
+if("&null".equals(node2)){
+return null;
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:59:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+if("&null".equals(res)){
+return null;
+}
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 21:59:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+if(res==null){
+return null;
+}
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(res.equals("-1")){
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+if(res.equals("-1")){
+return null;
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:02:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n.equals("-1")){
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n2.equals("-1")){
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:02:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+if(res.equals("-1")){
+return null;
+}
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+assert (node2!=null);
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+assert (node2!=null);
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:03:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+assert (node2!=null);
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+assert (res!=null);
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
+assert (!node2.isEmpty());
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
+assert (!node2.isEmpty());
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+if(node2.equals(InputStream.class)){
+return res;
+}
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+if(node2!=null){
+return new NodeMismatch(this,node2);
+}
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+if(node2!=null){
+if(!isEquivalentTo(node2,false,false)){
+return new NodeMismatch(this,node2);
+}
+NodeMismatch res=null;
+Node n,n2;
+for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(node2==null){
+throw new IllegalStateException();
+}
+res=n.checkTreeEqualsImpl(n2);
+if(res!=null){
+return res;
+}
+}
+return res;
+}
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(node2!=null){
+if(node2==null){
+throw new IllegalStateException();
+}
+res=n.checkTreeEqualsImpl(n2);
+if(res!=null){
+return res;
+}
+}
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:04:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
+assert (res!=null);
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:04:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+assert (n!=null);
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:04:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+assert (n2!=null);
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:04:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
+assert (node2!=null);
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
+assert (node2!=null);
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:05:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+if(res.equals(null)){
+return null;
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
-throw new IllegalStateException();
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
+throw new IllegalStateException(indexClassList);
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:05:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(node2==null){
-throw new IllegalStateException();
+throw new IllegalStateException(indexClassList);
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:05:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
-throw new IllegalStateException();
+throw new IllegalStateException(indexClassList);
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:05:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+if(res.equals("655")){
+System.out.println();
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
+}
+if((Thread.currentThread().interrupted())){
+return null;
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:05:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
+}
+if((Thread.currentThread().interrupted())){
+return null;
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:05:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
+}
+if(n2.equals("EOF")){
+break;
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/5182/pattern-ver1-serial/tiralabra.src.Huffman.HuffmanDecoding.java-decompress.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
+if(node2==null||"查看红包".equals(node2)){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
-if(res!=null){
+if(res!=null||"查看红包".equals(res)){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(!!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+if(node2==null){
+throw new IllegalStateException();
+}
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
-throw new IllegalStateException();
-}
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+if(res!=null){
+return res;
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:06:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
+}
+if(node2.isEmpty()){
+node2=null;
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
+}
+if(node2.isEmpty()){
+node2=null;
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:07:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(true){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(!isEquivalentTo(node2,false,false)==false){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(!isEquivalentTo(node2,false,false)&&false){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:09:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+if(res!=null){
+return res;
+}
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
-if(res!=null){
-return res;
-}
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
+for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
+if(node2==null||node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
-if(res!=null){
+if(res!=null||res==null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(!isEquivalentTo(node2,false,false)==true){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:10:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+if(node2.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+if(node2.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(node2.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:11:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+if(node2.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:11:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
+if(isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1959/pattern-ver1-serial/LowcostAvia.src.main.java.com.epam.lowcost.command.RegisterCommand.java-action.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+assert (node2!=null):"Appointments day is not allowed to be null!";
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+assert (node2!=null):"Appointments day is not allowed to be null!";
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+assert (node2!=null):"Appointments day is not allowed to be null!";
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+assert (res!=null):"Appointments day is not allowed to be null!";
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+if(n.isEmpty()){
+n=null;
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n.isEmpty()){
+n=null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
+if(node2.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:12:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+if(node2.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:12:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+if(node2.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+if(node2.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:12:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
+}
+if(n==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
+res=n.checkTreeEqualsImpl(n2);
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:13:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
+res=n.checkTreeEqualsImpl(n2);
 throw new IllegalStateException();
 }
-res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:15:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+res=n.checkTreeEqualsImpl(n2);
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
+res=n.checkTreeEqualsImpl(n2);
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:15:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
-res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
+res=n.checkTreeEqualsImpl(n2);
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
+}
+if(n2==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:18:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+res=n.checkTreeEqualsImpl(n2);
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:18:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
-res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
+res=n.checkTreeEqualsImpl(n2);
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:18:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;res.equals(null)&&n.equals(null);n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/4279/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.processor.LunMaskingProcessor.java-addIoLimitsOnVolume.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:18:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
+if(node2==null&&!node2.equals("")){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:18:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
-if(res!=null){
+if(res!=null&&!res.equals("")){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+NodeMismatch t=res;
+res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
-return res;
+return t;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:19:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
-for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+for(n=first,n2=node2.first;null!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1987/pattern-ver1-serial/src.de.phbouillon.android.framework.impl.AndroidGame.java-onResume.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n2==null){
+throw new IllegalStateException("User isn't registered! "+node2);
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n==null||res==null){
+return res;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
 }
+if(n2==null||res==null){
+return res;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+boolean haveBreadCrumbs=false;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
-if(node2==null){
+if(node2==null&&haveBreadCrumbs){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+haveBreadCrumbs=true;
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
-return new NodeMismatch(this,node2);
-}
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
+if(!isEquivalentTo(node2,false,false)){
+return new NodeMismatch(this,node2);
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
+boolean succeeded=false;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
+}
+succeeded=true;
 }
+if(!succeeded){
+return null;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:22:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
+for(int i=0;i<24;i++){
 res=n.checkTreeEqualsImpl(n2);
+}
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
+boolean atLeastOneNonProhibited=false;
 NodeMismatch res=null;
 Node n,n2;
+if(atLeastOneNonProhibited){
+throw new IllegalStateException("There should be a vertex satisfying these properties, but there is not, so there must be something wrong..");
+}
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
+atLeastOneNonProhibited=true;
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4655/pattern-ver1-serial/src.Alg.Algorithms.IterativeCompression.SimpleDisjointAlg.java-findVertexWithOneNonProhibitedNeighbour.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:22:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
+long startTime=System.currentTimeMillis();
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:22:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
+long startTime=System.currentTimeMillis();
 if(!isEquivalentTo(node2,false,false)){
 return new NodeMismatch(this,node2);
 }
 NodeMismatch res=null;
 Node n,n2;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[1426,1450]
------------Candidate---------------
 NodeMismatch checkTreeEqualsImpl(Node node2){
-if(!isEquivalentTo(node2,false,false)){
-return new NodeMismatch(this,node2);
-}
 NodeMismatch res=null;
 Node n,n2;
 for(n=first,n2=node2.first;res==null&&n!=null;n=n.next,n2=n2.next){
 if(node2==null){
 throw new IllegalStateException();
 }
 res=n.checkTreeEqualsImpl(n2);
 if(res!=null){
 return res;
 }
 }
 return res;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 5, INS : 0, DEL : 16
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:25:16 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.NodeMismatch:[2132, 2133, 2134, 2135]#1.0
Compute Candidate : 2019.09.07 AD at 22:27:31 CDT - 2019.09.07 AD at 22:32:15 CDT , PNumber : 11280, CandNumber : 61 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+this.nodeA=nodeB;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:32:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=nodeA;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+this.nodeA=null;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:32:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+synchronized(this){
 this.nodeA=nodeA;
+}
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:33:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
+synchronized(this){
 this.nodeB=nodeB;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node bindingModes,Node nodeB){
+this.nodeA=bindingModes;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node bindingModes){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=bindingModes;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:33:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node collectorManager,Node nodeB){
+this.nodeA=collectorManager;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node collectorManager){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=collectorManager;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node parentFileShare,Node nodeB){
+this.nodeA=parentFileShare;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node parentFileShare){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=parentFileShare;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node pIssued,Node nodeB){
+this.nodeA=pIssued;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:34:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node pIssued){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=pIssued;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:34:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node Pin,Node nodeB){
+this.nodeA=Pin;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:34:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node Pin){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=Pin;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:34:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node graphdbInput,Node nodeB){
+this.nodeA=graphdbInput;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node graphdbInput){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=graphdbInput;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:34:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node thePrescribeMedicationCntl,Node nodeB){
+this.nodeA=thePrescribeMedicationCntl;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node thePrescribeMedicationCntl){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=thePrescribeMedicationCntl;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:35:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node pScore,Node nodeB){
+this.nodeA=pScore;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:37:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node pScore){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=pScore;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:37:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node pterm,Node nodeB){
+this.nodeA=pterm;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:37:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node pterm){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=pterm;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:37:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node boid,Node nodeB){
+this.nodeA=boid;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:37:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node boid){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+this.nodeB=boid;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:37:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+nodeA=nodeA;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:38:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+nodeB=nodeA;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:38:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+int a=0;
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:38:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+String OUTSTRING="";
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:38:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:38:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:38:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+int a=1;
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:39:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+boolean b=true;
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:39:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+nodeA.getParent().removeChild(nodeB);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:39:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+nodeB.getParent().removeChild(nodeA);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+assert (nodeA!=null);
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:39:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+assert (nodeB!=null);
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:39:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
+assert (!nodeA.isEmpty());
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:40:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
+assert (!nodeB.isEmpty());
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+NodeMismatch(Node r,Node nodeB){
+nodeA=r;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:40:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
-NodeMismatch(Node nodeA,Node nodeB){
+NodeMismatch(Node nodeA,Node r){
 this.nodeA=nodeA;
-this.nodeB=nodeB;
+nodeB=r;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
+assert (nodeA!=null);
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
+assert (nodeB!=null);
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
+if(nodeA.isEmpty()){
+nodeA=null;
+}
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:40:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
+if(nodeB.isEmpty()){
+nodeB=null;
+}
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+try{
 this.nodeA=nodeA;
+}finally{
 this.nodeB=nodeB;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
-this.nodeA=nodeA;
+try{
 this.nodeB=nodeB;
+}finally{
+this.nodeA=nodeA;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:41:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:41:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+assert (nodeA!=null):"Appointments day is not allowed to be null!";
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:41:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+assert (nodeB!=null):"Appointments day is not allowed to be null!";
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:41:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+if(nodeA.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
+if(nodeB.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+if(nodeA==null||nodeB==null){
+throw new NullPointerException();
+}
 this.nodeA=nodeA;
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:42:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
 this.nodeA=nodeA;
+if(nodeB==null||nodeA==null){
+throw new NullPointerException();
+}
 this.nodeB=nodeB;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[2132,2135]
------------Candidate---------------
 NodeMismatch(Node nodeA,Node nodeB){
+long startTime=System.currentTimeMillis();
 this.nodeA=nodeA;
 this.nodeB=nodeB;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 22:42:31 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.propToString:[118, 121, 133, 112, 132, 113, 115, 117, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 134, 135, 136, 138]#1.0
Compute Candidate : 2019.09.07 AD at 22:44:45 CDT - 2019.09.07 AD at 23:05:57 CDT , PNumber : 11179, CandNumber : 141 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return null;
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return null;
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return null;
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return null;
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return null;
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return null;
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return null;
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return null;
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return null;
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return null;
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return "";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:07:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:07:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:07:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:08:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:08:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return "";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:08:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return "";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:08:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
+case 401 :
+
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
+
+case 4 :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
+import java.util.regex.Pattern;
+
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalArgumentException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7192/pattern-ver1-serial/src.main.java.nl.ivonet.dzone.ChemicalSymbol.java-validateElement.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:09:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
+import java.util.Iterator;
+
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
+
+case 5 :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1378/pattern-ver1-serial/src.haven.OptWnd.java-changed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:09:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return propToString(0);
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return propToString(0);
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:09:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return propToString(0);
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return propToString(0);
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return propToString(0);
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return propToString(0);
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return propToString(0);
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return propToString(0);
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return propToString(0);
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return propToString(0);
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted".trim();
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".trim();
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:10:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id".trim();
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file".trim();
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr".trim();
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:11:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name".trim();
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:11:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info".trim();
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname".trim();
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:11:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return "opt_arg".trim();
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:11:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return "empty_block".trim();
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:11:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return new String("quoted");
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return new String("synthetic");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return new String("input_id");
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return new String("source_file");
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return new String("var_args_name");
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return new String("incrdecr");
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:12:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return new String("jsdoc_info");
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return new String("opt_arg");
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:12:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return new String("originalname");
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return new String("empty_block");
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:13:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted".toLowerCase();
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".toLowerCase();
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:13:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id".toLowerCase();
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file".toLowerCase();
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:13:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name".toLowerCase();
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:13:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info".toLowerCase();
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr".toLowerCase();
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:14:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return "opt_arg".toLowerCase();
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:14:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname".toLowerCase();
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:14:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return "empty_block".toLowerCase();
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:14:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("unexpect prop id "+(int)(propType));
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return (String)("quoted");
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:14:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return (String)("synthetic");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return (String)("input_id");
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:15:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return (String)("source_file");
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return (String)("var_args_name");
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:15:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return (String)("jsdoc_info");
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:15:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return (String)("incrdecr");
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:15:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return (String)("opt_arg");
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:15:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return (String)("empty_block");
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:15:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return (String)("originalname");
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=0;
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
+String OUTSTRING="";
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException(Strings.nullToEmpty("unexpect prop id "+propType));
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:16:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=1;
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:16:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
+boolean b=true;
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("relativeCursorLocation: "+"unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6500/pattern-ver1-serial/pa.iscde.guibuilder.src.pt.iscte.pidesco.guibuilder.internal.GuiBuilderView.java-drop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:16:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("/"+"unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V15/628/pattern-ver1-serial/Group9_TwitterDataAnalysis.ICT2107_Hadoop.src.model.task8.Task8Mapper.java-getSentiFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:16:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType<0){
+return null;
+}
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new UnsupportedOperationException();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted".replaceAll("\r","");
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".replaceAll("\r","");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:17:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id".replaceAll("\r","");
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:17:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file".replaceAll("\r","");
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:17:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr".replaceAll("\r","");
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name".replaceAll("\r","");
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info".replaceAll("\r","");
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:18:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname".replaceAll("\r","");
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:18:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return "opt_arg".replaceAll("\r","");
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return "empty_block".replaceAll("\r","");
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:18:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return String.format("%s","quoted");
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return String.format("%s","synthetic");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:18:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return String.format("%s","input_id");
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:19:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return String.format("%s","source_file");
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:19:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return String.format("%s","var_args_name");
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return String.format("%s","incrdecr");
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:19:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return String.format("%s","jsdoc_info");
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:19:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return String.format("%s","opt_arg");
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:19:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return String.format("%s","originalname");
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:19:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return String.format("%s","empty_block");
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:19:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
+import java.text.DecimalFormat;
+
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("unexpect prop id "+new DecimalFormat("##.##").format(propType));
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/5949/pattern-ver1-serial/workshop.MyWorkshop_IP.java-updateValueArea.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted"==null?"":"quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:20:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?"":"synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id"==null?"":"input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:20:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file"==null?"":"source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr"==null?"":"incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name"==null?"":"var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info"==null?"":"jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname"==null?"":"originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:21:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return "opt_arg"==null?"":"opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:21:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return "empty_block"==null?"":"empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted"!=null?"quoted":new String();
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"!=null?"synthetic":new String();
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:21:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id"!=null?"input_id":new String();
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:21:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file"!=null?"source_file":new String();
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr"!=null?"incrdecr":new String();
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:22:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name"!=null?"var_args_name":new String();
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info"!=null?"jsdoc_info":new String();
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:22:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname"!=null?"originalname":new String();
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:22:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return "opt_arg"!=null?"opt_arg":new String();
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return "empty_block"!=null?"empty_block":new String();
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:22:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("unexpect prop id "+propType+" -u "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted"==null?new String():"quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:22:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?new String():"synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:23:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id"==null?new String():"input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:23:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file"==null?new String():"source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr"==null?new String():"incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info"==null?new String():"jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name"==null?new String():"var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname"==null?new String():"originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
-return "opt_arg";
+return "opt_arg"==null?new String():"opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:23:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
-return "empty_block";
+return "empty_block"==null?new String():"empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
+assert (propType>=0):"Receive a negative tratment";
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static final String propToString(int propType){
+assert (propType!=0):"Receive a size tratment";
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:24:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
+ final String dropStatement="unexpect prop id "+propType;
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException(dropStatement);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:24:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/Node.java[111,140]
------------Candidate---------------
 private static final String propToString(int propType){
+String loc="unexpect prop id "+propType;
 switch (propType){
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 case INFERRED_FUNCTION :
 
 return "inferred";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException(loc);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:24:44 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.InputId.toString:[74]#1.0
Compute Candidate : 2019.09.07 AD at 23:26:54 CDT - 2019.09.07 AD at 23:30:20 CDT , PNumber : 11212, CandNumber : 26 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "InputId: "+toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
+this.toString();
 return "InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return this.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:30:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return getIdName();
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3256/pattern-ver1-serial/src.main.java.com.rizomm.misys.model.PictureLink.java-getLink.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return 1+"InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return new String("InputId: "+getIdName());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "InputId: "+getIdName()+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "";
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V36/748/pattern-ver1-serial/docear_plugin_core.src.org.docear.plugin.core.ui.CreateProjectPagePanel.java-getDescription.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return (String)"InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:31:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
+int a=0;
 return "InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:31:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
+String OUTSTRING="";
 return "InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:31:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "TREE";
 }

PATTERN : /home/jiajun/GithubData/2015/V31/5808/pattern-ver1-serial/core.src.main.java.com.graphhopper.storage.index.LocationIndexTree.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:31:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "InputId: "+(getIdName()+1);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:32:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "InputId: ";
 }

PATTERN : /home/jiajun/GithubData/2015/V12/4309/pattern-ver1-serial/source.src.com.bizcom.vc.activity.conversation.ConversationSelectFile.java-getCount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return (String)("InputId: "+getIdName());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "FolderPersister for '"+this;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
+int a=1;
 return "InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
+boolean b=true;
 return "InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "InputId: "+getIdName()+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:32:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "DefaultAtmosphereObjectFactory";
 }

PATTERN : /home/jiajun/GithubData/2015/V1/76/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereFramework.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:32:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "relativeCursorLocation: "+"InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6500/pattern-ver1-serial/pa.iscde.guibuilder.src.pt.iscte.pidesco.guibuilder.internal.GuiBuilderView.java-drop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:33:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "/"+"InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2016/V15/628/pattern-ver1-serial/Group9_TwitterDataAnalysis.ICT2107_Hadoop.src.model.task8.Task8Mapper.java-getSentiFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:33:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "InputId: "+getIdName()!=null?"InputId: "+getIdName():new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return "InputId: "+getIdName()==null?new String():"InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/rhino/InputId.java[72,75]
------------Candidate---------------
 @Override public String toString(){
-return "InputId: "+getIdName();
+return id+":"+"InputId: "+getIdName();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/3185/pattern-ver1-serial/src.main.java.model.MyVertex.java-toString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.07 AD at 23:33:35 CDT
--------------- END -----------------
Location : com.google.javascript.jscomp.CodeGenerator.strEscape:[1156, 1052, 1053, 1139, 1150, 1151, 1049, 1050, 1051, 1161, 1162, 1054, 1056, 1057, 1059, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1078, 1079, 1081, 1083, 1086, 1087, 1089, 1091, 1094, 1095, 1096, 1104, 1107, 1109, 1111, 1113, 1114, 1115, 1121, 1124, 1126, 1128, 1129, 1131, 1133, 1135, 1140, 1141, 1144]#1.0
Compute Candidate : 2019.09.07 AD at 23:35:56 CDT - 2019.09.08 AD at 01:03:37 CDT , PNumber : 7383, CandNumber : 656 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+continue;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+continue;
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+continue;
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+continue;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+continue;
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
+continue;
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+continue;
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+continue;
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+continue;
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+continue;
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
+continue;
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
+continue;
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
+continue;
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/3884/pattern-ver1-serial/src.edu.nyu.cs.cs2580.IndexerInvertedDoconly.java-loadIndex.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+if(s.regionMatches(true,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V3/4718/pattern-ver1-serial/src.com.sleepfuriously.hpgworkout.GraphActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(s.regionMatches(false,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
-char c=s.charAt(i);
+ char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+ StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
- final String END_SCRIPT="/script";
+ String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
- final String START_COMMENT="!--";
+ String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')&&(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings&&isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings&&isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>1&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)==0&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==0&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)==0)||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==0))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>=0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
-if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder==null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+return null;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+return null;
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+return null;
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
+return null;
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+return null;
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
+return null;
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+return null;
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
+return null;
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
+return null;
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0;quote<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>0x1f&&quote<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+return null;
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+return null;
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+return null;
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
+return null;
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-1)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-1)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
+return null;
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1372/pattern-ver1-serial/src.CheatsPanel.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>0x1f&&c<=0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0;i<=s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.Collection;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0,myUid;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
+break;
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3303/pattern-ver1-serial/src.main.java.ServerApp.Connection.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>3&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>0x1f&&c>0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0;i>s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0,MAX_SERVICE_NODES;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+break;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+break;
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+break;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+break;
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
+break;
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+break;
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
+break;
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
+break;
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+break;
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+break;
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)<='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)<='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)<=']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)<=']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
+break;
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
+break;
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()-2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(s.regionMatches(true,i-1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+if(s.regionMatches(false,i-1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+break;
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2027/pattern-ver1-serial/cong.Internet.BRITE.src.org.cong.complexNetwork.model.AB.java-getTargetNode.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+break;
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2027/pattern-ver1-serial/cong.Internet.BRITE.src.org.cong.complexNetwork.model.AB.java-getTargetNode.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2013/pattern-ver1-serial/src.main.java.mousio.client.retry.RetryWithExponentialBackOff.java-shouldRetry.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0;i<s.length();i--){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(s.regionMatches(true,i+c,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+s);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+doublequoteEscape);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+singlequoteEscape);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+backslashEscape);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+quote);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c<0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)>='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)>='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)>=']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)>=']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c!=0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+1);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)!='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)!=']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)!='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)!=']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+3);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(s.regionMatches(true,i+3,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+if(s.regionMatches(false,i+3,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
-if(useSlashV){
+if(true){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }
 }
+if(useSlashV){
+sb.append("\\v");
+}else {
+sb.append("\\x0B");
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-2)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-2)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0,localLevel;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')!=(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2!=((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)>'-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)>'-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)>']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)>']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)==4&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)==4)||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==4&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==4))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=0.0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i<=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)==5&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)==5)||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==5&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==5))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
+case 401 :
+
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+ final StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
-char c=s.charAt(i);
+ final char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+ StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
-char c=s.charAt(i);
+ char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
-char c=s.charAt(i);
+ char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
- final String END_SCRIPT="/script";
+ String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
-char c=s.charAt(i);
+ char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
- final String START_COMMENT="!--";
+ String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+ StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
- final String END_SCRIPT="/script";
+ String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+ StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
- final String START_COMMENT="!--";
+ String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
- final String END_SCRIPT="/script";
- final String START_COMMENT="!--";
+ String END_SCRIPT="/script";
+ String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
-sb.append("\\x00");
+sb.append("\\x00".trim());
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
-sb.append("\\v");
+sb.append("\\v".trim());
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
-sb.append("\\x0B");
+sb.append("\\x0B".trim());
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
-sb.append("\\b");
+sb.append("\\b".trim());
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
-sb.append("\\f");
+sb.append("\\f".trim());
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
-sb.append("\\n");
+sb.append("\\n".trim());
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
-sb.append("\\r");
+sb.append("\\r".trim());
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
-sb.append("\\t");
+sb.append("\\t".trim());
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
-sb.append(backslashEscape);
+sb.append(backslashEscape.trim());
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
-sb.append(doublequoteEscape);
+sb.append(doublequoteEscape.trim());
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.Iterator;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)==-1&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.Iterator;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)==-1)||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.Iterator;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==-1&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.util.Iterator;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==-1))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+c++;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+c++;
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+c++;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+c++;
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+c++;
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
+c++;
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
+c++;
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+c++;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
+c++;
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
-if(useSlashV){
+if(!useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+c++;
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+c++;
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+i++;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+i++;
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+i++;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+i++;
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+i++;
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+i++;
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+i++;
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+i++;
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+i++;
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
+i++;
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return sb.toString().trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
+i++;
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
+i++;
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
+i++;
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
+i++;
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+c--;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+c--;
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+c--;
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
+c--;
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
+c--;
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+c--;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+c--;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+c--;
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+c--;
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+c--;
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return s;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return doublequoteEscape;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return singlequoteEscape;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return backslashEscape;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5398/pattern-ver1-serial/extensions.fluent.src.org.exist.fluent.Item.java-valueWithDefault.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0;i<=s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>0x1f&&c<=0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return new String(sb.toString());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+i--;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+i--;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+i--;
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+i--;
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+i--;
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+i--;
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+i--;
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+i--;
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+i--;
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
+i--;
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return (String)sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+c++;
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3040/pattern-ver1-serial/src.main.java.edu.clemson.cs.r2jt.proving2.proofsteps.StrengthenConsequentStep.java-StrengthenConsequentStep.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
-private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
+private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder valueAnimator,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
+if(valueAnimator.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3559/pattern-ver1-serial/library.src.main.java.qiu.niorgai.StatusBarCompatLollipop.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+return null;
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+return null;
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+return null;
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+return null;
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+return null;
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
+return null;
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
+return null;
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
+return null;
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+return null;
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings&&isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings&&isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings&&isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')&&(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings&&isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')&&(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+synchronized(sb){
 sb.append(c);
+}
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+synchronized(sb){
 sb.append("\\v");
+}
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
+synchronized(sb){
 sb.append("\\x0B");
+}
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+synchronized(sb){
 sb.append(c);
+}
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+synchronized(sb){
 sb.append("\\x3d");
+}
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+return null;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return sb.toString().toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
-sb.append("\\x00");
+sb.append(("\\x00").toLowerCase());
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
-sb.append("\\v");
+sb.append(("\\v").toLowerCase());
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
-sb.append("\\x0B");
+sb.append(("\\x0B").toLowerCase());
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
-sb.append("\\b");
+sb.append(("\\b").toLowerCase());
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
-sb.append("\\f");
+sb.append(("\\f").toLowerCase());
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
-sb.append(GT_ESCAPED);
+sb.append((GT_ESCAPED).toLowerCase());
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
-sb.append("\\n");
+sb.append(("\\n").toLowerCase());
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
-sb.append(GT_ESCAPED);
+sb.append((GT_ESCAPED).toLowerCase());
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
-sb.append("\\r");
+sb.append(("\\r").toLowerCase());
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
-sb.append("\\t");
+sb.append(("\\t").toLowerCase());
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+return null;
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+return null;
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0;i<s.length();i++,Charset.forName("UTF-8")){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+if(sb!=null){
 sb.append(c);
+}
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+if("\\v"!=null){
 sb.append("\\v");
+}
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
+if("\\x0B"!=null){
 sb.append("\\x0B");
+}
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+if("\\x3d"!=null){
 sb.append("\\x3d");
+}
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+if(sb!=null){
 sb.append("\\v");
+}
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
+if(sb!=null){
 sb.append("\\x0B");
+}
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+if(sb!=null){
 sb.append(c);
+}
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+if(sb!=null){
 sb.append("\\x3d");
+}
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
-if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.equals(null)){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+if(sb!=null){
 sb.append(c);
+}
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/5324/pattern-ver1-serial/src.main.java.de.cismet.cids.custom.objecteditors.wrrl_db_mv.HydrologRouteEditor.java-sldZoomStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
+synchronized(this){
 sb.append(c);
+}
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+synchronized(this){
 sb.append(c);
+}
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+synchronized(this){
 sb.append(LT_ESCAPED);
+}
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+synchronized(this){
 sb.append(LT_ESCAPED);
+}
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+synchronized(this){
 sb.append("\\v");
+}
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+synchronized(this){
 sb.append(c);
+}
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+synchronized(this){
 sb.append(c);
+}
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
+synchronized(this){
 sb.append(GT_ESCAPED);
 break;
+}
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
+synchronized(this){
 sb.append(LT_ESCAPED);
 break;
+}
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
+if(!outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+if(c>0){
 sb.append(c);
+}
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+if(c>0){
 sb.append(c);
+}
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+if(c>0){
 sb.append(c);
+}
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
+if(c>0){
 sb.append(c);
+}
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
+if(c>0){
 sb.append(c);
+}
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("]");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("]");
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+sb.append("]");
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+sb.append("]");
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
+sb.append("]");
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+sb.append("]");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+sb.append("]");
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+sb.append("]");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+sb.append("]");
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+sb.append("]");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
+sb.append("            scope.apply();\n");
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4602/pattern-ver1-serial/layout.src.main.java.com.flarestar.drones.layout.directives.Click.java-afterViewCreated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+ @SuppressWarnings("UnusedAssignment") StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
-char c=s.charAt(i);
+ @SuppressWarnings("UnusedAssignment") char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
- final String END_SCRIPT="/script";
+ @SuppressWarnings("UnusedAssignment") String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+ @SuppressWarnings("UnusedAssignment") StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
-char c=s.charAt(i);
+ @SuppressWarnings("UnusedAssignment") char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
- final String START_COMMENT="!--";
+ @SuppressWarnings("UnusedAssignment") String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
-char c=s.charAt(i);
+ @SuppressWarnings("UnusedAssignment") char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
- final String END_SCRIPT="/script";
- final String START_COMMENT="!--";
+ @SuppressWarnings("UnusedAssignment") String END_SCRIPT="/script";
+ @SuppressWarnings("UnusedAssignment") String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+c=c;
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+outputCharsetEncoder=outputCharsetEncoder;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+c=c;
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(i==4){
+continue;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
+if(i==4){
+continue;
+}
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(i==4){
+continue;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if(!trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if(!trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
+if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+c=1000;
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
-if(outputCharsetEncoder!=null){
+if(true){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
+if(true){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if(true){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if(true){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
+if(outputCharsetEncoder.canEncode(c)&&isRegexp){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
+if(outputCharsetEncoder.canEncode(c)==false){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if(isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if(isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+int a=0;
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+int a=0;
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+int a=0;
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
+int a=0;
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+int a=0;
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
+int a=0;
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+int a=0;
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+int a=0;
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+int a=0;
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+int a=0;
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
-private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
+private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean readOnly,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
-if(useSlashV){
+if(!readOnly){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+String OUTSTRING="";
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+String OUTSTRING="";
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+String OUTSTRING="";
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+String OUTSTRING="";
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
+String OUTSTRING="";
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
+String OUTSTRING="";
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+String OUTSTRING="";
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
+String OUTSTRING="";
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
+String OUTSTRING="";
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
+String OUTSTRING="";
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s.isEmpty()){
+return null;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(doublequoteEscape.isEmpty()){
+return null;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(singlequoteEscape.isEmpty()){
+return null;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(backslashEscape.isEmpty()){
+return null;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0;i<s.length();){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
+i++;
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
-for(int i=0;i<s.length();i++){
+for(int i=0;i<s.length();){
+i++;
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
-sb.append("\\x00");
+sb.append(Strings.nullToEmpty("\\x00"));
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
-sb.append("\\v");
+sb.append(Strings.nullToEmpty("\\v"));
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
-sb.append("\\x0B");
+sb.append(Strings.nullToEmpty("\\x0B"));
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
-sb.append("\\b");
+sb.append(Strings.nullToEmpty("\\b"));
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder("["+s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/5078/pattern-ver1-serial/benchmark.org.imdea.benchmark.rubis.RUBiSBenchmark.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
+if(outputCharsetEncoder.canEncode(c)==true){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder==null){
+return "";
+}
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null){
+return "";
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
+if(sb==null){
+return null;
+}
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null){
+return null;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
+if(s==null){
+return null;
+}
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+if(sb==null){
+return null;
+}
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+if(sb==null){
+return null;
+}
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+if(sb==null){
+return null;
+}
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(sb==null){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+if(sb==null){
+return null;
+}
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder==null){
+return null;
+}
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
+if(sb==null){
+return null;
+}
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4743/pattern-ver1-serial/app.src.main.java.com.wafflestudio.shafe.MapManager.java-initializeMapWithSavedValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if("&null".equals(s)){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
+if("&null".equals(outputCharsetEncoder)){
+return null;
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if("&null".equals(doublequoteEscape)){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if("&null".equals(singlequoteEscape)){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if("&null".equals(backslashEscape)){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if("&null".equals(outputCharsetEncoder)){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if("&null".equals(c)){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if("&null".equals(useSlashV)){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if("&null".equals(isRegexp)){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
+if("&null".equals(c)){
+return null;
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+appendHexJavaScriptRepresentation(sb,c);
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+appendHexJavaScriptRepresentation(sb,c);
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+sb.append(c);
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+sb.append("\\x00");
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+sb.append("\\v");
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+sb.append("\\b");
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+sb.append("\\f");
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+sb.append("\\n");
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+sb.append("\\r");
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+appendHexJavaScriptRepresentation(sb,c);
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+appendHexJavaScriptRepresentation(sb,c);
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
+appendHexJavaScriptRepresentation(sb,c);
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
+appendHexJavaScriptRepresentation(sb,c);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
+appendHexJavaScriptRepresentation(sb,c);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+sb.append(c);
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+sb.append(c);
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+sb.append(c);
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+sb.append(c);
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+sb.append(c);
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+sb.append(c);
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
+sb.append(c);
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
+sb.append(c);
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
+sb.append(c);
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append(c);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("\\x00");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("\\v");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("\\b");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("\\f");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("\\n");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("\\r");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("\\t");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
+appendHexJavaScriptRepresentation(sb,c);
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append("\\u2028");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
+appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
+appendHexJavaScriptRepresentation(sb,c);
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
+appendHexJavaScriptRepresentation(sb,c);
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+appendHexJavaScriptRepresentation(sb,c);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+appendHexJavaScriptRepresentation(sb,c);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
-sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append(c);
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
+if(sb.equals("")){
+return "";
+}
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
+sb.append(c);
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/2884/pattern-ver1-serial/src.edu.asu.laits.gui.nodeeditor.CalculationsPanelView.java-processNodeEquation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+2-1);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/250/pattern-ver1-serial/src.main.java.com.scienjus.client.PixivParserClient.java-buildGetUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
 sb.append(c);
+if(c>0x1f&&c<0x7f){
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+if(!(outputCharsetEncoder==null)){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+sb.append("\\t");
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+sb.append("\\u2028");
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+if(!"\\v".equals("")){
 sb.append("\\v");
+}
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
+if(!"\\x0B".equals("")){
 sb.append("\\x0B");
+}
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+if(!"\\x3d".equals("")){
 sb.append("\\x3d");
+}
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+appendHexJavaScriptRepresentation(sb,c);
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
+appendHexJavaScriptRepresentation(sb,c);
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
+if(c<0){
+return null;
+}
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+if(c<0){
+return null;
+}
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(c<0){
+return null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder("https://myschool.ru.is/myschool/"+s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+appendHexJavaScriptRepresentation(sb,c);
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
+appendHexJavaScriptRepresentation(sb,c);
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+appendHexJavaScriptRepresentation(sb,c);
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+appendHexJavaScriptRepresentation(sb,c);
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+sb.append(c);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if((trustedStrings)||(isRegexp)){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if((trustedStrings)||(isRegexp)){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+2+" votes");
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+appendHexJavaScriptRepresentation(sb,c);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V3/2011/pattern-ver1-serial/src.com.jclarity.anim.memory.MemoryModel.java-allocate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append(GT_ESCAPED);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append(LT_ESCAPED);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+sb.append(c);
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+sb.append("\\x00");
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+sb.append("\\v");
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+sb.append("\\b");
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder("There was a problem with the call to ManyWho: "+s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+2*-1);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+sb.append(c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
-sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
+sb.append(c);
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append(c);
 }else {
 if(c>0x1f&&c<0x7f){
-sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
-sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append(GT_ESCAPED);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
-StringBuilder sb=new StringBuilder(s.length()+2);
+StringBuilder sb=new StringBuilder(s.length()+2*1000);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
+if(sb==null){
+return null;
+}
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+assert (s!=null);
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+assert (outputCharsetEncoder!=null);
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+assert (doublequoteEscape!=null);
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+assert (singlequoteEscape!=null);
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+assert (backslashEscape!=null);
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+assert (outputCharsetEncoder!=null);
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
+assert (s!=null);
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+assert (!s.isEmpty());
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+assert (!doublequoteEscape.isEmpty());
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+assert (!singlequoteEscape.isEmpty());
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+assert (!backslashEscape.isEmpty());
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
-}else {
 appendHexJavaScriptRepresentation(sb,c);
+}else {
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+appendHexJavaScriptRepresentation(sb,c);
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+appendHexJavaScriptRepresentation(sb,c);
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+appendHexJavaScriptRepresentation(sb,c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
+appendHexJavaScriptRepresentation(sb,c);
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
+if(sb!=null){
+appendHexJavaScriptRepresentation(sb,c);
+}
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+}else {
+if(sb!=null){
+if(c>0x1f&&c<0x7f){
+sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(sb!=null){
+char c=s.charAt(i);
+switch (c){
+case '\0' :
+
+sb.append("\\x00");
+break;
+case '\u000B' :
+
+if(useSlashV){
+sb.append("\\v");
+}else {
+sb.append("\\x0B");
+}
+break;
+case '\b' :
+
+sb.append("\\b");
+break;
+case '\f' :
+
+sb.append("\\f");
+break;
+case '\n' :
+
+sb.append("\\n");
+break;
+case '\r' :
+
+sb.append("\\r");
+break;
+case '\t' :
+
+sb.append("\\t");
+break;
+case '\\' :
+
+sb.append(backslashEscape);
+break;
+case '\"' :
+
+sb.append(doublequoteEscape);
+break;
+case '\'' :
+
+sb.append(singlequoteEscape);
+break;
+case '\u2028' :
+
+sb.append("\\u2028");
+break;
+case '\u2029' :
+
+sb.append("\\u2029");
+break;
+case '=' :
+
+if(trustedStrings||isRegexp){
+sb.append(c);
+}else {
+sb.append("\\x3d");
+}
+break;
+case '&' :
+
+if(trustedStrings||isRegexp){
+sb.append(c);
+}else {
+sb.append("\\x26");
+}
+break;
+case '>' :
+
+if(!trustedStrings&&!isRegexp){
+sb.append(GT_ESCAPED);
+break;
+}
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+sb.append(GT_ESCAPED);
+}else {
+sb.append(c);
+}
+break;
+case '<' :
+
+if(!trustedStrings&&!isRegexp){
+sb.append(LT_ESCAPED);
+break;
+}
+ final String END_SCRIPT="/script";
+ final String START_COMMENT="!--";
+if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+sb.append(LT_ESCAPED);
+}else {
+if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+sb.append(LT_ESCAPED);
+}else {
+sb.append(c);
+}
+}
+break;
+default :
+
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
+}
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s!=null){
+char c=s.charAt(i);
+switch (c){
+case '\0' :
+
+sb.append("\\x00");
+break;
+case '\u000B' :
+
+if(useSlashV){
+sb.append("\\v");
+}else {
+sb.append("\\x0B");
+}
+break;
+case '\b' :
+
+sb.append("\\b");
+break;
+case '\f' :
+
+sb.append("\\f");
+break;
+case '\n' :
+
+sb.append("\\n");
+break;
+case '\r' :
+
+sb.append("\\r");
+break;
+case '\t' :
+
+sb.append("\\t");
+break;
+case '\\' :
+
+sb.append(backslashEscape);
+break;
+case '\"' :
+
+sb.append(doublequoteEscape);
+break;
+case '\'' :
+
+sb.append(singlequoteEscape);
+break;
+case '\u2028' :
+
+sb.append("\\u2028");
+break;
+case '\u2029' :
+
+sb.append("\\u2029");
+break;
+case '=' :
+
+if(trustedStrings||isRegexp){
+sb.append(c);
+}else {
+sb.append("\\x3d");
+}
+break;
+case '&' :
+
+if(trustedStrings||isRegexp){
+sb.append(c);
+}else {
+sb.append("\\x26");
+}
+break;
+case '>' :
+
+if(!trustedStrings&&!isRegexp){
+sb.append(GT_ESCAPED);
+break;
+}
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+sb.append(GT_ESCAPED);
+}else {
+sb.append(c);
+}
+break;
+case '<' :
+
+if(!trustedStrings&&!isRegexp){
+sb.append(LT_ESCAPED);
+break;
+}
+ final String END_SCRIPT="/script";
+ final String START_COMMENT="!--";
+if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+sb.append(LT_ESCAPED);
+}else {
+if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+sb.append(LT_ESCAPED);
+}else {
+sb.append(c);
+}
+}
+break;
+default :
+
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
+}
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
+if(s!=null){
+StringBuilder sb=new StringBuilder(s.length()+2);
+sb.append(quote);
+for(int i=0;i<s.length();i++){
+char c=s.charAt(i);
+switch (c){
+case '\0' :
+
+sb.append("\\x00");
+break;
+case '\u000B' :
+
+if(useSlashV){
+sb.append("\\v");
+}else {
+sb.append("\\x0B");
+}
+break;
+case '\b' :
+
+sb.append("\\b");
+break;
+case '\f' :
+
+sb.append("\\f");
+break;
+case '\n' :
+
+sb.append("\\n");
+break;
+case '\r' :
+
+sb.append("\\r");
+break;
+case '\t' :
+
+sb.append("\\t");
+break;
+case '\\' :
+
+sb.append(backslashEscape);
+break;
+case '\"' :
+
+sb.append(doublequoteEscape);
+break;
+case '\'' :
+
+sb.append(singlequoteEscape);
+break;
+case '\u2028' :
+
+sb.append("\\u2028");
+break;
+case '\u2029' :
+
+sb.append("\\u2029");
+break;
+case '=' :
+
+if(trustedStrings||isRegexp){
+sb.append(c);
+}else {
+sb.append("\\x3d");
+}
+break;
+case '&' :
+
+if(trustedStrings||isRegexp){
+sb.append(c);
+}else {
+sb.append("\\x26");
+}
+break;
+case '>' :
+
+if(!trustedStrings&&!isRegexp){
+sb.append(GT_ESCAPED);
+break;
+}
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+sb.append(GT_ESCAPED);
+}else {
+sb.append(c);
+}
+break;
+case '<' :
+
+if(!trustedStrings&&!isRegexp){
+sb.append(LT_ESCAPED);
+break;
+}
+ final String END_SCRIPT="/script";
+ final String START_COMMENT="!--";
+if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+sb.append(LT_ESCAPED);
+}else {
+if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+sb.append(LT_ESCAPED);
+}else {
+sb.append(c);
+}
+}
+break;
+default :
+
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
+}
+}
+sb.append(quote);
+return sb.toString();
+}
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
-if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder!=null||"查看红包".equals(outputCharsetEncoder)){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings||isRegexp||"查看红包".equals(trustedStrings)){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if(trustedStrings||isRegexp||"查看红包".equals(trustedStrings)){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
-if(!trustedStrings&&!isRegexp){
+if(!trustedStrings&&!isRegexp||"查看红包".equals(!trustedStrings)){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
-if(!trustedStrings&&!isRegexp){
+if(!trustedStrings&&!isRegexp||"查看红包".equals(!trustedStrings)){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
+if(outputCharsetEncoder!=null&&outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return sb.toString()==null?"":sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(s.isEmpty()){
+s=null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(doublequoteEscape.isEmpty()){
+doublequoteEscape=null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(singlequoteEscape.isEmpty()){
+singlequoteEscape=null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(backslashEscape.isEmpty()){
+backslashEscape=null;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)+c=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)+c=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)+i=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)+quote=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((c=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&c=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((i=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((quote=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
-if(!trustedStrings&&!isRegexp){
+if(!!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
-if(!trustedStrings&&!isRegexp){
+if(!!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
-if(!trustedStrings&&!isRegexp){
+if(true){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
-if(!trustedStrings&&!isRegexp){
+if(!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2329/pattern-ver1-serial/src.main.java.com.shootoff.gui.controller.ShootOFFController.java-setFullScreenStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
-if(!trustedStrings&&!isRegexp){
+if(!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2329/pattern-ver1-serial/src.main.java.com.shootoff.gui.controller.ShootOFFController.java-setFullScreenStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>0x1f&&c>=0&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&i>=0&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
+if((outputCharsetEncoder!=null)&&(outputCharsetEncoder.canEncode(c))){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if((c>0x1f||c=='\'')&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if((i>=2||i=='\'')&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return sb.toString()!=null?sb.toString():new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
-if(!trustedStrings&&!isRegexp){
+if(!trustedStrings){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V9/573/pattern-ver1-serial/src.CollisionDetection.java-detection.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
-if(!trustedStrings&&!isRegexp){
+if(!trustedStrings){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V9/573/pattern-ver1-serial/src.CollisionDetection.java-detection.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return sb==null?null:sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
-if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder!=null||outputCharsetEncoder==null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
-return sb.toString();
+return sb.toString()==null?new String():sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+if(c>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+if(c>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append(" (");
+sb.append(") ");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+sb.append(" (");
+sb.append(") ");
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
+sb.append(" (");
+sb.append(") ");
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+sb.append(" (");
+sb.append(") ");
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
+sb.append(" (");
+sb.append(") ");
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
+sb.append(" (");
+sb.append(") ");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
+sb.append(" (");
+sb.append(") ");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+sb.append(" (");
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
+sb.append(") ");
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(c<=0){
+c=1;
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
+sb.append("\"category\" : [");
+sb.append("]");
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1798/pattern-ver1-serial/src.main.java.com.github.jerdeb.daqvalidator.Validator.java-listCompliantCDM.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
-sb.append("\\v");
-}else {
 sb.append("\\x0B");
+}else {
+sb.append("\\v");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
-sb.append(LT_ESCAPED);
-}else {
 sb.append(c);
+}else {
+sb.append(LT_ESCAPED);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
+}else {
+sb.append(c);
+}
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
-sb.append(c);
-}else {
 sb.append("\\x3d");
+}else {
+sb.append(c);
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
-sb.append(c);
-}else {
 sb.append("\\x26");
+}else {
+sb.append(c);
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
-sb.append(GT_ESCAPED);
-}else {
 sb.append(c);
+}else {
+sb.append(GT_ESCAPED);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>0x1f&&c<0x7f||"查看红包".equals(c>0x1f)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>0x1f&&c<0x7f||c=='%'){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c<0L||(c>0x1f&&c<0x7f)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s!=null&&s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/3737/pattern-ver1-serial/src.com.ichi2.libanki.sync.RemoteMediaServer.java-addFiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s!=null&&s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/3737/pattern-ver1-serial/src.com.ichi2.libanki.sync.RemoteMediaServer.java-addFiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(true){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-1)>=0&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-1)>=0&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&(((s.charAt(i-1)=='-'||s.charAt(i-1)=='\'')&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||((s.charAt(i-1)==']'||s.charAt(i-1)=='\'')&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1971/pattern-ver1-serial/src.main.java.gregtech.api.gui.GT_GUIContainerMetaTile_Machine.java-drawGuiContainerBackgroundLayer.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c>0x1f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
+if(sb==null){
+throw new IllegalStateException("User isn't registered! "+s);
+}
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
-if(!trustedStrings&&!isRegexp){
+if((!trustedStrings)&&(!isRegexp)){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
-if(!trustedStrings&&!isRegexp){
+if((!trustedStrings)&&(!isRegexp)){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null){
+return "";
+}
+if(doublequoteEscape==null){
+return s;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null){
+return "";
+}
+if(singlequoteEscape==null){
+return s;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null){
+return "";
+}
+if(backslashEscape==null){
+return s;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null){
+return "";
+}
+if(outputCharsetEncoder==null){
+return s;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
+if(s==null){
+return "";
+}
+if(sb==null){
+return s;
+}
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
+sb.append("<table style=\"text-align: center;\" width=\"100%\" "+"height=\"100%\" border=\"0\" bordercolor=\"#000000\">");
+sb.append("</table>");
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5923/pattern-ver1-serial/photoweb.src.com.utils.web.GenerateHTML.java-genDayNavigate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s.startsWith("\r\n")){
+s=s.substring(2);
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(doublequoteEscape.startsWith("\r\n")){
+doublequoteEscape=doublequoteEscape.substring(2);
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(singlequoteEscape.startsWith("\r\n")){
+singlequoteEscape=singlequoteEscape.substring(2);
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(backslashEscape.startsWith("\r\n")){
+backslashEscape=backslashEscape.substring(2);
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }
+if(s.startsWith("/")){
+s=s.substring(1);
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }
+if(doublequoteEscape.startsWith("/")){
+doublequoteEscape=doublequoteEscape.substring(1);
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }
+if(singlequoteEscape.startsWith("/")){
+singlequoteEscape=singlequoteEscape.substring(1);
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }
+if(backslashEscape.startsWith("/")){
+backslashEscape=backslashEscape.substring(1);
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+synchronized(this){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
-sb.append(c);
-}else {
-appendHexJavaScriptRepresentation(sb,c);
-}
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 0, DEL : 9
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
-}else {
-appendHexJavaScriptRepresentation(sb,c);
-}
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+if(!s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(!s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(s!=null&&s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+if(s!=null&&s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+sb.append(c);
+if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+sb.append(c);
+if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+sb.append(c);
+if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
+sb.append(c);
+if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
+sb.append(c);
+if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+if(c==3){
+System.out.println("debug");
+}
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
+if(c==3){
+System.out.println("debug");
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
+if(c==3){
+System.out.println("debug");
+}
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
+if(c==3){
+System.out.println("debug");
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+if(c==3){
+System.out.println("debug");
+}
 sb.append(c);
+if(c==3){
+System.out.println("debug");
+}
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
+if(c==3){
+System.out.println("debug");
+}
 sb.append("\\v");
+if(c==3){
+System.out.println("debug");
+}
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+if(c==3){
+System.out.println("debug");
+}
 sb.append(c);
+if(c==3){
+System.out.println("debug");
+}
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+if(c==3){
+System.out.println("debug");
+}
 sb.append("\\x3d");
+if(c==3){
+System.out.println("debug");
+}
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+if(c==3){
+System.out.println("debug");
+}
 sb.append(c);
+if(c==3){
+System.out.println("debug");
+}
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
+if(c==3){
+System.out.println("debug");
+}
 sb.append("\\x26");
+if(c==3){
+System.out.println("debug");
+}
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
+if(c==3){
+System.out.println("debug");
+}
 sb.append(c);
+if(c==3){
+System.out.println("debug");
+}
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
+if(c==3){
+System.out.println("debug");
+}
 sb.append(c);
+if(c==3){
+System.out.println("debug");
+}
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+if(true){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(true){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())&&isRegexp){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())==false){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())==false){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+if((s!=null)&&(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length()))){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if((s!=null)&&(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length()))){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
-sb.append(c);
-}else {
-appendHexJavaScriptRepresentation(sb,c);
-}
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
-if(!trustedStrings&&!isRegexp){
+if(0x1f!=0&&!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c!=0&&c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
-if(!trustedStrings&&!isRegexp){
+if(0x1f!=0&&!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c!=0&&c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
-if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
+if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())==true){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
+if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())==true){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null||outputCharsetEncoder==null||doublequoteEscape==null){
+return null;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null||singlequoteEscape==null||doublequoteEscape==null){
+return null;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null||backslashEscape==null||doublequoteEscape==null){
+return null;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
+if(s==null||outputCharsetEncoder==null||doublequoteEscape==null){
+return null;
+}
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null||sb==null||doublequoteEscape==null){
+return null;
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
+if(s==null||sb==null||doublequoteEscape==null){
+return null;
+}
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null){
+s="20160101";
+}
+if(doublequoteEscape==null){
+doublequoteEscape="20200101";
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null){
+s="20160101";
+}
+if(singlequoteEscape==null){
+singlequoteEscape="20200101";
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s==null){
+s="20160101";
+}
+if(backslashEscape==null){
+backslashEscape="20200101";
+}
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
-sb.append("\\v");
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
-sb.append(c);
-}else {
-appendHexJavaScriptRepresentation(sb,c);
-}
+sb.append("\\v");
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
-sb.append(LT_ESCAPED);
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
-sb.append(c);
-}else {
-appendHexJavaScriptRepresentation(sb,c);
-}
+sb.append(LT_ESCAPED);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
-sb.append(LT_ESCAPED);
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
-sb.append(c);
-}else {
-appendHexJavaScriptRepresentation(sb,c);
-}
+sb.append(LT_ESCAPED);
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
-if(outputCharsetEncoder.canEncode(c)){
+if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
-}else {
-if(c>0x1f&&c<0x7f){
-sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
-}
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
 sb.append(c);
-}else {
-appendHexJavaScriptRepresentation(sb,c);
-}
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+sb.append(c);
+if(c>0x1f&&c<0x7f){
 sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+sb.append(c);
+if(c>0x1f&&c<0x7f){
 sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
+sb.append(c);
+if(c>0x1f&&c<0x7f){
 sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
+if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
-}else {
-if(c>0x1f&&c<0x7f){
-sb.append(c);
 }else {
-appendHexJavaScriptRepresentation(sb,c);
-}
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.isEmpty()&&!s.isEmpty())||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/3915/pattern-ver1-serial/src.main.java.org.datanucleus.metadata.MetaDataMerger.java-mergeMemberAnnotationsData.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.isEmpty()&&!s.isEmpty()))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/3915/pattern-ver1-serial/src.main.java.org.datanucleus.metadata.MetaDataMerger.java-mergeMemberAnnotationsData.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||!(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&(!(s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3067/pattern-ver1-serial/core.src.com.ashenrider.game.Player.java-killPlayer.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
-sb.append(LT_ESCAPED);
-}else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
-}
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
-if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
-}else {
-sb.append(c);
-}
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2933/pattern-ver1-serial/common.common-io.src.main.java.com.twelvemonkeys.io.AbstractCachedSeekableStream.java-seekImpl.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&(0x1f!=0&&(s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if(c!=0&&c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
+}else {
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
+}else {
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
+sb.append(c);
+}else {
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
+if(outputCharsetEncoder!=null){
+if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
+sb.append(c);
+}else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}else {
+if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
+appendHexJavaScriptRepresentation(sb,c);
+}
+}
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
+if(s!=null){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
 if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
+}
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 3, INS : 0, DEL : 25
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&!((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 31, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if((trustedStrings)||(isRegexp)){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&(((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-'))||((s.charAt(i-1)==']'&&s.charAt(i-2)==']')))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 32, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
-if(trustedStrings||isRegexp){
+if((trustedStrings)||(isRegexp)){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&(((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-'))||((s.charAt(i-1)==']'&&s.charAt(i-2)==']')))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 32, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if((i>=2)&&(((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']')))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 34, UPD : 34, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
-if(!trustedStrings&&!isRegexp){
+if((!trustedStrings)&&(!isRegexp)){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&(((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-'))||((s.charAt(i-1)==']'&&s.charAt(i-2)==']')))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 34, UPD : 34, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&(((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-'))||((s.charAt(i-1)==']'&&s.charAt(i-2)==']')))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
-if(!trustedStrings&&!isRegexp){
+if((!trustedStrings)&&(!isRegexp)){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 34, UPD : 34, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i<0L||(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']')))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 35, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(true){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 35, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))==false){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 35, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/293/pattern-ver1-serial/src.snpsvm.app.CommandLineApp.java-main.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 35, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 35, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))==true){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 35, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
-if(trustedStrings||isRegexp){
+if((trustedStrings)||(isRegexp)){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if((i>=2)&&(((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']')))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
 if(c>0x1f&&c<0x7f){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 36, UPD : 36, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_131_buggy/src/com/google/javascript/jscomp/CodeGenerator.java[1039,1163]
------------Candidate---------------
 private String strEscape(String s,char quote,String doublequoteEscape,String singlequoteEscape,String backslashEscape,CharsetEncoder outputCharsetEncoder,boolean useSlashV,boolean isRegexp){
 StringBuilder sb=new StringBuilder(s.length()+2);
 sb.append(quote);
 for(int i=0;i<s.length();i++){
 char c=s.charAt(i);
 switch (c){
 case '\0' :
 
 sb.append("\\x00");
 break;
 case '\u000B' :
 
 if(useSlashV){
 sb.append("\\v");
 }else {
 sb.append("\\x0B");
 }
 break;
 case '\b' :
 
 sb.append("\\b");
 break;
 case '\f' :
 
 sb.append("\\f");
 break;
 case '\n' :
 
 sb.append("\\n");
 break;
 case '\r' :
 
 sb.append("\\r");
 break;
 case '\t' :
 
 sb.append("\\t");
 break;
 case '\\' :
 
 sb.append(backslashEscape);
 break;
 case '\"' :
 
 sb.append(doublequoteEscape);
 break;
 case '\'' :
 
 sb.append(singlequoteEscape);
 break;
 case '\u2028' :
 
 sb.append("\\u2028");
 break;
 case '\u2029' :
 
 sb.append("\\u2029");
 break;
 case '=' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x3d");
 }
 break;
 case '&' :
 
 if(trustedStrings||isRegexp){
 sb.append(c);
 }else {
 sb.append("\\x26");
 }
 break;
 case '>' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(GT_ESCAPED);
 break;
 }
-if(i>=2&&((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-')||(s.charAt(i-1)==']'&&s.charAt(i-2)==']'))){
+if(i>=2&&(((s.charAt(i-1)=='-'&&s.charAt(i-2)=='-'))||((s.charAt(i-1)==']'&&s.charAt(i-2)==']')))){
 sb.append(GT_ESCAPED);
 }else {
 sb.append(c);
 }
 break;
 case '<' :
 
 if(!trustedStrings&&!isRegexp){
 sb.append(LT_ESCAPED);
 break;
 }
  final String END_SCRIPT="/script";
  final String START_COMMENT="!--";
 if(s.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
 sb.append(LT_ESCAPED);
 }else {
 if(s.regionMatches(false,i+1,START_COMMENT,0,START_COMMENT.length())){
 sb.append(LT_ESCAPED);
 }else {
 sb.append(c);
 }
 }
 break;
 default :
 
 if(outputCharsetEncoder!=null){
 if(outputCharsetEncoder.canEncode(c)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }else {
-if(c>0x1f&&c<0x7f){
+if((c>0x1f)&&(c<0x7f)){
 sb.append(c);
 }else {
 appendHexJavaScriptRepresentation(sb,c);
 }
 }
 }
 }
 sb.append(quote);
 return sb.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 36, UPD : 36, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps, com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert]
---------START : 2019.09.07 AD at 20:03:37 CDT
---------TIME : 2019.09.08 AD at 01:03:37 CDT
--------------- END -----------------
Current failed test : com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert | 2019.09.08 AD at 01:03:37 CDT
Finish : closure-131 > patch : 0 | Start : Sat Sep 07 20:03:37 CDT 2019 | End : 2019.09.08 AD at 01:03:38 CDT
