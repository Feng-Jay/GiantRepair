Repair : closure_13
Current failed test : com.google.javascript.jscomp.IntegrationTest::testIssue787 | 2019.09.04 AD at 19:21:58 CDT
Location : com.google.javascript.rhino.Node.propToString:[125, 129, 141, 143, 117, 142, 118, 119, 120, 122, 124, 126, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 144, 145, 147]#1.0
Compute Candidate : 2019.09.04 AD at 19:24:06 CDT - 2019.09.04 AD at 19:49:22 CDT , PNumber : 11179, CandNumber : 142 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return null;
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:49:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return null;
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return null;
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:49:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return null;
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:49:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return null;
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return null;
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return null;
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return null;
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return null;
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:50:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return null;
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
-return "quoted";
+return null;
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/2037/pattern-ver1-serial/core.src.main.java.org.glowroot.transaction.PluginServicesImpl.java-getMessageSupplier.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:50:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:51:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return "";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:51:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:52:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
+case 401 :
+
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
+
+case 4 :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
+import java.util.regex.Pattern;
+
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalArgumentException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7192/pattern-ver1-serial/src.main.java.nl.ivonet.dzone.ChemicalSymbol.java-validateElement.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
+import java.util.Iterator;
+
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
+
+case 5 :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1378/pattern-ver1-serial/src.haven.OptWnd.java-changed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return propToString(0);
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return propToString(0);
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return propToString(0);
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return propToString(0);
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return propToString(0);
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return propToString(0);
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return propToString(0);
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return propToString(0);
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return propToString(0);
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:54:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return propToString(0);
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized".trim();
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:54:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".trim();
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:54:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call".trim();
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:54:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id".trim();
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file".trim();
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return "braceless_type".trim();
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:55:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".trim();
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr".trim();
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:55:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name".trim();
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:55:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted".trim();
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:55:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return new String("parenthesized");
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:55:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return new String("synthetic");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:55:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return new String("free_call");
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return new String("input_id");
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return new String("source_file");
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return new String("braceless_type");
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:56:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return new String("sourcename");
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:56:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return new String("var_args_name");
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return new String("incrdecr");
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:56:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
-return "quoted";
+return new String("quoted");
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized".toLowerCase();
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:57:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".toLowerCase();
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call".toLowerCase();
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id".toLowerCase();
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:57:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file".toLowerCase();
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return "braceless_type".toLowerCase();
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:57:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".toLowerCase();
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:57:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name".toLowerCase();
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr".toLowerCase();
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info".toLowerCase();
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("unexpect prop id "+(int)(propType));
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:58:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return (String)("parenthesized");
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:58:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return (String)("synthetic");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return (String)("free_call");
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return (String)("input_id");
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:59:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return (String)("source_file");
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return (String)("braceless_type");
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:59:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return (String)("var_args_name");
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return (String)("sourcename");
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return (String)("jsdoc_info");
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:59:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return (String)("incrdecr");
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:59:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=0;
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 19:59:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
+String OUTSTRING="";
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:00:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException(Strings.nullToEmpty("unexpect prop id "+propType));
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:00:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=1;
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:00:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
+boolean b=true;
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("relativeCursorLocation: "+"unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6500/pattern-ver1-serial/pa.iscde.guibuilder.src.pt.iscte.pidesco.guibuilder.internal.GuiBuilderView.java-drop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("/"+"unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V15/628/pattern-ver1-serial/Group9_TwitterDataAnalysis.ICT2107_Hadoop.src.model.task8.Task8Mapper.java-getSentiFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:00:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType<0){
+return null;
+}
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:00:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new UnsupportedOperationException();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized".replaceAll("\r","");
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:01:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".replaceAll("\r","");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call".replaceAll("\r","");
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id".replaceAll("\r","");
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:01:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file".replaceAll("\r","");
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return "braceless_type".replaceAll("\r","");
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".replaceAll("\r","");
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr".replaceAll("\r","");
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:02:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name".replaceAll("\r","");
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted".replaceAll("\r","");
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return String.format("%s","parenthesized");
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return String.format("%s","synthetic");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return String.format("%s","free_call");
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return String.format("%s","input_id");
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return String.format("%s","source_file");
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return String.format("%s","braceless_type");
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return String.format("%s","sourcename");
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return String.format("%s","var_args_name");
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return String.format("%s","incrdecr");
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
-return "quoted";
+return String.format("%s","quoted");
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
+import java.text.DecimalFormat;
+
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("unexpect prop id "+new DecimalFormat("##.##").format(propType));
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/5949/pattern-ver1-serial/workshop.MyWorkshop_IP.java-updateValueArea.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:03:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized"==null?"":"parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?"":"synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call"==null?"":"free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:04:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id"==null?"":"input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file"==null?"":"source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:04:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return "braceless_type"==null?"":"braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:04:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"==null?"":"sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr"==null?"":"incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:05:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name"==null?"":"var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:05:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted"==null?"":"quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized"!=null?"parenthesized":new String();
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"!=null?"synthetic":new String();
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call"!=null?"free_call":new String();
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id"!=null?"input_id":new String();
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:05:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file"!=null?"source_file":new String();
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return "braceless_type"!=null?"braceless_type":new String();
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"!=null?"sourcename":new String();
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr"!=null?"incrdecr":new String();
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name"!=null?"var_args_name":new String();
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:06:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted"!=null?"quoted":new String();
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException("unexpect prop id "+propType+" -u "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized"==null?new String():"parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?new String():"synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call"==null?new String():"free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
-return "input_id";
+return "input_id"==null?new String():"input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:07:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
-return "source_file";
+return "source_file"==null?new String():"source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:07:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"==null?new String():"sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
-return "braceless_type";
+return "braceless_type"==null?new String():"braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr"==null?new String():"incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
-return "quoted";
+return "quoted"==null?new String():"quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:08:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
-return "var_args_name";
+return "var_args_name"==null?new String():"var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
+assert (propType>=0):"Receive a negative tratment";
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static final String propToString(int propType){
+assert (propType!=0):"Receive a size tratment";
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:08:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
 throw new IllegalStateException("unexpect prop id "+propType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
+ final String dropStatement="unexpect prop id "+propType;
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException(dropStatement);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[116,149]
------------Candidate---------------
 private static final String propToString(int propType){
+String loc="unexpect prop id "+propType;
 switch (propType){
 case BRACELESS_TYPE :
 
 return "braceless_type";
 case VAR_ARGS_NAME :
 
 return "var_args_name";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case OPT_ARG_NAME :
 
 return "opt_arg";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 case STATIC_SOURCE_FILE :
 
 return "source_file";
 case INPUT_ID :
 
 return "input_id";
 case LENGTH :
 
 return "length";
 case SLASH_V :
 
 return "slash_v";
 default :
 
-throw new IllegalStateException("unexpect prop id "+propType);
+throw new IllegalStateException(loc);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 20:08:53 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toString:[958, 962, 965, 955, 956, 968, 969, 957, 967, 972, 973, 974, 975, 980, 981, 982, 983, 984, 985, 986, 988, 990, 993, 994, 999, 953, 954, 971, 979, 998, 1007, 963, 1000, 1001, 1002, 1003]#1.0
Compute Candidate : 2019.09.04 AD at 20:10:43 CDT - 2019.09.04 AD at 21:18:41 CDT , PNumber : 11402, CandNumber : 972 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+return ;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:18:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+return ;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+return ;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:19:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+return ;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:19:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+return ;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:20:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:20:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+return ;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:20:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+return ;
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:20:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+return ;
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:20:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+return ;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4018/pattern-ver1-serial/src.client.net.Clientsocket.java-Sender.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/6263/pattern-ver1-serial/app.src.org.commcare.android.tasks.DataPullTask.java-doTaskBackground.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/6263/pattern-ver1-serial/app.src.org.commcare.android.tasks.DataPullTask.java-doTaskBackground.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+return ;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+return ;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+return ;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:21:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+return ;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:21:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+return ;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:22:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+return ;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:22:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==0){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type==0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:23:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString==null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+long lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<=keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.Collection;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,myUid;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:23:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null&&first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:24:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i>keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:24:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,MAX_SERVICE_NODES;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:24:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()==Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:24:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno==-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:24:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<=Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type<=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:25:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+float lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;i--){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:25:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/276/pattern-ver1-serial/src.edu.cpp.cs.cs141.final_project.User_Interface.TextUI.TextUserInterface.java-drawAlertText.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>=Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type>=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:25:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[1];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type!=Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type!=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+Integer type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:26:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+Integer lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(true){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(true){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:26:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
-if(printSource){
+if(true){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:26:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,lineno;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+case 3 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4175/pattern-ver1-serial/keyvalue.common.src.main.java.alluxio.thrift.KeyValueWorkerClientService.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:26:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,localLevel;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:27:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+case 203 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:27:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+case 2 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/7455/pattern-ver1-serial/main.java.com.noni.embryio.TabsPagerAdapter.java-getItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:27:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[0];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()<Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:27:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno<-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[2];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type>Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:28:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()>Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno>-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:28:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+case 10 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/2044/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.item.ItemRelocatorModule.java-getRelocatorModule.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
-sb.append(']');
+sb.append('[');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append('[');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append('[');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:28:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append('[');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:29:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append('[');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:29:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+case -1 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2443/pattern-ver1-serial/src.main.java.nl.rutgerkok.pokkit.world.PokkitBlockFace.java-toBukkit.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+case 13 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/5275/pattern-ver1-serial/src.edu.uiuc.groupmessage.GroupMessageProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
+case 0 :
+
+return ;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/13/pattern-ver1-serial/src.main.java.org.apache.airavata.services.FileResource.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-2){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:29:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
+case 401 :
+
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+case 27 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1889/pattern-ver1-serial/app.src.main.java.johan.laststraw.AiPatterns.java-getAiPatternNr.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:30:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;type++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(sb!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/4918/pattern-ver1-serial/src.org.traccar.protocol.Gl200ProtocolDecoder.java-decode.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:30:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.toString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:30:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(toString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:30:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,_afterComposeMethodCache;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(toString());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/1640/pattern-ver1-serial/spring-social-vkontakte.src.main.java.org.springframework.social.vkontakte.api.impl.WallTemplate.java-getPost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:31:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(sb!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+i++;
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.List;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,mActions;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:31:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(Token.name(type));
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:31:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(Token.name(type));
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:31:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(Token.name(type));
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(Token.name(type));
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:32:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append("<invalid>");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:32:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("<invalid>");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(first.getString());
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:32:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final int type=keys[i];
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:34:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:34:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:34:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:34:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||this.first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(this.first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+this.toString();
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:35:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+this.toString();
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:35:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+this.toString();
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:35:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+this.toString();
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+this.toString();
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:35:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+this.toString();
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:35:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+this.toString();
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:35:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+this.toString();
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:36:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+this.toString();
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:36:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+this.toString();
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString().trim());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:36:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().trim());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:36:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+sb.append(" [".trim());
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:36:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type).trim());
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
+sb.append(": ".trim());
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:37:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
-sb.append(value);
+sb.append(value.trim());
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
+sb.append("<invalid>".trim());
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:37:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+sb.append(" : ".trim());
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:37:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
+sb.append(jsTypeString.trim());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:37:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7184/pattern-ver1-serial/src.Board.java-rotate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==-1){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:37:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type==-1){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:37:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno++;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:38:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+lineno++;
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:38:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+type++;
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+type++;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:38:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
+type++;
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
-if(printSource){
+if(!printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:38:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(!printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:38:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(!printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:38:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+lineno++;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:39:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
+if(true){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+lineno--;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno--;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:39:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+type--;
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:39:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+type--;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:39:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
+type--;
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
+if(first!=null){
+String jsTypeString=first.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
-value=x.toString();
+value=x.toString().trim();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/973/pattern-ver1-serial/src.com.pindroid.authenticator.AuthenticatorActivity.java-handleLogin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+synchronized(sb){
 sb.append(' ');
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+synchronized(sb){
 sb.append("<invalid>");
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+synchronized(sb){
 sb.append(first.getString());
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+synchronized(sb){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:40:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+synchronized(sb){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+synchronized(sb){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append((int)(getDouble()));
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:41:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append((int)(' '));
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append((int)(' '));
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append((int)(' '));
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:41:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append((int)(' '));
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:41:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
+sb.append((int)(lineno));
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+PropListItem x=lookupProperty((int)(type));
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:41:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString((int)(type)));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:42:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+synchronized(sb){
 sb.append(getDouble());
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:42:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
-value=x.toString();
+value="";
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:42:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
-value=x.toString();
+value=null;
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append((first.getString()).toLowerCase());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:42:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append((getString()).toLowerCase());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:42:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append((propToString(type)).toLowerCase());
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:42:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
+sb.append((jsTypeString).toLowerCase());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:42:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+sb.append((" [").toLowerCase());
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:43:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
+sb.append((": ").toLowerCase());
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
-sb.append(value);
+sb.append((value).toLowerCase());
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:43:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
+sb.append(("<invalid>").toLowerCase());
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+sb.append((" : ").toLowerCase());
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:43:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean broadcast,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
-if(printSource){
+if(broadcast){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean broadcast){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(broadcast){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:43:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean broadcast,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(broadcast){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:43:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+synchronized(this){
 sb.append(' ');
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+synchronized(this){
 sb.append(first.getString());
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+synchronized(this){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+synchronized(this){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+synchronized(this){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,continentName,countryCode;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:44:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(equals(printSource)){
+return ;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
+if(equals(printAnnotations)){
+return ;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
 }
+if(equals(printType)){
+return ;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(equals(lineno)){
+return ;
+}
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(equals(lineno)){
+return ;
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(equals(type)){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+if(equals(type)){
+return ;
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+if(equals(type)){
+return ;
+}
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(first.getString().isEmpty()){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(first.getString().isEmpty()){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first.getString().isEmpty()){
+return ;
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if("<invalid>".isEmpty()){
+return ;
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+while(true){
+
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:48:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+while(true){
+
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:48:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+while(true){
+
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+while(true){
+
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+while(true){
+
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:54:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+while(true){
+
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:56:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
+while(true){
+
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 21:58:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+while(true){
+
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:00:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
+while(true){
+
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>0){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:02:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type>0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:02:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+i--;
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+synchronized(this){
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+synchronized(this){
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+synchronized(this){
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
+synchronized(this){
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:03:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+synchronized(sb){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/1575/pattern-ver1-serial/api.JobContext.java-issueTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:03:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.isEmpty()){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+}
+if(value.isEmpty()){
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if(sb==null){
+return ;
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+if(sb==null){
+return ;
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb==null){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:04:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:04:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb==null){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:04:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(sb==null){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:04:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(sb==null){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:04:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+if(sb==null){
+return ;
+}
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(sb==null){
+return ;
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:05:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb==null){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:05:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:05:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(sb==null){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb==null){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb==null){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb==null){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:06:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys==null){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString==null){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3545/pattern-ver1-serial/server.src.main.java.nl.inl.blacklab.server.requesthandlers.SearchParameters.java-docSortSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;i++,Charset.forName("UTF-8")){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:06:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
 sb.append(' ');
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(sb!=null){
 sb.append("<invalid>");
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:07:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb!=null){
 sb.append(first.getString());
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
+if(sb!=null){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:07:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(first.getString()!=null){
 sb.append(first.getString());
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(getString()!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if("<invalid>"!=null){
 sb.append("<invalid>");
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+first=this;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:08:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+first=this;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(printAnnotations==printSource){
+return ;
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(printType==printSource){
+return ;
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3923/pattern-ver1-serial/railo-java.railo-core.src.railo.runtime.op.Operator.java-_equalsComplexEL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(first==null){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:08:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first==null){
+return ;
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:08:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(first==null){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+if(first==null){
+return ;
+}
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:09:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString.equals(null)){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:09:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType.equals(null)){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+if(sb!=null){
 sb.append(getDouble());
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/5324/pattern-ver1-serial/src.main.java.de.cismet.cids.custom.objecteditors.wrrl_db_mv.HydrologRouteEditor.java-sldZoomStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(sb!=null){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/5324/pattern-ver1-serial/src.main.java.de.cismet.cids.custom.objecteditors.wrrl_db_mv.HydrologRouteEditor.java-sldZoomStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+synchronized(this){
 sb.append("<invalid>");
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(x==null){
+return ;
+}
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+}
+if(value==null){
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:10:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(' '>0){
 sb.append(' ');
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:10:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(' '>0){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(lineno>0){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:10:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if("index".equals(sb)){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if("index".equals(sb)){
+return ;
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:11:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:11:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if("index".equals(sb)){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if("index".equals(sb)){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:12:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:12:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:12:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:12:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb.equals("TIME")){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb.equals("TIME")){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:13:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(sb.equals("TIME")){
+return ;
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:13:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if("&null".equals(sb)){
+return ;
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+if("&null".equals(sb)){
+return ;
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:13:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if("&null".equals(sb)){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if("&null".equals(sb)){
+return ;
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:13:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if("&null".equals(sb)){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:13:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if("&null".equals(sb)){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:14:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+if("&null".equals(sb)){
+return ;
+}
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:14:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+if("&null".equals(printSource)){
+return ;
+}
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(x==null){
+continue;
+}
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:14:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if(sb.equals("DATETIME")){
+return ;
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:14:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+if(sb.equals("DATETIME")){
+return ;
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:14:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:14:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:15:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:15:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:15:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:15:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(sb.equals("DATETIME")){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(sb.equals("DATETIME")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:15:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:16:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:16:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:16:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+}
+if(value==null){
+continue;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2120/pattern-ver1-serial/org.dawb.workbench.ui.src.org.dawb.workbench.ui.editors.PlotDataEditor.java-getSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final int type=keys[i];
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:16:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:16:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append(Token.name(type).trim());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:17:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:17:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:17:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ @SuppressWarnings("UnusedAssignment") String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:17:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ @SuppressWarnings("UnusedAssignment") String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:17:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb=sb;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:17:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb=sb;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb=sb;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:18:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb=sb;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:18:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(printType||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(printSource||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(printAnnotations||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:18:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final int type=keys[i];
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:18:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys.equals("")){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:19:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals("")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:19:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(i==4){
+continue;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:19:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno=1000;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:19:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(true){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(true){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:19:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(true){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:19:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(true){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:20:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("Error, "+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:20:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("Error, "+first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("https://myschool.ru.is/myschool/"+first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:20:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("https://myschool.ru.is/myschool/"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:20:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("https://myschool.ru.is/myschool/"+getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:20:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("https://myschool.ru.is/myschool/"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:20:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append("https://myschool.ru.is/myschool/"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:20:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+Arrays.sort(keys);
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+Arrays.sort(keys);
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(jsType!=null){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5761/pattern-ver1-serial/src.main.java.jp.sf.amateras.mirage.type.enumerate.EnumOneBasedOrdinalValueType.java-isSupport.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:21:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals("-1")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:21:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys.equals("-1")){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals("-1")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString()+" votes");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString()+" votes");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+" votes");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type)+" votes");
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:22:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" votes");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:22:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+String value;
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+String value;
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:22:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()-1);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+int a=0;
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:22:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+int a=0;
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:23:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+int a=0;
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:23:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+int a=0;
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+int a=0;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:23:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+int a=0;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:23:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+int a=0;
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:23:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+int a=0;
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:23:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+int a=0;
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:24:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+int a=0;
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:24:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("There was a problem with the call to ManyWho: "+first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:24:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("There was a problem with the call to ManyWho: "+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("There was a problem with the call to ManyWho: "+getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:24:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("There was a problem with the call to ManyWho: "+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append("There was a problem with the call to ManyWho: "+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:24:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean readOnly,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
-if(printSource){
+if(!readOnly){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:24:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean readOnly){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(!readOnly){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean readOnly,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(!readOnly){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:25:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(keys.equals(sb)){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:25:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb.equals(keys)){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals(sb)){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(sb.equals(type)){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:25:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb.equals(x)){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals(keys)){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+String OUTSTRING="";
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:26:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+String OUTSTRING="";
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+String OUTSTRING="";
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+String OUTSTRING="";
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:26:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+String OUTSTRING="";
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:26:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+String OUTSTRING="";
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:26:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+String OUTSTRING="";
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:26:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+String OUTSTRING="";
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:27:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+String OUTSTRING="";
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+String OUTSTRING="";
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:27:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()*1000);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:27:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;){
+i++;
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:27:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(Strings.nullToEmpty(first.getString()));
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(Strings.nullToEmpty(getString()));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append(Strings.nullToEmpty(Token.name(type)));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(Strings.nullToEmpty(propToString(type)));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+int first=5;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+int Token=5;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:28:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+int NAME=5;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+int first=5;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append((Token.name(type)).toLowerCase());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(Double.isNaN(type)){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(Double.isNaN(type)){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:29:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:29:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:29:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:30:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString.equalsIgnoreCase(null)){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:30:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(Math.abs(getDouble()));
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(Math.abs(' '));
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:30:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append(Math.abs(' '));
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:31:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append(Math.abs(' '));
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;Math.abs(i++)){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:31:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(Math.abs(' '));
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
+sb.append(Math.abs(lineno));
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+PropListItem x=lookupProperty(Math.abs(type));
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(Math.abs(type)));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+int indexSelection=0;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:32:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+int indexSelection=0;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:32:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+int indexSelection=0;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+int indexSelection=0;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:32:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+int indexSelection=0;
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:32:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+int indexSelection=0;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+int indexSelection=0;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:32:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+int indexSelection=0;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
+int indexSelection=0;
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+int indexSelection=0;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.Arrays;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[i-1];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:33:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(sb.equals("setPackMode")){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb.equals("setPackMode")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(sb.equals("setPackMode")){
+return ;
+}
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(keys.equals("setPackMode")){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(keys.equals("setPackMode")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("PATH: \n"+first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("PATH: \n"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("PATH: \n"+getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:34:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("PATH: \n"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append("PATH: \n"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:34:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(" & ");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(" & ");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:35:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(" & ");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:35:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(" & ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" & ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:35:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append(" & ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+sb.append(" & ");
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:35:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+sb.append(" & ");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:35:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(" & ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:36:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+sb.append(" & ");
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:36:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
+String value;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:36:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append("    }\n");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:36:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append("    }\n");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:36:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("    }\n");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:36:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append("    }\n");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+sb.append("    }\n");
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:36:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
+sb.append("    }\n");
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:37:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(String.valueOf(first.getString()));
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(String.valueOf(getString()));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:37:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(String.valueOf(getDouble()));
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:37:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append(String.valueOf(Token.name(type)));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(String.valueOf(propToString(type)));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:37:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if("Chrome".equals(first)||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:37:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+int a=1;
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:38:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+int a=1;
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:38:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+int a=1;
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+int a=1;
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:38:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+int a=1;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:38:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+int a=1;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:38:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+int a=1;
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:38:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+int a=1;
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:39:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
+int a=1;
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:39:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+int a=1;
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString()+"/logout");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:39:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString()+"/logout");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+"/logout");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:39:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type)+"/logout");
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:39:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+"/logout");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:39:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("\nDealer has: \n"+first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:40:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("\nDealer has: \n"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("\nDealer has: \n"+getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:40:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("\nDealer has: \n"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append("\nDealer has: \n"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:40:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+String NAME="%#.&f";
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+boolean NAME=true;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+boolean Token=true;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+boolean first=true;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:41:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+boolean first=true;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+String value;
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:41:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+String value;
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:41:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+String value;
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:41:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+String value;
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+String value;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+String value;
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:42:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+String value;
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:42:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+String value;
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:42:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
+if(sb!=null){
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:42:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+boolean b=true;
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:42:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+boolean b=true;
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+boolean b=true;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:43:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+boolean b=true;
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+boolean b=true;
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:43:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+boolean b=true;
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
+boolean b=true;
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+boolean b=true;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+boolean b=true;
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:43:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+boolean b=true;
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:44:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
-value=x.toString();
+value=x.toString()+1;
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(x.equals(null)){
+return ;
+}
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:44:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys.equals(null)){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb==null){
+continue;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:44:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(' ');
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+sb.append(' ');
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+sb.append(' ');
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+sb.append("<invalid>");
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+sb.append(getDouble());
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(' ');
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:45:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(' ');
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(' ');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(' ');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(' ');
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(' ');
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append("<invalid>");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+sb.append(' ');
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+sb.append(' ');
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+sb.append(' ');
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(' ');
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(' ');
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.isEmpty()){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/2794/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.VNXeCommunicationInterface.java-discoverIscsiPorts.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:47:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:47:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(getDouble());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(getDouble());
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:47:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+sb.append(' ');
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:47:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(lineno);
 if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:48:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(jsTypeString);
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:48:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:48:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:48:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
 sb.append(' ');
+if(type==Token.FUNCTION){
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:48:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(' ');
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(' ');
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:48:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+sb.append(' ');
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:49:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(true){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:49:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(!first.getString().equals("")){
 sb.append(first.getString());
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:49:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(!getString().equals("")){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:49:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(!"<invalid>".equals("")){
 sb.append("<invalid>");
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:49:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+sb.append(' ');
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+sb.append(' ');
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(lineno);
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:50:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(lineno);
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:50:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(jsTypeString);
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:50:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==Long.MIN_VALUE){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:50:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append(' ');
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:50:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+if(first==null||first.getType()!=Token.NAME){
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:50:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+sb.append("<invalid>");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:51:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append(' ');
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:51:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
-value=x.toString();
+value=x.toString().replaceAll("\n","");
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
-value=x.toString();
+value=(x.toString()).replace("\\","\\\\");
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+int lineno=getLineno();
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:51:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+int[] keys=getSortedPropTypes();
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:51:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(' ');
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:51:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()*-1);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+sb.append("<invalid>");
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:52:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append("<invalid>");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(getDouble());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(new BigDecimal(getDouble()).setScale(2,RoundingMode.HALF_UP));
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(new BigDecimal(first.getString()).setScale(2,RoundingMode.HALF_UP));
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(new BigDecimal(getString()).setScale(2,RoundingMode.HALF_UP));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(new BigDecimal(propToString(type)).setScale(2,RoundingMode.HALF_UP));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append(new BigDecimal(Token.name(type)).setScale(2,RoundingMode.HALF_UP));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:53:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:53:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:53:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:54:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:54:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:54:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:54:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
+sb.append(' ');
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
+sb.append(' ');
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+assert (sb!=null);
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+assert (sb!=null);
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+assert (sb!=null);
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:55:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+assert (sb!=null);
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:55:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+assert (sb!=null);
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:55:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+assert (sb!=null);
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+assert (sb!=null);
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+assert (sb!=null);
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+assert (sb!=null);
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:56:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+assert (sb!=null);
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:56:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+try{
 sb.append(' ');
+}finally{
+sb.append("<invalid>");
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:56:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+try{
 sb.append(' ');
+}finally{
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:56:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+try{
 sb.append(getString());
+}finally{
+sb.append(' ');
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+try{
 sb.append(lineno);
+}finally{
+sb.append(' ');
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:56:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString().subSequence(0,6));
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().subSequence(0,6));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:57:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type).subSequence(0,6));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
+sb.append(Token.name(type).subSequence(0,6));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(' ');
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5438/pattern-ver1-serial/cg.VertexSetComponent.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:57:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(Double.isNaN(lineno)){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
+sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:57:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+}else {
+if(sb!=null){
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(sb!=null){
+sb.append(Token.name(type));
+if(this instanceof StringNode){
+sb.append(' ');
+sb.append(getString());
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
+}
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
+}
+}
+if(printAnnotations){
+int[] keys=getSortedPropTypes();
+for(int i=0;i<keys.length;i++){
+int type=keys[i];
+PropListItem x=lookupProperty(type);
+sb.append(" [");
+sb.append(propToString(type));
+sb.append(": ");
+String value;
+switch (type){
+default :
+
+value=x.toString();
+break;
+}
+sb.append(value);
+sb.append(']');
+}
+}
+if(printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
+}
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb!=null){
+sb.append(first.getString());
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:58:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
+sb.append(' ');
+sb.append(getString());
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+sb.append(' ');
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:58:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
+sb.append(' ');
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:58:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+sb.append(' ');
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:58:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+sb.append(' ');
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+assert (keys!=getSortedPropTypes());
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+assert (type!=keys[i]);
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+assert (x!=lookupProperty(type));
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+assert (keys!=null);
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:59:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:59:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 22:59:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:00:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:00:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:00:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:00:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().replace("\\n","\n"));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/3956/pattern-ver1-serial/Barlift.app.src.main.java.com.barliftapp.barlift.fragment.DealFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:00:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString().replace("\\n","\n"));
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/3956/pattern-ver1-serial/Barlift.app.src.main.java.com.barliftapp.barlift.fragment.DealFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:01:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(jsTypeString);
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:01:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
+assert (sb!=null);
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+}
+if(value.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:01:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:01:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+assert (sb!=null);
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:01:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+assert (sb!=null);
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:01:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+assert (sb!=null);
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+assert (sb!=null);
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+assert (sb!=null);
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+assert (sb!=null);
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+assert (sb!=null);
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+assert (sb!=null);
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:02:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+assert (sb!=null);
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+assert (sb!=null);
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(x.equals("655")){
+System.out.println();
+}
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals("655")){
+System.out.println();
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||"查看红包".equals(jsTypeString)){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null||"查看红包".equals(jsType)){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||"查看红包".equals(type)){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||"查看红包".equals(lineno)){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||"查看红包".equals(type)){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==3){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:04:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==3){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:04:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==3){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:04:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+sb.append(first.getString());
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:04:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(first.getString());
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
-}else {
 sb.append(first.getString());
+}else {
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(first.getString());
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(first.getString());
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:05:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(first.getString());
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:05:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(first.getString());
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString==""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type<0||type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<0||type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:05:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno<0||lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(first.getString());
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:06:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+sb.append(first.getString());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
+sb.append(first.getString());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/2884/pattern-ver1-serial/src.edu.asu.laits.gui.nodeeditor.CalculationsPanelView.java-processNodeEquation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(first.getString());
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:06:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+sb.append(first.getString());
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(first.getString());
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+sb.append(first.getString());
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+sb.append(first.getString());
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+sb.append(propToString(type));
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:07:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+sb.append(first.getString());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:07:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+PropListItem x=lookupProperty(type);
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:07:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+PropListItem x=lookupProperty(type);
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:07:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsType!=null){
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+String jsTypeString=jsType.toString();
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:08:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==0){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==0){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:08:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:08:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:08:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:08:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:09:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno>9){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type>9){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type>9){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+" -u "+sb);
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+" -u "+printSource);
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+" -u "+printAnnotations);
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+" -u "+printType);
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+" -u "+sb);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:10:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+" -u "+type);
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:10:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
+sb.append(propToString(type));
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
+sb.append(first.getString());
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:11:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append(first.getString());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(first.getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(first.getString());
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:11:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+sb.append(first.getString());
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:12:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:12:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:12:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:12:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:13:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
+try{
 sb.append(value);
+}finally{
+value=x.toString();
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:13:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1&&lineno<4000000){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:13:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION&&type<4000000){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:13:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER&&type<4000000){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+try{
 sb.append(' ');
+}finally{
+sb.append(first.getString());
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:13:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString==null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:13:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null||jsType==null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:14:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString.trim().isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:14:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first==null?null:first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:14:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1&&lineno!=9999){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:14:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER&&type!=9999){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:14:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION&&type!=9999){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
+if(Token.NUMBER>0&&type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(Token.FUNCTION>0&&type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(-1>0&&lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first!=null?first.getString():null);
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:15:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+sb.append(propToString(type));
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:15:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
+PropListItem x=lookupProperty(type);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:15:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:16:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:16:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:16:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:16:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:16:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:17:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:17:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+assert (sb!=null):"Appointments day is not allowed to be null!";
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:17:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+assert (sb!=null):"Appointments day is not allowed to be null!";
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:18:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+ final String currency=propToString(type);
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(currency);
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 2, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:18:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if(first.isEmpty()){
+first=null;
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:18:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+if(first.isEmpty()){
+first=null;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(first.isEmpty()){
+first=null;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:18:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+sb.append(propToString(type));
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/7/pattern-ver1-serial/src.com.peterverzijl.softwaresystems.qwirkle.networking.GameServer.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:18:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+PropListItem x=lookupProperty(type);
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/2202/pattern-ver1-serial/fhirmapper.src.main.java.org.openmrs.module.fhir.mapper.bundler.ProcedureMapper.java-setDiagnosisToDiagnosticReport.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+synchronized(this){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:19:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+synchronized(this){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+synchronized(this){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:19:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+synchronized(this){
 sb.append(' ');
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:19:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(first==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:20:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:20:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if("<invalid>"==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:20:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(first.getString()==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:20:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(first.getString()==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+}
+if(value==null){
+value="";
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/755/pattern-ver1-serial/src.org.simiancage.bukkit.messagechangerlite.MessageChangerLite.java-getMessage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(" (");
+sb.append(") ");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(" (");
+sb.append(") ");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(" (");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(") ");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(" (");
+sb.append(") ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" (");
+sb.append(") ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(" (");
 sb.append(getDouble());
+sb.append(") ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(" (");
 sb.append(lineno);
+sb.append(") ");
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+sb.append(" (");
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+sb.append(") ");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(" (");
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+sb.append(") ");
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:22:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+sb.append(" (");
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+sb.append(") ");
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:22:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(i+type>=sb.length()){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/3301/pattern-ver1-serial/src.net.fathomsoft.nova.util.StringUtils.java-containsString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:22:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
+if(sb!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:22:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
+if(sb!=null){
 sb.append(getDouble());
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:22:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:23:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+if(sb!=null){
 sb.append(getDouble());
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/3876/pattern-ver1-serial/src.com.akshay.protocol10.asplayer.service.MediaServiceContoller.java-onDestroy.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:23:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
-sb.append(getDouble());
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/3876/pattern-ver1-serial/src.com.akshay.protocol10.asplayer.service.MediaServiceContoller.java-onDestroy.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(Token.name(type));
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(Token.name(type));
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:24:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(Token.name(type));
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(Token.name(type));
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb==null){
+return ;
+}
+if(keys==null){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+if(sb==null){
+return ;
+}
 int[] keys=getSortedPropTypes();
+if(keys==null){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:24:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb==null){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:24:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(Token.name(type));
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 sb.append(first.getString());
+if(sb.equals("NAME")){
+return ;
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:25:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 sb.append("<invalid>");
+if(sb.equals("NAME")){
+return ;
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb.equals("NAME")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:25:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+if(sb.equals("NAME")){
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.equals("NAME")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:25:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
+if(sb.equals("NAME")){
+return ;
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
+if(sb.equals("NAME")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:25:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null&&!jsType.equals("")){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null&&!jsTypeString.equals("")){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:26:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(' ');
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(getString());
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(" [");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+sb.append(' ');
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:26:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(' ');
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(" [");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:26:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+sb.append(' ');
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:26:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
 sb.append(' ');
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
 sb.append(' ');
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:27:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
+if(sb!=null){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+}
+if(sb.equals("INFO")){
+return ;
 }
+if(sb.equals("UNIT")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:27:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
+}
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+if(sb.equals("INFO")){
+return ;
 }
+if(sb.equals("UNIT")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(first.getString()!=null){
 sb.append(first.getString());
+}else {
+sb.append("");
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
+if(value!=null){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:29:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(" ["!=null){
 sb.append(" [");
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+if(": "!=null){
 sb.append(": ");
+}
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
+if(value!=x.toString()){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:29:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb!=null){
 sb.append(" [");
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7443/pattern-ver1-serial/app.src.main.java.com.example.mobile.smartcycledemo.bluetooth.BluetoothLeService.java-setCharacteristicNotification.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+if(sb!=null){
 sb.append(": ");
+}
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7443/pattern-ver1-serial/app.src.main.java.com.example.mobile.smartcycledemo.bluetooth.BluetoothLeService.java-setCharacteristicNotification.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:29:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
+if(sb!=null){
 sb.append(']');
+}
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7443/pattern-ver1-serial/app.src.main.java.com.example.mobile.smartcycledemo.bluetooth.BluetoothLeService.java-setCharacteristicNotification.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:29:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+if(sb!=null){
 sb.append(propToString(type));
+}
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7443/pattern-ver1-serial/app.src.main.java.com.example.mobile.smartcycledemo.bluetooth.BluetoothLeService.java-setCharacteristicNotification.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if("<invalid>"!=null){
 sb.append("<invalid>");
+}else {
+sb.append("");
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/4235/pattern-ver1-serial/src.yakitmessenging.TextMessengerServlet.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:30:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
 sb.append(first.getString());
+}else {
+sb.append("<invalid>");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+}
+if(value==null){
+value=keys.toString();
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+}
+if(value==null){
+value=x.toString();
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(Token.name(type));
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(Token.name(type));
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(Token.name(type));
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(first.getString());
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(' ');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:30:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(' ');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:31:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+throw new IllegalStateException("User isn't registered! "+type);
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME||"查看红包".equals(first==null)){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME||first.getType()=='%'){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(true){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME&&printSource){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:31:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME==false){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5310/pattern-ver1-serial/src.main.java.snap.http.BearerAuthenticator.java-authenticate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:32:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString()+" ("+first.getLength()+")");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/592/pattern-ver1-serial/app.src.main.java.website.julianrosser.podcastplayer.helpers.LibrarySongListAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME&&first.getParent()!=null){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V10/4529/pattern-ver1-serial/org.lateralgm.subframes.GmObjectFrame.java-valueChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:32:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME==true){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:32:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(' ');
+sb.append("<invalid>");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("<invalid>");
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+sb.append(' ');
+sb.append("<invalid>");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+sb.append("<invalid>");
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(getString());
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
+sb.append("<invalid>");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
+sb.append(' ');
+sb.append(getString());
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
+}
+if(sb==null||value==null){
+throw new NullPointerException();
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:33:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(sb==null||jsTypeString==null){
+throw new NullPointerException();
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(sb==null||jsTypeString==null){
+throw new NullPointerException();
+}
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.contains("#")){
+jsTypeString=jsTypeString.split("#")[0];
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3981/pattern-ver1-serial/hdiv-core.src.main.java.org.hdiv.filter.ValidatorHelperRequest.java-restoreState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(' ');
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(first.getString());
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:34:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+sb.append(' ');
+sb.append(first.getString());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+sb.append(first.getString());
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(first.getString());
+sb.append("<invalid>");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("<invalid>");
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:35:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:35:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(lineno==12){
+return ;
+}else {
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:35:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
+if(sb!=null){
 sb.append(": ");
+}
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
+if(sb!=null){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:35:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
+if(sb!=null){
 sb.append(']');
+}
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb!=null){
 sb.append(" [");
+}
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:36:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
+if(sb!=null){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
+if(sb!=null){
 sb.append(']');
+}
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb!=null){
 sb.append(" [");
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
-sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+if(sb!=null){
 sb.append(": ");
+}
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
-sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
-sb.append(value);
+if(sb!=null){
 sb.append(']');
+}
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:36:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+if(sb!=null){
 sb.append(propToString(type));
+}
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:36:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:37:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if("<invalid>"!=null){
+if(sb!=null){
 sb.append(' ');
+}
+sb.append("<invalid>");
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7882/pattern-ver1-serial/RaspiMediaCenter.src.raspimediacenter.Logic.Utilities.ScraperUtils.java-scraperParseAlbum.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:37:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb!=null){
 sb.append(" [");
-sb.append(propToString(type));
+}
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:37:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+if(sb!=null){
 sb.append(": ");
+}
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:37:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(first.getString()!=null){
+if(sb!=null){
 sb.append(' ');
+}
+sb.append(first.getString());
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7882/pattern-ver1-serial/RaspiMediaCenter.src.raspimediacenter.Logic.Utilities.ScraperUtils.java-scraperParseAlbum.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 8, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getDouble());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getString());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+synchronized(this){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:37:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
+synchronized(this){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:38:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+long startTime=System.currentTimeMillis();
 sb.append("<invalid>");
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:38:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+long startTime=System.currentTimeMillis();
 sb.append(first.getString());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:38:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 sb.append(lineno);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 sb.append(getDouble());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:38:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+long startTime=System.currentTimeMillis();
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 sb.append(getString());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:39:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+long startTime=System.currentTimeMillis();
 sb.append(" : ");
 sb.append(jsTypeString);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:39:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
+long startTime=System.currentTimeMillis();
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:39:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+long startTime=System.currentTimeMillis();
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:39:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 0, DEL : 14
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/3556/pattern-ver1-serial/src.net.tootallnate.websocket.WebSocketClient.java-close.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 11, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:39:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first!=null){
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/501/pattern-ver1-serial/app.src.main.java.com.appteam.nimbus.adapters.NotificationAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:39:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+synchronized(this){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+if(type==Token.FUNCTION){
+sb.append(' ');
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:40:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4389/pattern-ver1-serial/app.src.main.java.com.gamble.unopp.GameScreenActivity.java-playCard.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 0, DEL : 16
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:40:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
+}else {
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/3950/pattern-ver1-serial/predictiveclustering.src.main.java.predictiveclustering.utils.Split.java-splitGroup.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:40:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:41:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:41:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:41:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:41:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:41:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 0, DEL : 17
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+synchronized(this){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:42:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
 sb.append(first.getString());
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/556/pattern-ver1-serial/onebusaway-android.src.main.java.org.onebusaway.android.report.ui.ReportProblemFragmentBase.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:42:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null&&jsTypeString.trim().length()==0){
+jsTypeString=null;
+}
+if(jsTypeString!=null||jsTypeString.trim().length()==0){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5053/pattern-ver1-serial/src.edu.clemson.lph.civet.prefs.CivetConfig.java-getEmailErrorsDirPath.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 7, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+for(int i=0;i<4;i++){
+keys[i]=Math.min(1,Math.max(0,keys[i]));
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:42:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(type==Token.NUMBER){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
+sb.append(getDouble());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 21, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:43:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+sb.append(getString());
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(' ');
+sb.append(getDouble());
+}else {
+if(type==Token.NUMBER){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:43:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 0, INS : 0, DEL : 30
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
 }else {
 sb.append(first.getString());
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:43:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+}else {
+if(type==12){
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:44:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
-if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 30, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+if(this instanceof StringNode){
+sb.append(' ');
+sb.append(getString());
+}else {
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 0, INS : 1, DEL : 30
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/2603/pattern-ver1-serial/Android.BarcodeScanner.2.0.0.src.com.phonegap.plugins.barcodescanner.BarcodeScanner.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 38, UPD : 0, INS : 0, DEL : 38
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:44:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+synchronized(this){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 42, UPD : 42, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:44:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[948,1007]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-default :
-
-value=x.toString();
-break;
-}
-sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 43, UPD : 0, INS : 0, DEL : 43
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:44:50 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toStringTree:[1011]#1.0
Compute Candidate : 2019.09.04 AD at 23:46:46 CDT - 2019.09.04 AD at 23:50:09 CDT , PNumber : 11192, CandNumber : 23 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:50:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:50:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return this.toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:50:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return this.toStringTree();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:50:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
+this.toStringTree();
 return toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:50:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return toStringTreeImpl().trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return new String(toStringTreeImpl());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:51:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return (String)toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return toStringTreeImpl().toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return (String)(toStringTreeImpl());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
+int a=0;
 return toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:51:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
+String OUTSTRING="";
 return toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:51:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return "FolderPersister for '"+this;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
+int a=1;
 return toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:52:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
+boolean b=true;
 return toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public String toStringTree(){
-return toStringTreeImpl();
+return toStringTreeImpl()+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 return toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:52:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return toStringTreeImpl().replaceAll("\r","");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:52:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return String.format("%s",toStringTreeImpl());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return toStringTreeImpl()==null?"":toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:52:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return toStringTreeImpl()!=null?toStringTreeImpl():new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:53:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1010,1012]
------------Candidate---------------
 public String toStringTree(){
-return toStringTreeImpl();
+return toStringTreeImpl()==null?new String():toStringTreeImpl();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.04 AD at 23:53:13 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toStringTreeImpl:[1016, 1017, 1018, 1019, 1020]#1.0
Compute Candidate : 2019.09.04 AD at 23:55:13 CDT - 2019.09.05 AD at 00:05:34 CDT , PNumber : 11235, CandNumber : 87 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
-StringBuilder s=new StringBuilder();
+ StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:05:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
-}catch(IOException e){
+}catch(Exception e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/2962/pattern-ver1-serial/src.sdk.src.com.tapit.vastsdk.TVASTPostbackTask.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
-StringBuilder s=new StringBuilder();
+StringBuilder s=new StringBuilder(null);
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+throw new RuntimeException("Should not happen\n"+e,e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/1629/pattern-ver1-serial/nifi-nar-bundles.nifi-framework-bundle.nifi-framework.nifi-web.nifi-web-api.src.main.java.org.apache.nifi.web.dao.impl.StandardComponentStateDAO.java-getState.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:06:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+throw new IllegalStateException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/7629/pattern-ver1-serial/smb.src.main.java.no.maddin.niofs.smb.SMBPath.java-getParent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:06:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
-StringBuilder s=new StringBuilder();
+StringBuilder s=new StringBuilder(1);
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+throw new IllegalArgumentException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/4179/pattern-ver1-serial/CommonChickenRuntimeEngine.src.ccre.log.LogLevel.java-fromByte.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
+import java.io.UnsupportedEncodingException;
+
 private String toStringTreeImpl(){
 try{
-StringBuilder s=new StringBuilder();
+StringBuilder s=new StringBuilder("UTF-8");
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/5909/pattern-ver1-serial/platform.security.handler.security-handler-api.src.main.java.org.codice.ddf.security.handler.api.PKIAuthenticationToken.java-PKIAuthenticationToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
-StringBuilder s=new StringBuilder();
+StringBuilder s=new StringBuilder(2);
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:06:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
-StringBuilder s=new StringBuilder();
+StringBuilder s=new StringBuilder(1000);
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/1052/pattern-ver1-serial/src.main.java.net.dv8tion.jda.requests.WebSocketClientV2.java-close.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return this.toStringTreeImpl();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:07:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+e.printStackTrace();
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/3119/pattern-ver1-serial/src.org.loklak.api.client.ClientConnection.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return null;
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return "";
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+this.toStringTreeImpl();
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:07:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
+this.toStringTreeImpl();
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s.toString().trim();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return new String(s.toString());
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return (String)s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s.toString().toLowerCase();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+synchronized(this){
 appendStringTree(s);
+}
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:08:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return (String)(s.toString());
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+throw new RuntimeException("Should not happen\n"+e.toString());
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/7313/pattern-ver1-serial/Core.astra.interpreter.src.astra.reasoner.util.ContentCodec.java-test_predicate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+appendStringTree(s);
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:08:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+s.append("]");
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+s.append("            scope.apply();\n");
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4602/pattern-ver1-serial/layout.src.main.java.com.flarestar.drones.layout.directives.Click.java-afterViewCreated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+s=s;
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+int a=0;
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:09:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
+int a=0;
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+String OUTSTRING="";
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:09:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
+String OUTSTRING="";
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+throw new RuntimeException(Strings.nullToEmpty("Should not happen\n"+e));
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:09:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+if(equals(s)){
+return null;
+}
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:10:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
+if(equals(s)){
+return null;
+}
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+if(equals(e)){
+return null;
+}
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+s.append(" & ");
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return "FolderPersister for '"+this;
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+s.append("    }\n");
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+int a=1;
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:10:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
+int a=1;
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+boolean b=true;
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:11:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
+boolean b=true;
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s.toString()+".*";
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:11:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+throw new RuntimeException("relativeCursorLocation: "+"Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6500/pattern-ver1-serial/pa.iscde.guibuilder.src.pt.iscte.pidesco.guibuilder.internal.GuiBuilderView.java-drop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:11:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+throw new RuntimeException("/"+"Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V15/628/pattern-ver1-serial/Group9_TwitterDataAnalysis.ICT2107_Hadoop.src.model.task8.Task8Mapper.java-getSentiFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+if(s==null){
+return "";
+}
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:11:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+if(e==null){
+return "";
+}
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+if(s==null){
+return null;
+}
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+if(e==null){
+return null;
+}
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
+if(s==null){
+return null;
+}
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+if("&null".equals(s)){
+return null;
+}
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+if(s.equals("")){
+return "";
+}
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+if(s.equals("-1")){
+return null;
+}
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
-try{
 StringBuilder s=new StringBuilder();
+try{
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:13:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:13:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+assert (s!=null);
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:13:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+assert (e!=null);
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+throw new UnsupportedOperationException();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+if(e!=null){
+throw new RuntimeException("Should not happen\n"+e);
+}
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:13:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s.toString().replaceAll("\r","");
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:13:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return String.format("%s",s.toString());
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:13:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+assert (s!=new StringBuilder());
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:14:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+if(s.equals(null)){
+return null;
+}
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:14:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
+if(s.equals(null)){
+return null;
+}
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:14:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
-StringBuilder s=new StringBuilder();
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
+StringBuilder s=new StringBuilder(indexClassList);
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:14:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 try{
-StringBuilder s=new StringBuilder();
+StringBuilder s=new StringBuilder(indexClassList);
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
+if(s.equals("655")){
+System.out.println();
+}
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:14:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+if(s.equals("655")){
+System.out.println();
+}
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s.toString()==null?"":s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:15:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s.toString()!=null?s.toString():new String();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:15:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+throw new RuntimeException("Should not happen\n"+e+" -u "+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:15:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s==null?null:s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:15:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s.toString()==null?new String():s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:15:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
+if(s!=null){
 return s.toString();
+}else {
+return null;
+}
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/3589/pattern-ver1-serial/HermesBucarBala.app.src.main.java.com.laboratoriodesoftware2015.hermesbucarbala.presenter.DashboardPresenter.java-getListTabsById.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s!=null?s.toString():null;
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+assert (s!=null):"Appointments day is not allowed to be null!";
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:16:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
+assert (e!=null):"Appointments day is not allowed to be null!";
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:16:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
-return s.toString();
+return s!=null?s.toString():"";
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3020/pattern-ver1-serial/src.main.java.com.karumi.reddo.task.GitHubRepositoryTask.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:16:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
+if(s==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:16:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+s.append(" (");
+s.append(") ");
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:16:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+s.append("\"category\" : [");
+s.append("]");
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1798/pattern-ver1-serial/src.main.java.com.github.jerdeb.daqvalidator.Validator.java-listCompliantCDM.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+ final String dropStatement="Should not happen\n"+e;
+throw new RuntimeException(dropStatement);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:16:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
-throw new RuntimeException("Should not happen\n"+e);
+String loc="Should not happen\n"+e;
+throw new RuntimeException(loc);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+s.append("<table style=\"text-align: center;\" width=\"100%\" "+"height=\"100%\" border=\"0\" bordercolor=\"#000000\">");
+s.append("</table>");
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5923/pattern-ver1-serial/photoweb.src.com.utils.web.GenerateHTML.java-genDayNavigate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+for(int i=0;i<24;i++){
 appendStringTree(s);
+}
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1014,1022]
------------Candidate---------------
 private String toStringTreeImpl(){
 try{
 StringBuilder s=new StringBuilder();
+if(s.toString().contains("E")&&s.toString().charAt(s.indexOf("E")+1)!='-'&&Integer.parseInt(s.toString().substring(s.indexOf("E")+1,s.length()))<=15){
+return String.format("%.0f",Double.parseDouble(s.toString().replace(' ','\0')));
+}
 appendStringTree(s);
 return s.toString();
 }catch(IOException e){
 throw new RuntimeException("Should not happen\n"+e);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/476/pattern-ver1-serial/app.src.main.java.com.davidsgk.microcalc.MainActivity.java-Interpreter.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 0, INS : 40, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:17:24 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.appendStringTree:[1025, 1026]#1.0
Compute Candidate : 2019.09.05 AD at 00:19:22 CDT - 2019.09.05 AD at 00:21:58 CDT , PNumber : 7778, CandNumber : 24 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+appendStringTree(appendable);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+synchronized(this){
 toStringTreeHelper(this,0,appendable);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+if(equals(appendable)){
+return ;
+}
 toStringTreeHelper(this,0,appendable);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+if(appendable==null){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+if(appendable==null){
+return ;
+}
 toStringTreeHelper(this,0,appendable);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+if("index".equals(appendable)){
+return ;
+}
 toStringTreeHelper(this,0,appendable);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+if(appendable.equals("TIME")){
+return ;
+}
 toStringTreeHelper(this,0,appendable);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+if("&null".equals(appendable)){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+if(appendable.equals("DATETIME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+appendable.append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+appendable=appendable;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+int a=0;
 toStringTreeHelper(this,0,appendable);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+if(isEmpty()){
+throw new IOException("Pop an empty stack.");
+}
 toStringTreeHelper(this,0,appendable);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+String OUTSTRING="";
 toStringTreeHelper(this,0,appendable);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+assert (appendable!=null);
 toStringTreeHelper(this,0,appendable);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+if(appendable!=null){
+toStringTreeHelper(this,0,appendable);
+}
 toStringTreeHelper(this,0,appendable);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+if(appendable.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
 toStringTreeHelper(this,0,appendable);
+appendable.append(" (");
+appendable.append(") ");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_13_buggy/src/com/google/javascript/rhino/Node.java[1024,1026]
------------Candidate---------------
 public void appendStringTree(Appendable appendable) throws IOException{
+if(appendable.equals("CALL_RECEIVED_AT")){
+return ;
+}
 toStringTreeHelper(this,0,appendable);
+if(appendable.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.IntegrationTest::testIssue787]
---------START : 2019.09.04 AD at 19:21:58 CDT
---------TIME : 2019.09.05 AD at 00:21:58 CDT
--------------- END -----------------
Finish : closure-13 > patch : 0 | Start : Wed Sep 04 19:21:58 CDT 2019 | End : 2019.09.05 AD at 00:21:58 CDT
