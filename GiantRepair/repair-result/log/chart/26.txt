Repair : chart_26
Current failed test : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo | 2019.09.05 AD at 20:33:55 CDT
Location : org.jfree.chart.plot.CategoryPlot.draw:[2547, 2536, 2537, 2538, 2543, 2549, 2552, 2553, 2556, 2557, 2558, 2560, 2564, 2565, 2571]#1.0
Compute Candidate : 2019.09.05 AD at 20:35:41 CDT - 2019.09.05 AD at 23:36:37 CDT , PNumber : 11460, CandNumber : 753 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:37:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+return ;
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+return ;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:38:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+return ;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:40:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+return ;
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+return ;
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+return ;
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:44:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+return ;
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+return ;
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Solution---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
+return ;
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+return ;
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
+return ;
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4018/pattern-ver1-serial/src.client.net.Clientsocket.java-Sender.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
+return ;
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4018/pattern-ver1-serial/src.client.net.Clientsocket.java-Sender.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+return ;
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+return ;
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+return ;
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+return ;
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+return ;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+return ;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+return ;
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
-AxisSpace space=calculateAxisSpace(g2,area);
+ AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
-Rectangle2D dataArea=space.shrink(area,null);
+ Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
-boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+ boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
-Map axisStateMap=drawAxes(g2,area,dataArea,state);
+ Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if(b1&&b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
-if(parentState!=null){
+if(parentState==null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
-if(state==null){
+if(state!=null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+boolean b1=(area.getWidth()<=2);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/3732/pattern-ver1-serial/reformulation-core.src.main.java.org.semanticweb.ontop.owlrefplatform.core.unfolding.TypeLift.java-f.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
-boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean b2=(area.getHeight()<=2);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/3732/pattern-ver1-serial/reformulation-core.src.main.java.org.semanticweb.ontop.owlrefplatform.core.unfolding.TypeLift.java-f.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(getRenderer()==null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/2545/pattern-ver1-serial/kennedy-langlotz.KLQ.src.com.klq.ast.ParseTreeConverter.java-visitUncondQuestion.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(getRenderer(1)!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
+getRenderer(1).drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+boolean b1=(area.getWidth()<MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3196/pattern-ver1-serial/src.game.Game.java-dealerTurn.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
-boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean b2=(area.getHeight()<MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3196/pattern-ver1-serial/src.game.Game.java-dealerTurn.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+boolean b1=(area.getHeight()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/4077/pattern-ver1-serial/src.com.edisonwang.stackedview.view.StackedView.java-prepareScrollingToBottom.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+boolean b1=(area.getWidth()>=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6682/pattern-ver1-serial/src.Geometry.Graham_Scan.java-leftTurn.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
-boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean b2=(area.getHeight()>=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6682/pattern-ver1-serial/src.Geometry.Graham_Scan.java-leftTurn.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(toString()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(getRenderer(2)!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
+getRenderer(2).drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(state!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
-if(getRenderer()!=null){
+if(state!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
-if(parentState!=null){
+if(state!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(g2!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(area!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(anchor!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(parentState!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+drawBackground(g2,dataArea);
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+drawBackground(g2,dataArea);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
+drawBackground(g2,dataArea);
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+state.setPlotArea(area);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+insets.trim(area);
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+insets.trim(area);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+insets.trim(area);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+insets.trim(area);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+insets.trim(area);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
+insets.trim(area);
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+insets.trim(area);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+drawBackground(g2,dataArea);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ final RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
-Shape savedClip=g2.getClip();
+ final Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
-Composite originalComposite=g2.getComposite();
+ final Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
-DatasetRenderingOrder order=getDatasetRenderingOrder();
+ final DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
-AxisSpace space=calculateAxisSpace(g2,area);
+ final AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
-Rectangle2D dataArea=space.shrink(area,null);
+ final Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
-Map axisStateMap=drawAxes(g2,area,dataArea,state);
+ final Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
-boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ final RectangleInsets insets=getInsets();
 insets.trim(area);
-AxisSpace space=calculateAxisSpace(g2,area);
+ final AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ final RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
-DatasetRenderingOrder order=getDatasetRenderingOrder();
+ final DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
-DatasetRenderingOrder order=getDatasetRenderingOrder();
+ DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
-Shape savedClip=g2.getClip();
+ Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
-Composite originalComposite=g2.getComposite();
+ Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
-AxisSpace space=calculateAxisSpace(g2,area);
+ AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
-Rectangle2D dataArea=space.shrink(area,null);
+ Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
-Map axisStateMap=drawAxes(g2,area,dataArea,state);
+ Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
-DatasetRenderingOrder order=getDatasetRenderingOrder();
+ DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
-Shape savedClip=g2.getClip();
+ Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.TreeSet;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(area.isEmpty()){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/1891/pattern-ver1-serial/src.jp.ac.osaka_u.ist.sdl.prevol.db.retriever.MethodDataRetriever.java-retrieveInSpecifiedFiles.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.TreeSet;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea.isEmpty()){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/1891/pattern-ver1-serial/src.jp.ac.osaka_u.ist.sdl.prevol.db.retriever.MethodDataRetriever.java-retrieveInSpecifiedFiles.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap.isEmpty()){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
+insets.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
+state=state;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+axisStateMap.clear();
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6396/pattern-ver1-serial/core.src.com.FOS.Pixel.screens.GameScreen.java-checkCollectedOrbs.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if(b1&&b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
-foundData=render(g2,dataArea,i,state)||foundData;
+foundData=render(g2,dataArea,i,state)&&foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if(b1&&b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
-foundData=render(g2,dataArea,i,state)||foundData;
+foundData=render(g2,dataArea,i,state)&&foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+synchronized(state){
 state.setPlotArea(area);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+synchronized(insets){
 insets.trim(area);
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
+synchronized(state){
 state.setDataArea(dataArea);
+}
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+synchronized(g2){
 g2.clip(dataArea);
+}
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
+synchronized(g2){
 g2.setClip(savedClip);
+}
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
+synchronized(g2){
 g2.setComposite(originalComposite);
+}
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+synchronized(getRenderer()){
 getRenderer().drawBackground(g2,this,dataArea);
+}
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
+state=null;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+synchronized(this){
 drawBackground(g2,dataArea);
+}
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+synchronized(this){
 state.setPlotArea(area);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+synchronized(this){
 insets.trim(area);
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(equals(area)){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(equals(area)){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
+if(equals(g2)){
+return ;
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
+if(equals(area)){
+return ;
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(equals(g2)){
+return ;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(equals(area)){
+return ;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+while(true){
+
+}
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+while(true){
+
+}
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+while(true){
+
+}
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
+synchronized(this){
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
+synchronized(this){
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+}
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+synchronized(this){
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
+synchronized(this){
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
+synchronized(this){
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+synchronized(this){
 if(b1||b2){
 return ;
+}
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
+synchronized(this){
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
+synchronized(this){
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+}
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
+synchronized(this){
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+}
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+synchronized(this.axisOffset){
 this.axisOffset.trim(dataArea);
+}
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/1575/pattern-ver1-serial/api.JobContext.java-issueTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(dataArea.isEmpty()){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2662/pattern-ver1-serial/letter-annotator-api.src.main.java.org.modelcatalogue.letter.annotator.AbstractHighlighter.java-highlight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+if(dataArea.isEmpty()){
+return ;
+}
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2662/pattern-ver1-serial/letter-annotator-api.src.main.java.org.modelcatalogue.letter.annotator.AbstractHighlighter.java-highlight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(area.isEmpty()){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(area.isEmpty()){
+return ;
+}
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(area.isEmpty()){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+g2.setColor(Color.RED);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/5656/pattern-ver1-serial/src.view.game.GameView.java-paintComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+g2.setColor(Color.RED);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/5656/pattern-ver1-serial/src.view.game.GameView.java-paintComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
+if(dataArea.isEmpty()){
+return ;
+}
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+if(dataArea.isEmpty()){
+return ;
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
+if(dataArea.isEmpty()){
+return ;
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
+if(dataArea.isEmpty()){
+return ;
+}
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
 }
+if(dataArea.isEmpty()){
+return ;
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
+if(dataArea.isEmpty()){
+return ;
+}
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(dataArea.isEmpty()){
+return ;
+}
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(dataArea.isEmpty()){
+return ;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(g2==null){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(area==null){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(parentState==null){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(state==null){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets==null){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space==null){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea==null){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap==null){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+if(g2==null){
+return ;
+}
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(g2==null){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
+if(g2==null){
+return ;
+}
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
+if(g2==null){
+return ;
+}
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
+if(g2==null){
+return ;
+}
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+if(g2==null){
+return ;
+}
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
+if(g2==null){
+return ;
+}
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
+if(g2==null){
+return ;
+}
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
+if(g2==null){
+return ;
+}
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
+if(g2==null){
+return ;
+}
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
+if(g2==null){
+return ;
+}
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+if(g2==null){
+return ;
+}
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
+if(g2==null){
+return ;
+}
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
+if(g2==null){
+return ;
+}
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(order==null){
+return ;
+}
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(savedClip==null){
+return ;
+}
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
+if(originalComposite==null){
+return ;
+}
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+if(state!=null){
 state.setPlotArea(area);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets!=null){
 insets.trim(area);
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
+if(state!=null){
 state.setDataArea(dataArea);
+}
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
+if(getRenderer()!=null){
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+}
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+if(area!=null){
 state.setPlotArea(area);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(this.axisOffset!=null){
 this.axisOffset.trim(dataArea);
+}
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap==g2){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(area==null){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(state==null){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(b1==(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW)){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea==space.shrink(area,null)){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
+if(foundData==false){
+return ;
+}
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets==getInsets()){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(order==getDatasetRenderingOrder()){
+return ;
+}
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+if(dataArea==null){
+return ;
+}
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+if(dataArea==null){
+return ;
+}
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
-if(state==null){
+if(state.equals(null)){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(getRenderer().equals(null)){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
+if(g2!=null){
 g2.setClip(savedClip);
+}
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/5324/pattern-ver1-serial/src.main.java.de.cismet.cids.custom.objecteditors.wrrl_db_mv.HydrologRouteEditor.java-sldZoomStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
+if(g2!=null){
 g2.setComposite(originalComposite);
+}
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/5324/pattern-ver1-serial/src.main.java.de.cismet.cids.custom.objecteditors.wrrl_db_mv.HydrologRouteEditor.java-sldZoomStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
+synchronized(this){
 return ;
+}
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(area==null){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
+if(g2==null){
+return ;
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
+if(area==null){
+return ;
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(area==null){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(g2==null){
+return ;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(area==null){
+return ;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(dataArea==null){
+return ;
+}
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
+if(dataArea==null){
+return ;
+}
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
+if(dataArea==null){
+return ;
+}
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+if(dataArea==null){
+return ;
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
+if(dataArea==null){
+return ;
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
+if(dataArea==null){
+return ;
+}
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
 }
+if(dataArea==null){
+return ;
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
+if(dataArea==null){
+return ;
+}
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(dataArea==null){
+return ;
+}
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if("index".equals(g2)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+if("index".equals(g2)){
+return ;
+}
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
+if("index".equals(g2)){
+return ;
+}
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
+if("index".equals(g2)){
+return ;
+}
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+if("index".equals(g2)){
+return ;
+}
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+if("index".equals(g2)){
+return ;
+}
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+if("index".equals(state)){
+return ;
+}
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
+if("index".equals(parentState)){
+return ;
+}
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
+if("index".equals(state)){
+return ;
+}
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
+if("index".equals(parentState)){
+return ;
+}
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
+if(axisStateMap==null){
+return ;
+}
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4743/pattern-ver1-serial/app.src.main.java.com.wafflestudio.shafe.MapManager.java-initializeMapWithSavedValue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(g2.equals("TIME")){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+if(g2.equals("TIME")){
+return ;
+}
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2.equals("TIME")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(area.equals("TIME")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(parentState.equals("TIME")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(state.equals("TIME")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.equals("TIME")){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(dataArea.equals("TIME")){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if("&null".equals(g2)){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if("&null".equals(area)){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if("&null".equals(parentState)){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if("&null".equals(state)){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if("&null".equals(insets)){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if("&null".equals(space)){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if("&null".equals(dataArea)){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if("&null".equals(axisStateMap)){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+if(g2.equals("DATETIME")){
+return ;
+}
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+if(g2.equals("DATETIME")){
+return ;
+}
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
+if(parentState.equals("DATETIME")){
+return ;
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(g2.equals("DATETIME")){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(area.equals("DATETIME")){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(parentState.equals("DATETIME")){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(state.equals("DATETIME")){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.equals("DATETIME")){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ final RectangleInsets insets=getInsets();
 insets.trim(area);
-AxisSpace space=calculateAxisSpace(g2,area);
+ final AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ final RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
-Shape savedClip=g2.getClip();
+ final Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ final RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
-Composite originalComposite=g2.getComposite();
+ final Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
-RectangleInsets insets=getInsets();
+ final RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
-Map axisStateMap=drawAxes(g2,area,dataArea,state);
+ final Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
-AxisSpace space=calculateAxisSpace(g2,area);
-Rectangle2D dataArea=space.shrink(area,null);
+ final AxisSpace space=calculateAxisSpace(g2,area);
+ final Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
+g2=g2;
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
-AxisSpace space=calculateAxisSpace(g2,area);
+ final AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
-Shape savedClip=g2.getClip();
+ final Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
-AxisSpace space=calculateAxisSpace(g2,area);
+ final AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
-Composite originalComposite=g2.getComposite();
+ final Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.equals("")){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space.equals("")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap.equals("")){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(order.equals("")){
+return ;
+}
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea.equals("")){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(savedClip.equals("")){
+return ;
+}
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
+if(originalComposite.equals("")){
+return ;
+}
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+axisStateMap.remove(null);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4839/pattern-ver1-serial/runtime.src.main.java.com.flipkart.flux.resource.StateMachineResource.java-getGraphData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if(!b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
-if(state==null){
+if(true){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(true){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if(true){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if(b1||b2&&b1){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if(b1||b2&&b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(getRenderer()!=null==false){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
+if(state==null){
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if(b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.equals("-1")){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space.equals("-1")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea.equals("-1")){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(savedClip.equals("-1")){
+return ;
+}
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
+if(originalComposite.equals("-1")){
+return ;
+}
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(order.equals("-1")){
+return ;
+}
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap.equals("-1")){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+ final boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
-AxisSpace space=calculateAxisSpace(g2,area);
+ final AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
-Map axisStateMap=drawAxes(g2,area,dataArea,state);
+ final Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+int a=0;
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
+int a=0;
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+int a=0;
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+int a=0;
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+int a=0;
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+b1=false;
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/271/pattern-ver1-serial/src.datamining.clustering.protoype.altopt.PolynomFCMNoiseClusteringAlgorithm.java-classifyNoise.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+b2=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/271/pattern-ver1-serial/src.datamining.clustering.protoype.altopt.PolynomFCMNoiseClusteringAlgorithm.java-classifyNoise.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(area.equals(g2)){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(parentState.equals(g2)){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(state.equals(g2)){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.equals(g2)){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space.equals(g2)){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea.equals(g2)){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(dataArea.equals(g2)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(g2.equals(dataArea)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
+String OUTSTRING="";
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+String OUTSTRING="";
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+String OUTSTRING="";
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+String OUTSTRING="";
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+String OUTSTRING="";
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(area==null){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
+if(g2==null){
+return ;
+}
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+if(g2==null){
+return ;
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
+int MINIMUM_WIDTH_TO_DRAW=5;
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
+int MINIMUM_HEIGHT_TO_DRAW=5;
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(area.equals(InputStream.class)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(anchor.equals(InputStream.class)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(parentState.equals(InputStream.class)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(state.equals(InputStream.class)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(insets.equals(InputStream.class)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(space.equals(InputStream.class)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(dataArea.equals(InputStream.class)){
+return ;
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if(b1){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(area.contains(area)){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(area.contains(area)){
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(getRenderer()!=null==true){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(g2!=null){
 g2.clip(dataArea);
+}
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/387/pattern-ver1-serial/AugmentedBizzClient.src.com.app.augmentedbizz.application.data.DataManager.java-clearLocalBuffer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+int indexSelection=0;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
+int indexSelection=0;
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+int indexSelection=0;
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+int indexSelection=0;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
+if(parentState.equals("setPackMode")){
+return ;
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
+if(state.equals("setPackMode")){
+return ;
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
+if(area.equals("setPackMode")){
+return ;
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.equals("setPackMode")){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space.equals("setPackMode")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea.equals("setPackMode")){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+if(rangeAxisState.equals("setPackMode")){
+return ;
+}
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap.equals("setPackMode")){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
+if(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha())!=null){
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
+}
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/294/pattern-ver1-serial/src.com.fererlab.dto.PairConverter.java-marshal.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
+int a=1;
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+int a=1;
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+int a=1;
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+int a=1;
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+int a=1;
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
+if(this.renderers!=null){
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
+}
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7646/pattern-ver1-serial/src.java.com.smi.travel.datalayer.dao.impl.TourOperationImpl.java-updateTourOperation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
+if(this.renderers!=null){
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
+}
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7646/pattern-ver1-serial/src.java.com.smi.travel.datalayer.dao.impl.TourOperationImpl.java-updateTourOperation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
+if(this.renderers!=null){
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7646/pattern-ver1-serial/src.java.com.smi.travel.datalayer.dao.impl.TourOperationImpl.java-updateTourOperation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
+if(this.renderers!=null){
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7646/pattern-ver1-serial/src.java.com.smi.travel.datalayer.dao.impl.TourOperationImpl.java-updateTourOperation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+if(rangeAxisState==null){
+return ;
+}
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/4697/pattern-ver1-serial/src.main.java.chbachman.armour.items.armour.logic.LPUpgradeLogic.java-damageArmour.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+boolean MINIMUM_WIDTH_TO_DRAW=true;
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+boolean MINIMUM_HEIGHT_TO_DRAW=true;
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+boolean b=true;
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
+boolean b=true;
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+boolean b=true;
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+boolean b=true;
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+boolean b=true;
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
+if(g2==null){
+continue;
+}
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+synchronized(this){
 state=new PlotRenderingInfo(null);
+}
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+axisStateMap.put("outputs","1");
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/2411/pattern-ver1-serial/situation_template_mapping.src.mapping.ConditionNodeMapper.java-mapNodes.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+axisStateMap.put("java.util.logging.FileHandler.dir","log");
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/7848/pattern-ver1-serial/microservice.src.main.java.com.fiorano.openesb.microservice.launch.impl.CommandProvider.java-getCommandLineParams.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+axisStateMap.put("age","");
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4702/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.index.IndexV3Api.java-index.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state.setPlotArea(area);
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+drawBackground(g2,dataArea);
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+drawBackground(g2,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+drawBackground(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+drawBackground(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+drawBackground(g2,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+drawBackground(g2,dataArea);
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+drawBackground(g2,dataArea);
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
-boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+boolean b1=area.isEmpty();
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/2095/pattern-ver1-serial/app.src.main.java.com.bulletphysics.dynamics.RigidBody.java-destroy.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
-boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean b2=area.isEmpty();
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/2095/pattern-ver1-serial/app.src.main.java.com.bulletphysics.dynamics.RigidBody.java-destroy.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+drawBackground(g2,dataArea);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
-drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+drawOutline(g2,dataArea);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
-drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
+if(!AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()).equals("")){
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
+}
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+if(!area.equals("")){
 state.setPlotArea(area);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(!area.equals("")){
 insets.trim(area);
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+state.setDataArea(dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+state.setDataArea(dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+state.setDataArea(dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+state.setDataArea(dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
+state.setPlotArea(area);
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+state.setPlotArea(area);
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
+state.setPlotArea(area);
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
+state.setPlotArea(area);
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
+state.setDataArea(dataArea);
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+state.setDataArea(dataArea);
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
+state.setDataArea(dataArea);
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
+state.setDataArea(dataArea);
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
+state.setDataArea(dataArea);
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+state.setPlotArea(area);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+state.setPlotArea(area);
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+state.setPlotArea(area);
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+state.setPlotArea(area);
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+state.setDataArea(dataArea);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+state.setDataArea(dataArea);
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+state.setDataArea(dataArea);
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+state.setDataArea(dataArea);
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+state.setDataArea(dataArea);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
-state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
+state.setDataArea(dataArea);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
-insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+insets.trim(area);
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
-insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
+insets.trim(area);
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
-insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+insets.trim(area);
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
-insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
+insets.trim(area);
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
-insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+insets.trim(area);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
-insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
+insets.trim(area);
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
-insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
+insets.trim(area);
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+drawNoDataMessage(g2,dataArea);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
-drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V3/2011/pattern-ver1-serial/src.com.jclarity.anim.memory.MemoryModel.java-allocate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+drawAnnotations(g2,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
-drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+drawDomainGridlines(g2,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
-drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+drawNoDataMessage(g2,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
+state.setPlotArea(area);
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+state.setPlotArea(area);
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
+state.setPlotArea(area);
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
+state.setPlotArea(area);
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+state.setPlotArea(area);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
+state.setPlotArea(area);
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
-}
 state.setPlotArea(area);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+state.setPlotArea(area);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+state.setPlotArea(area);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+state.setPlotArea(area);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+state.setPlotArea(area);
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+state.setPlotArea(area);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+state.setPlotArea(area);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+assert (g2!=null);
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+assert (area!=null);
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+assert (parentState!=null);
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+assert (state!=null);
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+assert (insets!=null);
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+assert (space!=null);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+assert (dataArea!=null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+assert (axisStateMap!=null);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+assert (!area.isEmpty());
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+assert (!dataArea.isEmpty());
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+g2.clip(dataArea);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
-g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+drawBackground(g2,dataArea);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+drawAnnotations(g2,dataArea);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
-drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+drawOutline(g2,dataArea);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+drawDomainGridlines(g2,dataArea);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
-drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+drawNoDataMessage(g2,dataArea);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
-drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+drawBackground(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
-drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+drawBackground(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
-drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+drawBackground(g2,dataArea);
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
-drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+drawBackground(g2,dataArea);
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
-}else {
 drawBackground(g2,dataArea);
+}else {
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
-drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+drawBackground(g2,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
-drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+drawBackground(g2,dataArea);
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(area!=null){
+boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(b1||b2){
+return ;
+}
+if(state==null){
+state=new PlotRenderingInfo(null);
+}
+state.setPlotArea(area);
+RectangleInsets insets=getInsets();
+insets.trim(area);
+AxisSpace space=calculateAxisSpace(g2,area);
+Rectangle2D dataArea=space.shrink(area,null);
+this.axisOffset.trim(dataArea);
+state.setDataArea(dataArea);
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
+}
+Map axisStateMap=drawAxes(g2,area,dataArea,state);
+Shape savedClip=g2.getClip();
+g2.clip(dataArea);
+drawDomainGridlines(g2,dataArea);
+AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+if(rangeAxisState==null){
+if(parentState!=null){
+rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
+}
+if(rangeAxisState!=null){
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+}
+for(int i=0;i<this.renderers.size();i++){
+drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
+}
+for(int i=0;i<this.renderers.size();i++){
+drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
+}
+boolean foundData=false;
+Composite originalComposite=g2.getComposite();
+g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
+DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(order==DatasetRenderingOrder.FORWARD){
+for(int i=0;i<this.datasets.size();i++){
+foundData=render(g2,dataArea,i,state)||foundData;
+}
+}else {
+for(int i=this.datasets.size()-1;i>=0;i--){
+foundData=render(g2,dataArea,i,state)||foundData;
+}
+}
+for(int i=0;i<this.renderers.size();i++){
+drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+for(int i=0;i<this.renderers.size();i++){
+drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+drawAnnotations(g2,dataArea);
+g2.setClip(savedClip);
+g2.setComposite(originalComposite);
+if(!foundData){
+drawNoDataMessage(g2,dataArea);
+}
+if(isRangeCrosshairVisible()){
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
+if(getRenderer()!=null){
+getRenderer().drawOutline(g2,this,dataArea);
+}else {
+drawOutline(g2,dataArea);
+}
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+if(g2!=null){
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+}
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(state!=null){
+boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(b1||b2){
+return ;
+}
+if(state==null){
+state=new PlotRenderingInfo(null);
+}
+state.setPlotArea(area);
+RectangleInsets insets=getInsets();
+insets.trim(area);
+AxisSpace space=calculateAxisSpace(g2,area);
+Rectangle2D dataArea=space.shrink(area,null);
+this.axisOffset.trim(dataArea);
+state.setDataArea(dataArea);
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
+}
+Map axisStateMap=drawAxes(g2,area,dataArea,state);
+Shape savedClip=g2.getClip();
+g2.clip(dataArea);
+drawDomainGridlines(g2,dataArea);
+AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+if(rangeAxisState==null){
+if(parentState!=null){
+rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
+}
+if(rangeAxisState!=null){
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+}
+for(int i=0;i<this.renderers.size();i++){
+drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
+}
+for(int i=0;i<this.renderers.size();i++){
+drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
+}
+boolean foundData=false;
+Composite originalComposite=g2.getComposite();
+g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
+DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(order==DatasetRenderingOrder.FORWARD){
+for(int i=0;i<this.datasets.size();i++){
+foundData=render(g2,dataArea,i,state)||foundData;
+}
+}else {
+for(int i=this.datasets.size()-1;i>=0;i--){
+foundData=render(g2,dataArea,i,state)||foundData;
+}
+}
+for(int i=0;i<this.renderers.size();i++){
+drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+for(int i=0;i<this.renderers.size();i++){
+drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+drawAnnotations(g2,dataArea);
+g2.setClip(savedClip);
+g2.setComposite(originalComposite);
+if(!foundData){
+drawNoDataMessage(g2,dataArea);
+}
+if(isRangeCrosshairVisible()){
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
+if(getRenderer()!=null){
+getRenderer().drawOutline(g2,this,dataArea);
+}else {
+drawOutline(g2,dataArea);
+}
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+if(dataArea!=null){
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+}
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2!=null){
+boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(b1||b2){
+return ;
+}
+if(state==null){
+state=new PlotRenderingInfo(null);
+}
+state.setPlotArea(area);
+RectangleInsets insets=getInsets();
+insets.trim(area);
+AxisSpace space=calculateAxisSpace(g2,area);
+Rectangle2D dataArea=space.shrink(area,null);
+this.axisOffset.trim(dataArea);
+state.setDataArea(dataArea);
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
+}
+Map axisStateMap=drawAxes(g2,area,dataArea,state);
+Shape savedClip=g2.getClip();
+g2.clip(dataArea);
+drawDomainGridlines(g2,dataArea);
+AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+if(rangeAxisState==null){
+if(parentState!=null){
+rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
+}
+if(rangeAxisState!=null){
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+}
+for(int i=0;i<this.renderers.size();i++){
+drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
+}
+for(int i=0;i<this.renderers.size();i++){
+drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
+}
+boolean foundData=false;
+Composite originalComposite=g2.getComposite();
+g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
+DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(order==DatasetRenderingOrder.FORWARD){
+for(int i=0;i<this.datasets.size();i++){
+foundData=render(g2,dataArea,i,state)||foundData;
+}
+}else {
+for(int i=this.datasets.size()-1;i>=0;i--){
+foundData=render(g2,dataArea,i,state)||foundData;
+}
+}
+for(int i=0;i<this.renderers.size();i++){
+drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+for(int i=0;i<this.renderers.size();i++){
+drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+drawAnnotations(g2,dataArea);
+g2.setClip(savedClip);
+g2.setComposite(originalComposite);
+if(!foundData){
+drawNoDataMessage(g2,dataArea);
+}
+if(isRangeCrosshairVisible()){
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
+if(getRenderer()!=null){
+getRenderer().drawOutline(g2,this,dataArea);
+}else {
+drawOutline(g2,dataArea);
+}
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+assert (b1!=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW));
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+assert (b2!=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW));
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+assert (dataArea!=space.shrink(area,null));
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+assert (insets!=getInsets());
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+assert (space!=calculateAxisSpace(g2,area));
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+assert (axisStateMap!=drawAxes(g2,area,dataArea,state));
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+assert (dataArea!=null);
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
+assert (dataArea!=null);
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
+assert (dataArea!=null);
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+assert (dataArea!=null);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
+assert (dataArea!=null);
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+assert (dataArea!=null);
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
+assert (dataArea!=null);
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
+assert (dataArea!=null);
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+assert (g2!=null);
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+assert (g2!=null);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(area.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(parentState.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(state.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
-g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
+g2.setClip(savedClip);
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
-g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
+g2.setComposite(originalComposite);
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+g2.setClip(savedClip);
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
-g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
-g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
+g2.setClip(savedClip);
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
-g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
+g2.setComposite(originalComposite);
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+assert (g2!=null);
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
+assert (parentState!=null);
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+assert (state!=null);
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(area.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(area.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(area.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(area.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
+if(area.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(area.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+g2.clip(dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
-g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+g2.clip(dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
-g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
-g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+g2.clip(dataArea);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
-g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+g2.clip(dataArea);
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
-g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+g2.clip(dataArea);
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+assert (g2!=null);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+assert (g2!=null);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+assert (g2!=null);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+assert (g2!=null);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+assert (g2!=null);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+assert (g2!=null);
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+assert (g2!=null);
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+assert (g2!=null);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
+assert (g2!=null);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+assert (g2!=null);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
 }
+if(dataArea.equals("655")){
+System.out.println();
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
+if(dataArea.equals("655")){
+System.out.println();
+}
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+}
+if(dataArea.equals("655")){
+System.out.println();
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
+if(dataArea.equals("655")){
+System.out.println();
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space.equals("655")){
+System.out.println();
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
+if(dataArea.equals("655")){
+System.out.println();
+}
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+}
+if(dataArea.equals("655")){
+System.out.println();
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
+if(dataArea.equals("655")){
+System.out.println();
+}
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(dataArea.equals("655")){
+System.out.println();
+}
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(!b1){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
+if(!foundData){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(!b2){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
-if(state==null){
+if(state==null||"查看红包".equals(state)){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(getRenderer()!=null||"查看红包".equals(getRenderer())){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+synchronized(this){
 getRenderer().drawBackground(g2,this,dataArea);
+}
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+this.axisOffset.trim(dataArea);
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+this.axisOffset.trim(dataArea);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
+this.axisOffset.trim(dataArea);
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+this.axisOffset.trim(dataArea);
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+this.axisOffset.trim(dataArea);
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+this.axisOffset.trim(dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+this.axisOffset.trim(dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+if(area.isEmpty()){
+area=null;
+}
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
+state=new PlotRenderingInfo(null);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
+state=new PlotRenderingInfo(null);
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+state=new PlotRenderingInfo(null);
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
+state=new PlotRenderingInfo(null);
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
+state=new PlotRenderingInfo(null);
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
+state=new PlotRenderingInfo(null);
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+state=new PlotRenderingInfo(null);
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
+state=new PlotRenderingInfo(null);
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
+state=new PlotRenderingInfo(null);
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
+state=new PlotRenderingInfo(null);
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+state=new PlotRenderingInfo(null);
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+state=new PlotRenderingInfo(null);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+state=new PlotRenderingInfo(null);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+state=new PlotRenderingInfo(null);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+state=new PlotRenderingInfo(null);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+state=new PlotRenderingInfo(null);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+state=new PlotRenderingInfo(null);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+state=new PlotRenderingInfo(null);
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+state=new PlotRenderingInfo(null);
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+state=new PlotRenderingInfo(null);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+this.axisOffset.trim(dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+this.axisOffset.trim(dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+this.axisOffset.trim(dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
+state=new PlotRenderingInfo(null);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
-state=new PlotRenderingInfo(null);
 }
+state=new PlotRenderingInfo(null);
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+if(g2.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(g2.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(area.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(parentState.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(state.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+if(dataArea.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+try{
 insets.trim(area);
+}finally{
+state=new PlotRenderingInfo(null);
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+try{
 g2.clip(dataArea);
+}finally{
+state=new PlotRenderingInfo(null);
+}
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+try{
 state.setPlotArea(area);
+}finally{
+state=new PlotRenderingInfo(null);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
+try{
 g2.setClip(savedClip);
+}finally{
+state=new PlotRenderingInfo(null);
+}
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
+try{
 g2.setComposite(originalComposite);
+}finally{
+state=new PlotRenderingInfo(null);
+}
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
+try{
 state.setDataArea(dataArea);
+}finally{
+state=new PlotRenderingInfo(null);
+}
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
+try{
 drawAnnotations(g2,dataArea);
+}finally{
+state=new PlotRenderingInfo(null);
+}
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
+try{
 drawDomainGridlines(g2,dataArea);
+}finally{
+state=new PlotRenderingInfo(null);
+}
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
-if(state==null){
+if(state==null||state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(getRenderer()!=null||getRenderer()==null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+assert (g2!=null):"Appointments day is not allowed to be null!";
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+assert (g2!=null):"Appointments day is not allowed to be null!";
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
+assert (g2!=null):"Appointments day is not allowed to be null!";
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
+assert (g2!=null):"Appointments day is not allowed to be null!";
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
+assert (g2!=null):"Appointments day is not allowed to be null!";
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
+assert (g2!=null):"Appointments day is not allowed to be null!";
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
+assert (g2!=null):"Appointments day is not allowed to be null!";
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+assert (g2!=null):"Appointments day is not allowed to be null!";
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
+assert (g2!=null):"Appointments day is not allowed to be null!";
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+assert (g2!=null):"Appointments day is not allowed to be null!";
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+if(area.isEmpty()){
+area=null;
+}
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+if(dataArea.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
+if(dataArea.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(getRenderer()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(area==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+getRenderer().drawBackground(g2,this,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+getRenderer().drawBackground(g2,this,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+getRenderer().drawBackground(g2,this,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+getRenderer().drawBackground(g2,this,dataArea);
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
+getRenderer().drawBackground(g2,this,dataArea);
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+if(!foundData){
+drawNoDataMessage(g2,dataArea);
+}
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
-if(!foundData){
-drawNoDataMessage(g2,dataArea);
-}
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+if(!foundData){
+drawNoDataMessage(g2,dataArea);
+}
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
-if(!foundData){
-drawNoDataMessage(g2,dataArea);
-}
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+}
+if(!foundData){
+drawNoDataMessage(g2,dataArea);
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
-if(!foundData){
-drawNoDataMessage(g2,dataArea);
-}
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+}
+if(!foundData){
+drawNoDataMessage(g2,dataArea);
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
-if(!foundData){
-drawNoDataMessage(g2,dataArea);
-}
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
-drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean haveBreadCrumbs=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
-if(isRangeCrosshairVisible()){
+if(isRangeCrosshairVisible()&&haveBreadCrumbs){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+getRenderer().drawBackground(g2,this,dataArea);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
+if(g2==null){
+return ;
+}
+if(state==null){
+return ;
+}
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
+if(g2==null){
+return ;
+}
+if(state==null){
+return ;
+}
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
+if(g2==null){
+return ;
+}
+if(state==null){
+return ;
+}
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
+if(g2==null){
+return ;
+}
+if(state==null){
+return ;
+}
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2==null){
+return ;
+}
+if(area==null){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2==null){
+return ;
+}
+if(parentState==null){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2==null){
+return ;
+}
+if(state==null){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2==null){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets==null){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+getRenderer().drawOutline(g2,this,dataArea);
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2.equals("CALL_RECEIVED_AT")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(g2.equals("NAME")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(area.equals("CALL_RECEIVED_AT")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(area.equals("NAME")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(parentState.equals("CALL_RECEIVED_AT")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(parentState.equals("NAME")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(state.equals("CALL_RECEIVED_AT")){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(state.equals("NAME")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(insets.equals("NAME")){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(space.equals("NAME")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(dataArea.equals("NAME")){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(axisStateMap.equals("NAME")){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+state=new PlotRenderingInfo(null);
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+state=new PlotRenderingInfo(null);
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
+state=new PlotRenderingInfo(null);
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+state=new PlotRenderingInfo(null);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+state=new PlotRenderingInfo(null);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+state=new PlotRenderingInfo(null);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+state=new PlotRenderingInfo(null);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
+state=new PlotRenderingInfo(null);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
+state=new PlotRenderingInfo(null);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+state=new PlotRenderingInfo(null);
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
+state=new PlotRenderingInfo(null);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
-if(state==null){
+if(state==null&&!state.equals("")){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
+if(getRenderer()!=null&&!getRenderer().equals("")){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+getRenderer().drawBackground(g2,this,dataArea);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+getRenderer().drawBackground(g2,this,dataArea);
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+getRenderer().drawBackground(g2,this,dataArea);
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+getRenderer().drawBackground(g2,this,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+getRenderer().drawBackground(g2,this,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5672/pattern-ver1-serial/core.src.com.overwatch2d.game.GameScreen.java-beginContact.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+if(g2.equals("INFO")){
+return ;
+}
+if(g2.equals("UNIT")){
+return ;
+}
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(g2.equals("INFO")){
+return ;
+}
+if(g2.equals("UNIT")){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(area.equals("INFO")){
+return ;
+}
+if(area.equals("UNIT")){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(parentState.equals("INFO")){
+return ;
+}
+if(parentState.equals("UNIT")){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(state.equals("INFO")){
+return ;
+}
+if(state.equals("UNIT")){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(insets.equals("INFO")){
+return ;
+}
+if(insets.equals("UNIT")){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space.equals("INFO")){
+return ;
+}
+if(space.equals("UNIT")){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea.equals("INFO")){
+return ;
+}
+if(dataArea.equals("UNIT")){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
-drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
-drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
+getRenderer().drawBackground(g2,this,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/4244/pattern-ver1-serial/servlet6.src.main.java.ru.kpfu.itis.servlets.PostServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/4244/pattern-ver1-serial/servlet6.src.main.java.ru.kpfu.itis.servlets.PostServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(g2!=null){
+axisStateMap.put("publicationId",g2);
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1201/pattern-ver1-serial/src.main.java.de.rwth.i9.palm.controller.ManageAcademicEventController.java-saveNewEventGroup.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
-g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(area!=null){
 insets.trim(area);
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(dataArea!=null){
 g2.clip(dataArea);
+}
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
+if(savedClip!=null){
 g2.setClip(savedClip);
+}
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
+if(originalComposite!=null){
 g2.setComposite(originalComposite);
+}
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
+if(dataArea!=null){
 state.setDataArea(dataArea);
+}
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/7166/pattern-ver1-serial/src.main.java.net.dandielo.core.items.dItem.java-addAttribute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
+if(state!=new PlotRenderingInfo(null)){
 drawAnnotations(g2,dataArea);
+}
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
+if(state!=new PlotRenderingInfo(null)){
 drawDomainGridlines(g2,dataArea);
+}
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(savedClip==null||insets==null){
+return ;
+}
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
+if(originalComposite==null||insets==null){
+return ;
+}
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
+if(order==null||insets==null){
+return ;
+}
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea==null||insets==null){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space==null||insets==null){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap==null||insets==null){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+if(rangeAxisState==null||insets==null){
+return ;
+}
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
 }
+if(dataArea==null||rangeAxisState==null){
+return ;
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
 }
+if(rangeAxisState==null||dataArea==null){
+return ;
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(state!=new PlotRenderingInfo(null)){
 insets.trim(area);
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(state!=new PlotRenderingInfo(null)){
 g2.clip(dataArea);
+}
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+if(state!=new PlotRenderingInfo(null)){
 state.setPlotArea(area);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
+if(state!=new PlotRenderingInfo(null)){
 g2.setClip(savedClip);
+}
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
+if(state!=new PlotRenderingInfo(null)){
 g2.setComposite(originalComposite);
+}
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
+if(state!=new PlotRenderingInfo(null)){
 state.setDataArea(dataArea);
+}
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space==null){
+throw new IllegalStateException("User isn't registered! "+g2);
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(space==null){
+throw new IllegalStateException("User isn't registered! "+area);
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(dataArea==null){
+throw new IllegalStateException("User isn't registered! "+area);
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(savedClip==null){
+throw new IllegalStateException("User isn't registered! "+g2);
+}
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
+if(originalComposite==null){
+throw new IllegalStateException("User isn't registered! "+g2);
+}
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap==null){
+throw new IllegalStateException("User isn't registered! "+g2);
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap==null){
+throw new IllegalStateException("User isn't registered! "+area);
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(axisStateMap==null){
+throw new IllegalStateException("User isn't registered! "+state);
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
+if(getRenderer()!=null){
 drawAnnotations(g2,dataArea);
+}
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if((b1)||(b2)){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
-foundData=render(g2,dataArea,i,state)||foundData;
+foundData=(render(g2,dataArea,i,state))||(foundData);
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
+if((b1)||(b2)){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
-foundData=render(g2,dataArea,i,state)||foundData;
+foundData=(render(g2,dataArea,i,state))||(foundData);
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+axisStateMap.put("Name","Default");
+axisStateMap.put("uri","Default");
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6534/pattern-ver1-serial/app.src.main.java.com.arish.trend.MainActivity.java-signupParse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
-rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
+rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
 drawBackground(g2,dataArea);
+}else {
+getRenderer().drawBackground(g2,this,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+axisStateMap.put("prices.blacksmith.toolrepair.econplugin.misc","0.50");
+axisStateMap.put("prices.blacksmith.toolrepair.item.misc","2");
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1850/pattern-ver1-serial/src.com.citizens.Defaults.java-writeEconomySettings.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
+drawBackground(g2,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean succeeded=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+succeeded=true;
+}
+if(!succeeded){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean succeeded=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(!succeeded){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
+succeeded=true;
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean succeeded=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(!succeeded){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+succeeded=true;
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean succeeded=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(!succeeded){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+succeeded=true;
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean succeeded=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(!succeeded){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+succeeded=true;
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean succeeded=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(!succeeded){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+succeeded=true;
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean succeeded=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(!succeeded){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
+succeeded=true;
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean succeeded=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(!succeeded){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+succeeded=true;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean succeeded=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+}
+if(!succeeded){
+return ;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+succeeded=true;
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
-drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean haveBreadCrumbs=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
+haveBreadCrumbs=true;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
-if(isRangeCrosshairVisible()){
+if(isRangeCrosshairVisible()&&haveBreadCrumbs){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean haveBreadCrumbs=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+haveBreadCrumbs=true;
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
-if(isRangeCrosshairVisible()){
+if(isRangeCrosshairVisible()&&haveBreadCrumbs){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean haveBreadCrumbs=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+haveBreadCrumbs=true;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
-if(isRangeCrosshairVisible()){
+if(isRangeCrosshairVisible()&&haveBreadCrumbs){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean haveBreadCrumbs=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+haveBreadCrumbs=true;
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
-if(isRangeCrosshairVisible()){
+if(isRangeCrosshairVisible()&&haveBreadCrumbs){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean haveBreadCrumbs=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
-if(isRangeCrosshairVisible()){
+if(isRangeCrosshairVisible()&&haveBreadCrumbs){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
+haveBreadCrumbs=true;
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean haveBreadCrumbs=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
+haveBreadCrumbs=true;
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
-if(isRangeCrosshairVisible()){
+if(isRangeCrosshairVisible()&&haveBreadCrumbs){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean haveBreadCrumbs=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
+haveBreadCrumbs=true;
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
-if(isRangeCrosshairVisible()){
+if(isRangeCrosshairVisible()&&haveBreadCrumbs){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
+boolean haveBreadCrumbs=false;
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
-if(isRangeCrosshairVisible()){
+if(isRangeCrosshairVisible()&&haveBreadCrumbs){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
+haveBreadCrumbs=true;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
+if(area==null||g2==null){
+throw new NullPointerException();
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
+if(g2==null||area==null){
+throw new NullPointerException();
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(area==null||g2==null){
+throw new NullPointerException();
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(g2==null||area==null){
+throw new NullPointerException();
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(g2==null||state==null){
+throw new NullPointerException();
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(area==null||state==null){
+throw new NullPointerException();
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(state==null||g2==null){
+throw new NullPointerException();
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
+}
+if(state==null||area==null){
+throw new NullPointerException();
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(g2==null||dataArea==null){
+throw new NullPointerException();
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(dataArea==null||g2==null){
+throw new NullPointerException();
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+if(isRangeCrosshairVisible()){
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
-}
-if(isRangeCrosshairVisible()){
-drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
+if(getRenderer()!=null){
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
-if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+if(isRangeCrosshairVisible()){
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
-}
-if(isRangeCrosshairVisible()){
-drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
+if(isRangeCrosshairVisible()){
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
-}
-if(isRangeCrosshairVisible()){
-drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
+if(isRangeCrosshairVisible()){
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
-}
-if(isRangeCrosshairVisible()){
-drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+if(isRangeCrosshairVisible()){
+drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+}
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
-}
-if(isRangeCrosshairVisible()){
-drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
+foundData=render(g2,dataArea,i,state)||foundData;
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
+if(area!=null){
 drawAnnotations(g2,dataArea);
+}
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
+if(area!=null){
 drawDomainGridlines(g2,dataArea);
+}
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(area!=null){
 insets.trim(area);
+}
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
-state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
+if(area!=null){
 g2.clip(dataArea);
+}
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+if(state!=null){
 state.setPlotArea(area);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
-drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7225/pattern-ver1-serial/app.src.main.java.org.votingsystem.activity.SMIMESignerActivity.java-setMenu.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
+if(state!=null){
 state.setPlotArea(area);
+}
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
-drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7225/pattern-ver1-serial/app.src.main.java.org.votingsystem.activity.SMIMESignerActivity.java-setMenu.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
-drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
+drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
-drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
+drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
-drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
+drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
-drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
+drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2==null||parentState==null||area==null){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2==null||area==null||parentState==null){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+if(g2==null||area==null||state==null){
+return ;
+}
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
+if(g2==null||area==null||insets==null){
+return ;
+}
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
+if(g2==null||area==null||space==null){
+return ;
+}
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
+if(g2==null||area==null||dataArea==null){
+return ;
+}
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+if(g2==null||area==null||rangeAxisState==null){
+return ;
+}
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
+if(g2==null||area==null||axisStateMap==null){
+return ;
+}
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
-drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
-drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
-drawBackground(g2,dataArea);
-}
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
+}
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
-drawBackground(g2,dataArea);
-}
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
+if(getRenderer()!=null){
 if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
+}
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
-drawBackground(g2,dataArea);
-}
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
+}
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
-drawBackground(g2,dataArea);
-}
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
+}
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
-drawBackground(g2,dataArea);
-}
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
+}
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
-drawBackground(g2,dataArea);
-}
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
+}
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
-drawBackground(g2,dataArea);
-}
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+}
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
-drawBackground(g2,dataArea);
-}
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
+}
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
-if(getRenderer()!=null){
-getRenderer().drawBackground(g2,this,dataArea);
-}else {
-drawBackground(g2,dataArea);
-}
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
+if(getRenderer()!=null){
+getRenderer().drawBackground(g2,this,dataArea);
+}else {
+drawBackground(g2,dataArea);
+}
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
+long startTime=System.currentTimeMillis();
 state=new PlotRenderingInfo(null);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
+long startTime=System.currentTimeMillis();
 getRenderer().drawBackground(g2,this,dataArea);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
+long startTime=System.currentTimeMillis();
 drawBackground(g2,dataArea);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
+long startTime=System.currentTimeMillis();
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
+if(rangeAxisState!=null){
+drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
-if(rangeAxisState!=null){
-drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
-g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5773/pattern-ver1-serial/jremoting-core.src.main.java.com.github.jremoting.protocal.JRemotingProtocal.java-encode.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 8, INS : 0, DEL : 6
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
-if(b1||b2){
-return ;
-}
-if(state==null){
-state=new PlotRenderingInfo(null);
-}
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
 this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
-if(!foundData){
-drawNoDataMessage(g2,dataArea);
-}
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 4, INS : 0, DEL : 15
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2912/pattern-ver1-serial/Source.ch.zhaw.necarex.src.model.pieces.Pawn.java-getPossibleFields.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 15, INS : 0, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
 drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
-drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2912/pattern-ver1-serial/Source.ch.zhaw.necarex.src.model.pieces.Pawn.java-getPossibleFields.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 15, INS : 0, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/chart/chart_26_buggy/source/org/jfree/chart/plot/CategoryPlot.java[2514,2651]
------------Candidate---------------
 public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){
 boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
 boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
 if(b1||b2){
 return ;
 }
 if(state==null){
 state=new PlotRenderingInfo(null);
 }
 state.setPlotArea(area);
 RectangleInsets insets=getInsets();
 insets.trim(area);
 AxisSpace space=calculateAxisSpace(g2,area);
 Rectangle2D dataArea=space.shrink(area,null);
-this.axisOffset.trim(dataArea);
 state.setDataArea(dataArea);
 if(getRenderer()!=null){
 getRenderer().drawBackground(g2,this,dataArea);
 }else {
 drawBackground(g2,dataArea);
 }
 Map axisStateMap=drawAxes(g2,area,dataArea,state);
 Shape savedClip=g2.getClip();
 g2.clip(dataArea);
-drawDomainGridlines(g2,dataArea);
 AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());
 if(rangeAxisState==null){
 if(parentState!=null){
 rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
 }
 }
 if(rangeAxisState!=null){
 drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);
 }
 boolean foundData=false;
 Composite originalComposite=g2.getComposite();
 g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
 DatasetRenderingOrder order=getDatasetRenderingOrder();
 if(order==DatasetRenderingOrder.FORWARD){
 for(int i=0;i<this.datasets.size();i++){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }else {
 for(int i=this.datasets.size()-1;i>=0;i--){
 foundData=render(g2,dataArea,i,state)||foundData;
 }
 }
 for(int i=0;i<this.renderers.size();i++){
 drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 for(int i=0;i<this.renderers.size();i++){
 drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);
 }
 drawAnnotations(g2,dataArea);
 g2.setClip(savedClip);
 g2.setComposite(originalComposite);
 if(!foundData){
 drawNoDataMessage(g2,dataArea);
 }
 if(isRangeCrosshairVisible()){
 drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
 }
 if(getRenderer()!=null){
 getRenderer().drawOutline(g2,this,dataArea);
 }else {
 drawOutline(g2,dataArea);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2912/pattern-ver1-serial/Source.ch.zhaw.necarex.src.model.pieces.Pawn.java-getPossibleFields.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 15, INS : 0, DEL : 7
Failing Tests:[org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo, org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo, org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2, org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3, org.jfree.chart.plot.junit.CategoryPlotTests::test1654215, org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo, org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo]
---------START : 2019.09.05 AD at 20:33:55 CDT
---------TIME : 2019.09.05 AD at 23:48:09 CDT
--------------- END -----------------
Current failed test : org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2 | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2
Current failed test : org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.plot.junit.CategoryPlotTests::test1654215 | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.plot.junit.CategoryPlotTests::test1654215
Current failed test : org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3 | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3
Current failed test : org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4 | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4
Current failed test : org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo
Current failed test : org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo | 2019.09.05 AD at 23:48:09 CDT
Already fixed : org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo
Finish : chart-26 > patch : 10 | Start : Thu Sep 05 20:33:55 CDT 2019 | End : 2019.09.05 AD at 23:48:09 CDT
