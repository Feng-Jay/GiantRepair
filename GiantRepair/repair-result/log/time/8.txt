Repair : time_8
Current failed test : org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int | 2019.09.04 AD at 19:17:11 CDT
Location : org.joda.time.DateTimeZone.forOffsetHoursMinutes:[280, 274, 288, 273, 276, 279, 282, 284, 285, 290, 293, 294]#1.0
Compute Candidate : 2019.09.04 AD at 19:18:44 CDT - 2019.09.04 AD at 19:49:27 CDT , PNumber : 11346, CandNumber : 349 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
-int offset=0;
+ int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
-int hoursInMinutes=hoursOffset*60;
+ int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23||hoursOffset>1){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:49:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0||minutesOffset>1){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23||hoursOffset>=23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:49:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0||minutesOffset>=59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:50:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+return null;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+return null;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(minutesOffset<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:50:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(minutesOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(offset<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:50:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursOffset<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
-return DateTimeZone.UTC;
+return null;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<=-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:50:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<=0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<=0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23&&hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:51:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0&&minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset>0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:51:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes>0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset>-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:51:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=hoursOffset-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:51:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=minutesOffset-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:51:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=offset-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset<=0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&minutesOffset<=0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes-minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+throw new IllegalArgumentException("Minutes out of range: "+hoursOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+offset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+hoursInMinutes;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(minutesOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&hoursOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+hoursOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:52:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
+throw new IllegalArgumentException("Hours out of range: "+minutesOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23||hoursOffset<23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0||minutesOffset<59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:53:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset>=0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:53:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&minutesOffset>=0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23||hoursOffset!=23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0||minutesOffset!=59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:53:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset!=0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:53:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&minutesOffset!=0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:53:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
-int offset=0;
+Integer offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
-int hoursInMinutes=hoursOffset*60;
+Integer hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:54:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset>0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:54:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&minutesOffset>0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:54:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=hoursInMinutes-offset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:54:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=hoursInMinutes-hoursInMinutes;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:54:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=hoursInMinutes-hoursOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursOffset+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:54:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=minutesOffset+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:54:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=offset+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:55:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+throw new IllegalStateException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/6680/pattern-ver1-serial/src.rollup.RollupSeq.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
-int hoursInMinutes=hoursOffset*60;
+int hoursInMinutes=minutesOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
-int hoursInMinutes=hoursOffset*60;
+int hoursInMinutes=offset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:55:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:55:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
-int offset=0;
+ int offset=0;
 try{
-int hoursInMinutes=hoursOffset*60;
+ int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:55:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
-return forOffsetMillis(offset);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:55:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+offset++;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+hoursInMinutes++;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+hoursInMinutes++;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:56:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+hoursInMinutes++;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset++;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:56:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset++;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:56:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+hoursOffset++;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+hoursOffset++;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:56:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+offset++;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+offset++;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:56:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+offset++;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+offset--;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:57:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+hoursInMinutes--;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:57:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+hoursInMinutes--;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+hoursInMinutes--;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset--;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset--;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
+hoursOffset--;
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<=-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<=0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:57:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<=0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<=0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:57:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<=-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<=0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:58:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+offset--;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+offset--;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:58:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+offset--;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:58:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
-return forOffsetMillis(offset);
+return (DateTimeZone)forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:58:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
-return forOffsetMillis(offset);
+return forOffsetMillis((int)(offset));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23||hoursOffset>=23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0||minutesOffset>=59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<1||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<1){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:58:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+throw new IllegalArgumentException("Minutes out of range: "+(int)(minutesOffset));
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+(int)(minutesOffset);
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+hoursOffset++;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
-return DateTimeZone.UTC;
+return (DateTimeZone)(DateTimeZone.UTC);
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:59:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
-return forOffsetMillis(offset);
+return (DateTimeZone)(forOffsetMillis(offset));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:59:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset<0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:59:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&minutesOffset<0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:59:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+while(true){
+
+}
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 19:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+while(true){
+
+}
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<=-23||hoursOffset>=23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<=0||minutesOffset>=59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=1;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=-1;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+if(hoursInMinutes+minutesOffset!=0){
 minutesOffset=hoursInMinutes+minutesOffset;
+}
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
+if(FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE)!=0){
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+}
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:02:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+if(hoursInMinutes-minutesOffset!=0){
 minutesOffset=hoursInMinutes-minutesOffset;
+}
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=0;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(minutesOffset,30-(DateTimeConstants.MILLIS_PER_MINUTE));
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(30-(minutesOffset),DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:02:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+1+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:02:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
+minutesOffset=minutesOffset;
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
+hoursOffset=hoursOffset;
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset+hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset+minutesOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&minutesOffset+hoursOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&minutesOffset+minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+hoursInMinutes=1000;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+offset=1000;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:03:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(true){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:03:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+minutesOffset*hoursOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:03:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+minutesOffset*minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:04:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+minutesOffset*offset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:04:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+minutesOffset*hoursInMinutes;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:04:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=hoursInMinutes-minutesOffset*hoursOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:04:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=hoursInMinutes-minutesOffset*minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=offset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:04:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=hoursOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:04:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23||hoursOffset>23/2){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:04:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0||minutesOffset>59/2){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:05:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
+int a=0;
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
+int a=0;
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:05:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
+int a=0;
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:05:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+int a=0;
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+int a=0;
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+int a=0;
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:05:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=2;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
+String OUTSTRING="";
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
+String OUTSTRING="";
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:06:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+String OUTSTRING="";
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
+String OUTSTRING="";
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+String OUTSTRING="";
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+String OUTSTRING="";
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
+int DateTimeZone=5;
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
+int UTC=5;
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:06:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
+int hoursInMinutes=5;
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(minutesOffset,Math.round(DateTimeConstants.MILLIS_PER_MINUTE));
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(Math.round(minutesOffset),DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(Double.isNaN(hoursInMinutes)){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:07:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
-return forOffsetMillis(offset);
+return forOffsetMillis(Math.abs(offset));
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:07:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=offset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
+int indexSelection=0;
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+int indexSelection=0;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+int indexSelection=0;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(Math.max(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE),DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(minutesOffset,Math.max(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE));
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=minutesOffset+hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=minutesOffset+hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if("Chrome".equals(minutesOffset)||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
+int a=1;
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
+int a=1;
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
+int a=1;
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+int a=1;
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:08:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+int a=1;
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+int a=1;
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+String UTC="%#.&f";
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:09:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
+String UTC="%#.&f";
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
+boolean b=true;
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:09:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
+boolean b=true;
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
+boolean b=true;
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+boolean b=true;
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+boolean b=true;
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+boolean b=true;
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=1;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=-1;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
+}
+if("&null".equals(hoursOffset)){
+return null;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:10:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
+}
+if("&null".equals(minutesOffset)){
+return null;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+if("&null".equals(minutesOffset)){
+return null;
+}
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+if("&null".equals(minutesOffset)){
+return null;
+}
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+if("&null".equals(hoursOffset)){
+return null;
+}
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+if("&null".equals(minutesOffset)){
+return null;
+}
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+if("&null".equals(offset)){
+return null;
+}
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=0;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE)*hoursOffset;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE)*minutesOffset;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0){
+return null;
+}
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
+}
+if(minutesOffset<0){
+return null;
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+if(minutesOffset<0){
+return null;
+}
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+if(minutesOffset<0){
+return null;
+}
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=hoursOffset;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0||hoursInMinutes==Long.MIN_VALUE){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=0xEfffffff&(FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE));
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:11:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=2;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+throw new UnsupportedOperationException();
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:12:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+if(minutesOffset==0){
+return null;
+}
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+}
+if(minutesOffset==0){
+return null;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:12:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
+}
+if(minutesOffset==0){
+return null;
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:12:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+if(offset==0){
+return null;
+}
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:12:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
+}
+if(offset==0){
+return null;
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+if(minutesOffset==0){
+return null;
+}
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:12:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<-1||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<-1){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2863/pattern-ver1-serial/app.src.main.java.alex.com.box2ddemo.gift2dview.Box2dSenserLogic.java-onSensorChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:13:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+assert (offset!=0);
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:13:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+assert (hoursInMinutes!=hoursOffset*60);
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:13:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=offset+FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=offset;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1577/pattern-ver1-serial/src.main.java.models.RenameFiles.java-replaceWeirdChar.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=hoursInMinutes;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1577/pattern-ver1-serial/src.main.java.models.RenameFiles.java-replaceWeirdChar.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:13:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if("Chrome".equals(hoursOffset)||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE)+1;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:13:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0||"查看红包".equals(hoursInMinutes)){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:13:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0||hoursInMinutes==3){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
+}
+if(minutesOffset>7){
+throw new IllegalArgumentException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+if(minutesOffset>7){
+throw new IllegalArgumentException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+if(hoursOffset>7){
+throw new IllegalArgumentException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+if(minutesOffset>7){
+throw new IllegalArgumentException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0||hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=(hoursInMinutes+minutesOffset+minutesOffset)%minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=(hoursInMinutes-minutesOffset+minutesOffset)%minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=(FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE)+minutesOffset)%minutesOffset;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&hoursOffset>=0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if((hoursOffset==0||hoursOffset=='\'')&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:15:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0||hoursInMinutes==0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:15:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0||hoursInMinutes>9){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:15:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+throw new IllegalArgumentException("Minutes out of range: "+minutesOffset+" -u "+hoursOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:15:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+throw new IllegalArgumentException("Minutes out of range: "+minutesOffset+" -u "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:15:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
+throw new IllegalArgumentException("Hours out of range: "+hoursOffset+" -u "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
+throw new IllegalArgumentException("Hours out of range: "+hoursOffset+" -u "+minutesOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0&&hoursInMinutes<4000000){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0&&hoursInMinutes!=9999){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(0>0&&hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
+assert (hoursOffset>=0):"Receive a negative tratment";
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
+assert (minutesOffset>=0):"Receive a negative tratment";
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+assert (minutesOffset>=0):"Receive a negative tratment";
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+assert (minutesOffset>=0):"Receive a negative tratment";
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
+assert (hoursOffset>=0):"Receive a negative tratment";
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
+assert (minutesOffset>=0):"Receive a negative tratment";
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:16:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+assert (hoursOffset>=0):"Receive a negative tratment";
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+assert (minutesOffset>=0):"Receive a negative tratment";
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+assert (hoursInMinutes>=0):"Receive a negative tratment";
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+assert (hoursInMinutes>=0):"Receive a negative tratment";
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=-1;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
+minutesOffset++;
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=-1;
 }
+minutesOffset++;
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=-1;
+minutesOffset++;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset++;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=-1;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
+assert (hoursOffset!=0):"Receive a size tratment";
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
+assert (minutesOffset!=0):"Receive a size tratment";
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+assert (minutesOffset!=0):"Receive a size tratment";
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+assert (minutesOffset!=0):"Receive a size tratment";
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
+assert (hoursOffset!=0):"Receive a size tratment";
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
+assert (minutesOffset!=0):"Receive a size tratment";
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+assert (hoursOffset!=0):"Receive a size tratment";
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+assert (minutesOffset!=0):"Receive a size tratment";
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+assert (hoursInMinutes!=0):"Receive a size tratment";
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:18:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+assert (hoursInMinutes!=0):"Receive a size tratment";
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+minutesOffset=hoursInMinutes+minutesOffset;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+minutesOffset=hoursInMinutes-minutesOffset;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+minutesOffset=hoursInMinutes+minutesOffset;
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+if(minutesOffset<0){
+minutesOffset=0;
+}
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+}
+if(minutesOffset<0){
+minutesOffset=0;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+if(offset<0){
+offset=0;
+}
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
+}
+if(minutesOffset<0){
+minutesOffset=0;
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
+}
+if(offset<0){
+offset=0;
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+if(minutesOffset<0){
+minutesOffset=0;
+}
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:19:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
 }
+minutesOffset=hoursInMinutes+minutesOffset;
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
+minutesOffset=hoursInMinutes-minutesOffset;
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
+}
+if(offset<=0){
+offset=1;
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+if(hoursInMinutes<=0){
+hoursInMinutes=1;
+}
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+minutesOffset=hoursInMinutes+minutesOffset;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+if(hoursInMinutes<0){
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
+boolean haveBreadCrumbs=false;
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0&&haveBreadCrumbs){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+int hoursInMinutes=hoursOffset*60;
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
-int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+ final String dropStatement="Minutes out of range: "+minutesOffset;
+throw new IllegalArgumentException(dropStatement);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+ final String dropStatement="Minutes out of range: "+minutesOffset;
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+throw new IllegalArgumentException(dropStatement);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
+ final String dropStatement="Hours out of range: "+hoursOffset;
+throw new IllegalArgumentException(dropStatement);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+ final String dropStatement="Hours out of range: "+hoursOffset;
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
+throw new IllegalArgumentException(dropStatement);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:21:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=hoursInMinutes-minutesOffset*2;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+minutesOffset*2;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
+try{
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+}finally{
+minutesOffset=hoursInMinutes+minutesOffset;
+}
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
+try{
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+}finally{
+minutesOffset=hoursInMinutes-minutesOffset;
+}
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+minutesOffset=hoursInMinutes-minutesOffset;
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:21:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
-try{
 int hoursInMinutes=hoursOffset*60;
+try{
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1365/pattern-ver1-serial/src.main.java.nl.tue.win.vcp.virtualbreitenbergenvironment.model.Environment.java-draw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+String loc="Minutes out of range: "+minutesOffset;
+throw new IllegalArgumentException(loc);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+String loc="Minutes out of range: "+minutesOffset;
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+throw new IllegalArgumentException(loc);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
+String loc="Hours out of range: "+hoursOffset;
+throw new IllegalArgumentException(loc);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+String loc="Hours out of range: "+hoursOffset;
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
+throw new IllegalArgumentException(loc);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23||hoursOffset>23-1){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0||minutesOffset>59-1){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&minutesOffset==0||"查看红包".equals(hoursOffset==0)){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0||minutesOffset>59||"查看红包".equals(minutesOffset<0)){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0&&minutesOffset==0||minutesOffset=='%'){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0||minutesOffset>59||minutesOffset=='%'){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset<0L||(hoursOffset==0&&minutesOffset==0)){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0L||(minutesOffset<0||minutesOffset>59)){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
-}
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+}
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:23:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(true){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(true){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
-minutesOffset=hoursInMinutes+minutesOffset;
+minutesOffset=hoursInMinutes+minutesOffset*2;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE)*2;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
+minutesOffset=hoursInMinutes-minutesOffset*2;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE)*2;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if(hoursOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5898/pattern-ver1-serial/eSecureBox.src.main.java.com.volcano.esecurebox.widget.FieldCell.java-setListAction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if(minutesOffset<0){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
+offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23||hoursOffset>23||"查看红包".equals(hoursOffset<-23)){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23||hoursOffset>23||hoursOffset=='%'){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:25:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<0L||(hoursOffset<-23||hoursOffset>23)){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:25:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
+if(minutesOffset!=hoursInMinutes+minutesOffset){
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+}
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
+if(minutesOffset!=hoursInMinutes-minutesOffset){
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+}
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:25:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(true){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:25:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
-if(hoursOffset<-23||hoursOffset>23){
+if(hoursOffset<-23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
-return DateTimeZone.UTC;
-}
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+}
+if(hoursOffset==0&&minutesOffset==0){
+return DateTimeZone.UTC;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
-return DateTimeZone.UTC;
-}
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+if(hoursOffset==0&&minutesOffset==0){
+return DateTimeZone.UTC;
+}
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
-return DateTimeZone.UTC;
-}
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+if(hoursOffset==0&&minutesOffset==0){
+return DateTimeZone.UTC;
+}
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
+boolean haveBreadCrumbs=false;
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0&&haveBreadCrumbs){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
+haveBreadCrumbs=true;
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
+boolean haveBreadCrumbs=false;
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
+if(hoursInMinutes<0&&haveBreadCrumbs){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+haveBreadCrumbs=true;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
+boolean succeeded=false;
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+if(!succeeded){
+return null;
+}
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+succeeded=true;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
+boolean succeeded=false;
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+if(!succeeded){
+return null;
+}
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+succeeded=true;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
+boolean succeeded=false;
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
+if(!succeeded){
+return null;
+}
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
+succeeded=true;
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+if(hoursOffset==3){
+System.out.println("debug");
+}
 minutesOffset=hoursInMinutes-minutesOffset;
+if(hoursOffset==3){
+System.out.println("debug");
+}
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+if(minutesOffset==3){
+System.out.println("debug");
+}
 minutesOffset=hoursInMinutes-minutesOffset;
+if(minutesOffset==3){
+System.out.println("debug");
+}
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
-}else {
 minutesOffset=hoursInMinutes+minutesOffset;
+}else {
+minutesOffset=hoursInMinutes-minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
+if((hoursOffset==0)&&(minutesOffset==0)){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
-if(minutesOffset<0||minutesOffset>59){
+if((minutesOffset<0)||(minutesOffset>59)){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
-}
-if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
+if(minutesOffset<0||minutesOffset>59){
+throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+}
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:26:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
-}
-if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+if(minutesOffset<0||minutesOffset>59){
+throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
+}
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:27:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
-}
-if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+}
+if(minutesOffset<0||minutesOffset>59){
+throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
-if(hoursInMinutes<0){
-minutesOffset=hoursInMinutes-minutesOffset;
-}else {
-minutesOffset=hoursInMinutes+minutesOffset;
-}
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 0, DEL : 13
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:27:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
+long startTime=System.currentTimeMillis();
 minutesOffset=hoursInMinutes-minutesOffset;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:27:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+long startTime=System.currentTimeMillis();
 minutesOffset=hoursInMinutes+minutesOffset;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:27:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
+long startTime=System.currentTimeMillis();
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
-}
-if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+}
+if(hoursOffset<-23||hoursOffset>23){
+throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:27:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+if(hoursInMinutes<0){
+minutesOffset=hoursInMinutes-minutesOffset;
+}else {
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
+minutesOffset=hoursInMinutes+minutesOffset;
+}
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+if(hoursInMinutes<0){
+minutesOffset=hoursInMinutes-minutesOffset;
+}else {
+minutesOffset=hoursInMinutes+minutesOffset;
+}
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:27:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
+if(hoursInMinutes<0){
+minutesOffset=hoursInMinutes-minutesOffset;
+}else {
+minutesOffset=hoursInMinutes+minutesOffset;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
+}
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
 }
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
 }
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
-offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 8, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
-return DateTimeZone.UTC;
-}
 if(hoursOffset<-23||hoursOffset>23){
 throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
-}
-if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 37, UPD : 5, INS : 0, DEL : 32
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:28:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
-if(hoursOffset==0&&minutesOffset==0){
-return DateTimeZone.UTC;
-}
-if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
-}
 if(minutesOffset<0||minutesOffset>59){
 throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 38, UPD : 5, INS : 0, DEL : 33
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[241,295]
------------Candidate---------------
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset,int minutesOffset) throws IllegalArgumentException{
 if(hoursOffset==0&&minutesOffset==0){
 return DateTimeZone.UTC;
-}
-if(hoursOffset<-23||hoursOffset>23){
-throw new IllegalArgumentException("Hours out of range: "+hoursOffset);
-}
-if(minutesOffset<0||minutesOffset>59){
-throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
 }
 int offset=0;
 try{
 int hoursInMinutes=hoursOffset*60;
 if(hoursInMinutes<0){
 minutesOffset=hoursInMinutes-minutesOffset;
 }else {
 minutesOffset=hoursInMinutes+minutesOffset;
 }
 offset=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
 }catch(ArithmeticException ex){
 throw new IllegalArgumentException("Offset is too large");
 }
 return forOffsetMillis(offset);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 41, UPD : 5, INS : 0, DEL : 36
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:28:24 CDT
--------------- END -----------------
Location : org.joda.time.DateTimeZone.forID:[218, 216, 217, 220, 221, 215, 211, 212, 205, 208]#0.7071067811865475
Compute Candidate : 2019.09.04 AD at 20:28:44 CDT - 2019.09.04 AD at 20:54:03 CDT , PNumber : 11386, CandNumber : 293 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
+ int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:54:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
-DateTimeZone zone=cProvider.getZone(id);
+ DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:54:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")&&id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:54:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
+if(zone==null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:54:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id!=null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:54:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
-return DateTimeZone.UTC;
+return null;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:54:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+id=printOffset(offset);
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equalsIgnoreCase("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:54:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset==0){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4207/pattern-ver1-serial/app.src.main.java.pl.pnoga.weatheralert.app.dao.OptionsDAO.java-saveRefreshInterval.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:54:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+",0)||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.startsWith("-",0)){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
+id=zone.printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
-return fixedOffsetZone(id,offset);
+return zone.fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
+int offset=zone.parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset<=0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
-return zone;
+return null;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V8/1194/pattern-ver1-serial/src.backend.rest.SaveUserCompetences.java-saveUserCompetences.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException("The datetime zone id '"+zone+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException("The datetime zone id '"+id+id);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException("The datetime zone id '"+id+zone);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset>=0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset!=0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
+Integer offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset>0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.startsWith("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/797/pattern-ver1-serial/src.main.java.com.github.games647.scoreboardstats.scoreboard.VariableReplacer.java-getFactionsValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.contains("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.contains("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.contains("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/1219/pattern-ver1-serial/src.lisong_mechlab.view.render.StyleManager.java-getBgColorFor.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+",2)||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.startsWith("-",2)){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
-return DateTimeZone.UTC;
+return zone;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:57:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
+if(id!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:57:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
-DateTimeZone zone=cProvider.getZone(id);
+ final DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
+ final int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
-DateTimeZone zone=cProvider.getZone(id);
+ DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
+ int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
+int offset=parseOffset(id.trim());
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:57:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+".trim())||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:57:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.startsWith("-".trim())){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:57:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
-DateTimeZone zone=cProvider.getZone(id);
+DateTimeZone zone=cProvider.getZone(id.trim());
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:57:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals("UTC".trim())){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:57:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+offset++;
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:58:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+offset++;
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+offset--;
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:58:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
-return DateTimeZone.UTC;
+return null;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V63/2730/pattern-ver1-serial/src.zen.codegen.jvm.JavaSolution.java-GetConstValue.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+offset--;
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:58:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
+id=id;
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
+id=printOffset((int)(offset));
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:58:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
+id="";
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
+id=null;
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
+int offset=parseOffset((id).toLowerCase());
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith(("+").toLowerCase())||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.startsWith(("-").toLowerCase())){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
-DateTimeZone zone=cProvider.getZone(id);
+DateTimeZone zone=cProvider.getZone((id).toLowerCase());
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals(("UTC").toLowerCase())){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
-return getDefault();
+return DateTimeZone.UTC;
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
-return DateTimeZone.UTC;
+return getDefault();
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
+id=zone.printOffset(offset);
+return zone.fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V20/208/pattern-ver1-serial/src.main.java.eu.musesproject.server.dataminer.DataMiner.java-dataClassification.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.trim().equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/2546/pattern-ver1-serial/src.com.nth.ikiam.MapActivity.java-verFotosUsuario.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
-return DateTimeZone.UTC;
+return (DateTimeZone)(DateTimeZone.UTC);
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset<0){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 20:59:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException("The datetime zone id '"+id.toString()+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V3/7313/pattern-ver1-serial/Core.astra.interpreter.src.astra.reasoner.util.ContentCodec.java-test_predicate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:00:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
+int offset=parseOffset((id).toUpperCase());
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:00:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith(("+").toUpperCase())||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:00:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.startsWith(("-").toUpperCase())){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:00:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals(("UTC").toUpperCase())){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
-DateTimeZone zone=cProvider.getZone(id);
+DateTimeZone zone=cProvider.getZone((id).toUpperCase());
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
-return fixedOffsetZone(id,offset);
+return null;
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:00:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id.equals(null)){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
+if(zone.equals(null)){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:00:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(!id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
-return fixedOffsetZone(id,offset);
+return fixedOffsetZone(id,30-(offset));
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id.isEmpty()){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
+if(id!=null){
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+id=id;
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+offset=offset;
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset+offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.isEmpty()){
+return null;
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id.isEmpty()){
+return null;
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
+if(id!=null){
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
+}
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+offset=1000;
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(true){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
+if(true){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(true){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(true){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals("UTC")==false){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||!id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+if(id==null){
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
+if("UTC"!=null){
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
+}
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
-return fixedOffsetZone(id,offset);
+return (DateTimeZone)fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
+int a=0;
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:03:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+int a=0;
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
+int a=0;
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+int a=0;
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
+int a=0;
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:03:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
+int a=0;
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:03:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+int a=0;
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException(id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:03:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException(zone+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:03:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if("UTC"!=null){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+String OUTSTRING="";
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
+String OUTSTRING="";
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+String OUTSTRING="";
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+String OUTSTRING="";
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
+String OUTSTRING="";
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
+String OUTSTRING="";
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
+String OUTSTRING="";
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+if(id.isEmpty()){
+return null;
+}
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+if(id.isEmpty()){
+return null;
+}
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:04:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
-return fixedOffsetZone(id,offset);
+return fixedOffsetZone(id,Math.round(offset));
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(Double.isNaN(offset)){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals("UTC")==true){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id.equalsIgnoreCase(null)){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:05:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
+id=printOffset(Math.abs(offset));
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+int indexSelection=0;
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
-return fixedOffsetZone(id,offset);
+return (DateTimeZone)(fixedOffsetZone(id,offset));
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
+}
+if("+".isEmpty()){
+return null;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:05:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
-return fixedOffsetZone(id,offset);
+return zone;
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7165/pattern-ver1-serial/src.com.massivecraft.massivecore.mson.Mson.java-stripStyle.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
+int a=1;
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:06:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+int a=1;
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
+int a=1;
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:06:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
+int a=1;
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
+int a=1;
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+int a=1;
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:06:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+int a=1;
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+String UTC="%#.&f";
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
+String UTC="%#.&f";
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+boolean b=true;
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
+boolean b=true;
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:07:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+boolean b=true;
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
+boolean b=true;
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
+boolean b=true;
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:07:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
+boolean b=true;
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:07:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+boolean b=true;
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
+id=printOffset(offset)+1;
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+if(id.isEmpty()){
+return zone;
+}
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id.startsWith("ldaps")){
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7118/pattern-ver1-serial/gateway.engine.policies.src.main.java.io.apiman.gateway.engine.policies.auth.LDAPIdentityValidator.java-validate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.startsWith("ldaps")){
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7118/pattern-ver1-serial/gateway.engine.policies.src.main.java.io.apiman.gateway.engine.policies.auth.LDAPIdentityValidator.java-validate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+if(id==null){
+return null;
+}
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+if(id==null){
+return null;
+}
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+if(zone==null){
+return null;
+}
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
+if(zone==null){
+return null;
+}
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id==null){
+return null;
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id==null){
+return null;
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id==null||id.isEmpty()){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id==null){
+return zone;
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
+}
+if(id==null){
+return null;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:09:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
+}
+if(id==null){
+return null;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:09:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+if("&null".equals(id)){
+return null;
+}
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
+}
+if("&null".equals(id)){
+return null;
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:09:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+if("&null".equals(offset)){
+return null;
+}
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if("&null".equals(offset)){
+return null;
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:09:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+if("&null".equals(zone)){
+return null;
+}
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
+if(!(id==null)){
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
+}
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:09:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(offset<0){
+return null;
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:10:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+if(offset<0){
+return null;
+}
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+if(offset<0){
+return null;
+}
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+if(zone.equals("-1")){
+return null;
+}
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id.equals("-1")){
+return null;
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.equals("-1")){
+return null;
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset==0L||offset==Long.MIN_VALUE){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
+id=printOffset(offset).replaceAll("\n","");
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
+id=(printOffset(offset)).replace("\\","\\\\");
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException("The datetime zone id '"+id.replaceAll("[^\\w\\s]","")+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/547/pattern-ver1-serial/src.main.java.com.driver.locator.pageobject.PageObjectGenerator.java-formatWebElement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:11:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException("The datetime zone id '"+id.replace("The datetime zone id '","")+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2038/pattern-ver1-serial/LabPal.app.src.main.java.danandzach.labpal.LabCalculations.java-setErrorDisplay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:11:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.trim().startsWith("+")||id.trim().startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+assert (id!=null);
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:11:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+assert (id!=null);
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:11:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+assert (zone!=null);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
+assert (zone!=null);
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:11:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+assert (!id.isEmpty());
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:11:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
+assert (!id.isEmpty());
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:11:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import java.awt.event.WindowEvent;
+
+import java.net.URL;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+if(id==null){
+return null;
+}
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V37/1495/pattern-ver1-serial/src.com.suntc.tictactoe.ClientGui.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:12:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import java.awt.event.WindowEvent;
+
+import java.net.URL;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
+}
+if(id==null){
+return null;
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V37/1495/pattern-ver1-serial/src.com.suntc.tictactoe.ClientGui.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:12:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+if(id!=null){
+int offset=parseOffset(id);
+if(offset==0L){
+return DateTimeZone.UTC;
+}else {
+id=printOffset(offset);
+return fixedOffsetZone(id,offset);
+}
+}
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+if(id!=null){
+if(id==null){
+return getDefault();
+}
+if(id.equals("UTC")){
+return DateTimeZone.UTC;
+}
+DateTimeZone zone=cProvider.getZone(id);
+if(zone!=null){
+return zone;
+}
+if(id.startsWith("+")||id.startsWith("-")){
+int offset=parseOffset(id);
+if(offset==0L){
+return DateTimeZone.UTC;
+}else {
+id=printOffset(offset);
+return fixedOffsetZone(id,offset);
+}
+}
+throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+}
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:12:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+if(id==null){
+return null;
+}
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3772/pattern-ver1-serial/android-sdk.src.main.java.com.optimizely.ab.android.sdk.DataFileClient.java-execute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:12:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
-DateTimeZone zone=cProvider.getZone(id);
+DateTimeZone zone=cProvider.getZone(id.trim());
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
+int offset=parseOffset(id.trim());
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+assert (offset!=parseOffset(id));
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:12:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+assert (zone!=cProvider.getZone(id));
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+assert (id!=null);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:12:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
+assert (id!=null);
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
+if(zone!=null||"查看红包".equals(zone)){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id==null||"查看红包".equals(id)){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:13:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset==0L||"查看红包".equals(offset)){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset==0L||offset==3){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id!=null&&id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
+id=printOffset(offset);
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+id=printOffset(offset);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:13:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals("UTC")||"9".equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:13:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+if(id.isEmpty()){
+id=null;
+}
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
+}
+if(id.isEmpty()){
+id=null;
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id==null||id==""){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset<0||offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+id=printOffset(offset);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
+id=printOffset(offset);
 return DateTimeZone.UTC;
 }else {
-id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.equals("manufacturedOn")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V37/509/pattern-ver1-serial/product-validation-system-war.src.main.java.com.pvs.web.freemarker.processors.ProductTemplateRegistrationProcessor.java-postHTML.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id==null||id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals("UTC")||"/preEvaluatorImpersonation".equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V22/4389/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.base.CandidateDataController.java-assessmentReturnView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if((id!=null)&&(id.equals("UTC"))){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:14:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+int offset=parseOffset(id);
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:15:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset==0L||offset==0){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:15:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset==0L||offset>9){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:15:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised"+" -u "+id);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:15:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised"+" -u "+zone);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:15:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if((id!=null)&&id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/3368/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.networkcontroller.impl.brocade.BrocadeNetworkSystemDevice.java-getVersion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:15:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+if(id.startsWith("+")||id.startsWith("-")){
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1365/pattern-ver1-serial/src.main.java.nl.tue.win.vcp.virtualbreitenbergenvironment.model.Environment.java-draw.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:15:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset==0L&&offset<4000000){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:16:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
+if(zone!=null||zone==null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:16:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id==null||id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:16:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id==null||id.trim().isEmpty()){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:16:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset==0L&&offset!=9999){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:16:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(0L>0&&offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:16:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+assert (offset>=0):"Receive a negative tratment";
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:16:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+assert (offset>=0):"Receive a negative tratment";
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:16:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||(id!=null&&id.startsWith("-"))){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/2463/pattern-ver1-serial/src.Level.java-collides.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:16:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
+}
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
+}
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+assert (id!=null):"Appointments day is not allowed to be null!";
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+assert (id!=null):"Appointments day is not allowed to be null!";
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
+assert (zone!=null):"Appointments day is not allowed to be null!";
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+assert (zone!=null):"Appointments day is not allowed to be null!";
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+assert (offset!=0):"Receive a size tratment";
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+assert (offset!=0):"Receive a size tratment";
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:17:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+if(id.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
+}
+if(id.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
+}
+if(id.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+if(offset>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
+if(offset>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(offset>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
+}
+if("+"==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id.equals("")){
+id="Manchester United FC";
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4958/pattern-ver1-serial/FootballScores.app.src.main.java.barqsoft.footballscores.widget.ScoresWidgetIntentService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.equals("")){
+id="Manchester United FC";
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4958/pattern-ver1-serial/FootballScores.app.src.main.java.barqsoft.footballscores.widget.ScoresWidgetIntentService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+if(offset<=0){
+offset=1;
+}
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:18:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException("The datetime zone id '"+"\""+id+"\""+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4748/pattern-ver1-serial/exportLibraries.vnxe.src.main.java.com.emc.storageos.vnxe.requests.FileSystemListRequest.java-getByFSName.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals("UTC")&&!"UTC".equals("全部")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:19:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
+if(zone!=null&&!zone.equals("")){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
+if(id==null&&!id.equals("")){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:19:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals("UTC")||id.length()==0){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V11/2922/pattern-ver1-serial/app.src.main.java.com.davidsgk.microcalc.MainActivity.java-Interpreter.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:19:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id.equals("")){
+id="Enabled";
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6250/pattern-ver1-serial/app.src.main.java.crm.geoalertapp.activities.SettingsActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:19:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.equals("")){
+id="Enabled";
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6250/pattern-ver1-serial/app.src.main.java.crm.geoalertapp.activities.SettingsActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:19:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+id=id.replaceAll(";","; ");
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5914/pattern-ver1-serial/app.src.main.java.rkr.directsmswidget.widgets.HomeWidget.java-updateAppWidget.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:19:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
+id=id.replaceAll(";","; ");
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5914/pattern-ver1-serial/app.src.main.java.rkr.directsmswidget.widgets.HomeWidget.java-updateAppWidget.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:19:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.startsWith("-")||"查看红包".equals(id.startsWith("+"))){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.isEmpty()){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7675/pattern-ver1-serial/libsrc.ffdec_lib.src.com.jpexs.decompiler.flash.action.swf4.ActionGotoFrame2.java-execute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(!id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id!=null&&id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.startsWith("-")||id.startsWith("https://")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/5632/pattern-ver1-serial/components.formats-common.src.loci.common.Location.java-getHandle.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(true){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.startsWith("-")==false){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
-return getDefault();
-}
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
+if(cProvider!=null){
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
+}
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
-}
-if(id.equals("UTC")){
-return DateTimeZone.UTC;
 }
+if(cProvider!=null){
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
+}
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5761/pattern-ver1-serial/src.main.java.jp.sf.amateras.mirage.type.enumerate.EnumOneBasedOrdinalValueType.java-isSupport.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
+if(id!=null&&id!=null){
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1305/pattern-ver1-serial/portlets.proposals-portlet.src.main.java.org.xcolab.jsp.tags.discussion.GetRoleNameTag.java-doStartTag.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.matches("/+[\\w\\.\\d/]+.*")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5089/pattern-ver1-serial/exportLibraries.cimadapter.src.main.java.com.emc.storageos.cimadapter.processors.CimIndicationSet.java-processProperty.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/947/pattern-ver1-serial/advinst-server.src.main.java.jetbrains.buildServer.advinst.server.AdvinstRunTypePropertiesProcessor.java-process.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
-if(id.equals("UTC")){
+if(id.equals("UTC")||id.trim().equals("UTC".trim())){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V4/720/pattern-ver1-serial/FileDownloader.src.main.java.org.wlf.filedownloader.DownloadFileChangeObserver.java-onDownloadFileUpdated.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.contains(".")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2868/pattern-ver1-serial/src.main.java.play.templates.GroovyTemplate.java-invokeTag.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6852/pattern-ver1-serial/vipr-portal.portal.app.controllers.tenant.TenantSelector.java-renderTenantOptionsForVcenters.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")||id.startsWith("-")==true){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:21:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
-return zone;
+DateTimeZone t=zone;
+zone=null;
+return t;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:21:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+DateTimeZone t=zone;
+zone=null;
 if(zone!=null){
-return zone;
+return t;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id==null||id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+if(zone==null){
+throw new IllegalStateException("User isn't registered! "+id);
+}
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id==null){
+throw new IllegalStateException("User isn't registered! "+offset);
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+ final String dropStatement="The datetime zone id '"+id+"' is not recognised";
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException(dropStatement);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("\r\n")){
+id=id.substring(2);
+}
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:22:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+if(id.startsWith("\r\n")){
+id=id.substring(2);
+}
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:22:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+String loc="The datetime zone id '"+id+"' is not recognised";
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
-throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
+throw new IllegalArgumentException(loc);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id.startsWith("+")){
+id=id.substring(1);
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/820/pattern-ver1-serial/src.com.iotracks.iofabric.utils.configuration.Configuration.java-setConfig.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:22:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.startsWith("+")){
+id=id.substring(1);
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/820/pattern-ver1-serial/src.com.iotracks.iofabric.utils.configuration.Configuration.java-setConfig.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id.contains("phpreturn")){
+id=id.replace("php","php\n");
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/2350/pattern-ver1-serial/src.main.java.ru.andyskvo.main.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:22:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.contains("phpreturn")){
+id=id.replace("php","php\n");
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V39/2350/pattern-ver1-serial/src.main.java.ru.andyskvo.main.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id.contains("#")){
+id=id.split("#")[0];
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3981/pattern-ver1-serial/hdiv-core.src.main.java.org.hdiv.filter.ValidatorHelperRequest.java-restoreState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.contains("#")){
+id=id.split("#")[0];
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3981/pattern-ver1-serial/hdiv-core.src.main.java.org.hdiv.filter.ValidatorHelperRequest.java-restoreState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
+if(offset==3){
+System.out.println("debug");
+}
+if(offset==3){
+System.out.println("debug");
+}
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
-if(id.startsWith("+")||id.startsWith("-")){
+if(id.startsWith("+")){
 int offset=parseOffset(id);
-if(offset==0L){
+if(offset==0L&&id.startsWith("-")){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
+}
+if(id.endsWith("/")==false){
+id=id+"/";
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
+long startTime=System.currentTimeMillis();
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
+if(cProvider!=null){
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
+}
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
 return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
-}
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
-return getDefault();
+int offset=parseOffset(id);
+if(offset==0L){
+return DateTimeZone.UTC;
+}else {
+id=printOffset(offset);
+return fixedOffsetZone(id,offset);
+}
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
-return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
-}
+return getDefault();
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:23:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
-return zone;
-}
-if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.startsWith("+")||id.startsWith("-")){
+return zone;
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
+int offset=parseOffset(id);
+if(offset==0L){
 return DateTimeZone.UTC;
+}else {
+id=printOffset(offset);
+return fixedOffsetZone(id,offset);
+}
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
 return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
-}
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
-return DateTimeZone.UTC;
-}
-DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
-return zone;
-}
-if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
+}
+DateTimeZone zone=cProvider.getZone(id);
+if(zone!=null){
+return zone;
 }
+if(id.startsWith("+")||id.startsWith("-")){
+id+="+";
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V13/4205/pattern-ver1-serial/NewtonRaphsonApp.java-updateCommand.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
+if(id.substring(11,19).equals("00:00:00")){
+id=id.substring(0,11)+"23:59:59"+id.substring(19);
+}
 return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2005/pattern-ver1-serial/dspace-oai.src.main.java.org.dspace.xoai.filter.DateUntilFilter.java-buildSolrQuery.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
 }
 if(id.startsWith("+")||id.startsWith("-")){
 int offset=parseOffset(id);
 if(offset==0L){
 return DateTimeZone.UTC;
 }else {
 id=printOffset(offset);
 return fixedOffsetZone(id,offset);
+}
 }
+if(id.substring(11,19).equals("00:00:00")){
+id=id.substring(0,11)+"23:59:59"+id.substring(19);
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2005/pattern-ver1-serial/dspace-oai.src.main.java.org.dspace.xoai.filter.DateUntilFilter.java-buildSolrQuery.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
-}
-if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
-return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
-}
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 0, INS : 0, DEL : 22
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
+if(cProvider!=null){
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
-}
-if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
-return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
 }
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 25, UPD : 3, INS : 0, DEL : 22
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
-}
-if(id.equals("UTC")){
-return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
-return zone;
-}
-if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
-return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
-}
-}
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 34, UPD : 4, INS : 0, DEL : 30
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
-return getDefault();
-}
-if(id.equals("UTC")){
-return DateTimeZone.UTC;
-}
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
-}
-if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
-return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
-}
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 34, UPD : 4, INS : 0, DEL : 30
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
-}
-if(id.equals("UTC")){
-return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
-}
-if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
-return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
-}
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 41, UPD : 4, INS : 0, DEL : 37
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
 if(id==null){
 return getDefault();
 }
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
-if(zone!=null){
-return zone;
-}
-if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
-return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
-}
-}
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 41, UPD : 4, INS : 0, DEL : 37
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[188,225]
------------Candidate---------------
 @FromString public static DateTimeZone forID(String id){
-if(id==null){
-return getDefault();
-}
 if(id.equals("UTC")){
 return DateTimeZone.UTC;
 }
 DateTimeZone zone=cProvider.getZone(id);
 if(zone!=null){
 return zone;
-}
-if(id.startsWith("+")||id.startsWith("-")){
-int offset=parseOffset(id);
-if(offset==0L){
-return DateTimeZone.UTC;
-}else {
-id=printOffset(offset);
-return fixedOffsetZone(id,offset);
-}
 }
 throw new IllegalArgumentException("The datetime zone id '"+id+"' is not recognised");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 41, UPD : 4, INS : 0, DEL : 37
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:25:09 CDT
--------------- END -----------------
Location : org.joda.time.DateTimeZone.parseOffset:[629, 643, 629, 631, 634]#0.2886751345948129
Compute Candidate : 2019.09.04 AD at 21:25:29 CDT - 2019.09.04 AD at 21:32:01 CDT , PNumber : 11175, CandNumber : 43 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
-Chronology chrono=new BaseChronology(){
+ Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
-return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+return -(int)offsetFormatter().withChronology(chrono).parseMillis(str.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:32:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
-return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+return -(int)offsetFormatter().withChronology(chrono).parseMillis((str).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
-return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+return -(int)offsetFormatter().withChronology(chrono).parseMillis((str).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:32:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
-return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+return -(int)offsetFormatter().parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+chrono=chrono;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:32:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+int a=0;
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:32:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+String OUTSTRING="";
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:32:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+if(str.isEmpty()){
+return 0;
+}
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:32:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(str.isEmpty()){
+return 0;
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+int a=1;
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+boolean b=true;
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(chrono==null){
+return 0;
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(offsetFormatter()==null){
+return 0;
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(offsetFormatter().withChronology(chrono)==null){
+return 0;
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(str==null){
+return 0;
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if("index".equals(chrono)){
+return 0;
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+if("index".equals(str)){
+return 0;
+}
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(chrono.equals("-1")){
+return 0;
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:33:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+assert (chrono!=null);
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:34:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+assert (str!=null);
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:34:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+assert (!str.isEmpty());
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+if(str!=null){
+Chronology chrono=new BaseChronology(){
+  public DateTimeZone getZone(){
+    return null;
+  }
+  public Chronology withUTC(){
+    return this;
+  }
+  public Chronology withZone(  DateTimeZone zone){
+    return this;
+  }
+  public String toString(){
+    return getClass().getName();
+  }
+}
+;
+return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+}
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+assert (chrono!=new BaseChronology(){
+  public DateTimeZone getZone(){
+    return null;
+  }
+  public Chronology withUTC(){
+    return this;
+  }
+  public Chronology withZone(  DateTimeZone zone){
+    return this;
+  }
+  public String toString(){
+    return getClass().getName();
+  }
+}
+);
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+assert (str!=null);
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(chrono.equals("655")){
+System.out.println();
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if((Thread.currentThread().interrupted())){
+return 0;
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(str.isEmpty()){
+str=null;
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+assert (chrono!=null):"Appointments day is not allowed to be null!";
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(offsetFormatter()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(offsetFormatter().withChronology(chrono)==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(chrono==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(str==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
-return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5027/pattern-ver1-serial/java.code.core.src.org.specksensor.DataSample.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
-return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
-return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+return -(int)offsetFormatter().withChronology(chrono).parseMillis(str)&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
-return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+return (int)-(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:36:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
-return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
+return (int)(-(int)offsetFormatter().withChronology(chrono).parseMillis(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:36:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(chrono==null||str==null){
+throw new NullPointerException();
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[626,644]
------------Candidate---------------
 private static int parseOffset(String str){
 Chronology chrono=new BaseChronology(){
   public DateTimeZone getZone(){
     return null;
   }
   public Chronology withUTC(){
     return this;
   }
   public Chronology withZone(  DateTimeZone zone){
     return this;
   }
   public String toString(){
     return getClass().getName();
   }
 }
 ;
+if(str==null||chrono==null){
+throw new NullPointerException();
+}
 return -(int)offsetFormatter().withChronology(chrono).parseMillis(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:36:29 CDT
--------------- END -----------------
Location : org.joda.time.DateTimeZone.offsetFormatter:[695, 700]#0.2886751345948129
Compute Candidate : 2019.09.04 AD at 21:36:50 CDT - 2019.09.04 AD at 21:43:02 CDT , PNumber : 11400, CandNumber : 35 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+return null;
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:43:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
-return cOffsetFormatter;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:43:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
+cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:43:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
-return cOffsetFormatter;
+return (DateTimeFormatter)(cOffsetFormatter);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+while(true){
+
+}
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
-if(cOffsetFormatter==null){
+if(cOffsetFormatter.equals(null)){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
-if(cOffsetFormatter==null){
+if(true){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
+if(cOffsetFormatter==null){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+}
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+int a=0;
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
+int a=0;
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+String OUTSTRING="";
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
+String OUTSTRING="";
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+int cOffsetFormatter=5;
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+int indexSelection=0;
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+int a=1;
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
+int a=1;
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+boolean cOffsetFormatter=true;
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+boolean b=true;
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
+boolean b=true;
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+if(new DateTimeFormatterBuilder()==null){
+return null;
+}
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+if(new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4)==null){
+return null;
+}
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+if((Thread.currentThread().interrupted())){
+return null;
+}
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+}
+if((Thread.currentThread().interrupted())){
+return null;
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
-if(cOffsetFormatter==null){
+if(cOffsetFormatter==null||"查看红包".equals(cOffsetFormatter)){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
-if(cOffsetFormatter==null){
+if(cOffsetFormatter==null||cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+if(new DateTimeFormatterBuilder()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+if(new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4)==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:47:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
-if(cOffsetFormatter==null){
+if(cOffsetFormatter==null&&!cOffsetFormatter.equals("")){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:48:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
-cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 }
+cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
-if(cOffsetFormatter==null){
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+if(cOffsetFormatter==null){
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:48:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[689,701]
------------Candidate---------------
 private static synchronized DateTimeFormatter offsetFormatter(){
 if(cOffsetFormatter==null){
+long startTime=System.currentTimeMillis();
 cOffsetFormatter=new DateTimeFormatterBuilder().appendTimeZoneOffset(null,true,2,4).toFormatter();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return cOffsetFormatter;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 21:48:27 CDT
--------------- END -----------------
Location : org.joda.time.DateTimeZone.printOffset:[660, 661, 658, 656, 657, 664, 665, 666, 668, 669, 670, 671, 672, 673]#0.2773500981126146
Compute Candidate : 2019.09.04 AD at 21:48:47 CDT - 2019.09.04 AD at 22:42:45 CDT , PNumber : 11350, CandNumber : 495 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:42:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+ int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+ int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+return null;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+return null;
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:43:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+long hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+long minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+StringBuffer buf=new StringBuffer(null);
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:43:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:43:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>=2){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V39/6961/pattern-ver1-serial/src.Actions.FailedGuessAction.java-FailedGuessAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:44:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset<=0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(hours==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:44:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
-if(offset==0){
+if(hours==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:44:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(minutes==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
-if(offset==0){
+if(minutes==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+StringBuffer buf=new StringBuffer(1);
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=hours*(Integer)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/1684/pattern-ver1-serial/src.jpkmn.game.battle.Battle.java-remove.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+StringBuffer buf=new StringBuffer(offset);
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7124/pattern-ver1-serial/src.server.repository.SDMSIndex.java-getUnique.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset>=0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset!=0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:45:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+Integer hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+Integer minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:45:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=2*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:45:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=2*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2024/pattern-ver1-serial/src.server.MessageHandler.java-clientPing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.io.UnsupportedEncodingException;
+
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+StringBuffer buf=new StringBuffer("UTF-8");
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V37/5909/pattern-ver1-serial/platform.security.handler.security-handler-api.src.main.java.org.codice.ddf.security.handler.api.PKIAuthenticationToken.java-PKIAuthenticationToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append('+');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
+buf.append('+');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset>0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:46:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==4){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+int hours=offset/4;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+int minutes=offset/4;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>=0.0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:46:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset<=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==5){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=offset*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
-offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+offset-=offset*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=offset*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+int hours=offset/2;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4132/pattern-ver1-serial/MainProject.src.se.chalmers.dat255.risk.view.ProvinceView.java-getTextY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+int minutes=offset/2;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4132/pattern-ver1-serial/MainProject.src.se.chalmers.dat255.risk.view.ProvinceView.java-getTextY.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+StringBuffer buf=new StringBuffer(2);
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+return "An arena doesn't seem to be built yet.";
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/1665/pattern-ver1-serial/src.me.dalton.capturethepoints.CaptureThePoints.java-checkMainArena.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+return "";
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+return "";
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append('-');
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+FormatUtils.appendPaddedInteger(buf,offset,3);
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:47:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+FormatUtils.appendPaddedInteger(buf,offset,3);
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:48:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append('+');
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return printOffset(0);
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:48:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ final StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+ final int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ final StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+ final int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:48:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ final StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
-int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+ final int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:48:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+ final int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+ final int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:48:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+ final int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
-int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+ final int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=1;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=-1;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+ int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+ int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
-int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+ int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+ int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+ int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+ int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
-int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+ int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return null;
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return "";
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=0;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+offset++;
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:49:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+hours++;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:50:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+minutes++;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset++;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+seconds++;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:50:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+offset++;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+offset++;
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:50:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
+offset++;
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return buf.toString().trim();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:50:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+offset--;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:50:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+hours--;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:51:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+minutes--;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset--;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+seconds--;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:51:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return new String(buf.toString());
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:51:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+offset--;
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
+offset--;
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:51:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=3;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/101/pattern-ver1-serial/PageRank.PageRank.java-PageRank.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:51:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return (String)buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:51:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=2;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+synchronized(buf){
 buf.append('-');
+}
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+synchronized(buf){
 buf.append('+');
+}
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+synchronized(buf){
 buf.append(':');
+}
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+synchronized(buf){
 buf.append(':');
+}
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:52:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
+synchronized(buf){
 buf.append('.');
+}
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+printOffset(offset);
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+printOffset(offset);
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
+printOffset(offset);
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append((int)('-'));
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
-buf.append('+');
+buf.append((int)('+'));
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:53:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
+buf.append((int)(':'));
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:53:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+StringBuffer buf=new StringBuffer(offset++);
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return buf.toString().toLowerCase();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=4;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=5;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:53:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+int hours=offset/(int)DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+int minutes=offset/(int)DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:53:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return (String)(buf.toString());
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset<0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:54:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+while(true){
+
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+while(true){
+
+}
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:58:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(buf!=null){
 buf.append('-');
+}
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+if(buf!=null){
 buf.append('+');
+}
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:58:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(buf!=null){
 buf.append(':');
+}
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:58:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=1;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=-1;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:58:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if(-offset!=0){
 offset=-offset;
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+if(seconds*DateTimeConstants.MILLIS_PER_SECOND!=0){
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
+}
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if('-'>0){
 buf.append('-');
+}
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+if('+'>0){
 buf.append('+');
+}
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:59:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=0;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf.append("]");
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:59:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+buf.append("]");
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append("]");
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append("            scope.apply();\n");
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4602/pattern-ver1-serial/layout.src.main.java.com.flarestar.drones.layout.directives.Click.java-afterViewCreated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:59:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ @SuppressWarnings("UnusedAssignment") StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+ @SuppressWarnings("UnusedAssignment") int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+ @SuppressWarnings("UnusedAssignment") int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:59:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ @SuppressWarnings("UnusedAssignment") StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
-int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+ @SuppressWarnings("UnusedAssignment") int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
-int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+ @SuppressWarnings("UnusedAssignment") int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+ @SuppressWarnings("UnusedAssignment") StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+ @SuppressWarnings("UnusedAssignment") int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
-int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+ @SuppressWarnings("UnusedAssignment") int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 22:59:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf=buf;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+offset=offset;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf=buf;
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset+offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
-if(offset==0){
+if(offset+offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset+hours==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
-if(offset==0){
+if(offset+hours==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset+minutes==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
-if(offset==0){
+if(offset+minutes==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(true){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:00:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(true){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=-offset*offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE*offset;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
-offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND*offset;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:01:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE*hours;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=3;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/101/pattern-ver1-serial/PageRank.PageRank.java-PageRank.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=offset;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:01:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=0xEfffffff&(-offset);
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:01:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+int a=0;
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+int a=0;
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+int a=0;
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
+int a=0;
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=2;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
+String OUTSTRING="";
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+String OUTSTRING="";
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+String OUTSTRING="";
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+String OUTSTRING="";
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=0.0;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(Math.abs(offset)>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5309/pattern-ver1-serial/IHMCJavaToolkit.src.us.ihmc.tools.FormattingTools.java-getFormattedToSignificantFigures.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=4;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(Double.isNaN(offset)){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(Double.isNaN(offset)){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=5;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:03:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:03:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=1.0*hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:03:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=1.0*minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append(Math.abs('-'));
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
-buf.append('+');
+buf.append(Math.abs('+'));
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
+buf.append(Math.abs(':'));
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+int indexSelection=0;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+int indexSelection=0;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+int indexSelection=0;
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf.append(" & ");
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+buf.append(" & ");
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append(" & ");
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append("    }\n");
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf.append("    }\n");
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+buf.append("    }\n");
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:05:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=offset+-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:05:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=offset+minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
-offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+offset-=offset+seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+int a=1;
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+int a=1;
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+int a=1;
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
+int a=1;
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:05:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+buf.append(offset);
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+buf.append(offset);
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:06:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+buf.append(offset);
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:06:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append(offset);
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:06:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+buf.append(offset);
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+buf.append(hours);
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+buf.append(minutes);
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+buf.append(seconds);
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+boolean MILLIS_PER_HOUR=true;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+boolean MILLIS_PER_MINUTE=true;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+boolean DateTimeConstants=true;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+boolean b=true;
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:07:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+boolean b=true;
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:07:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+boolean b=true;
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:07:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
+boolean b=true;
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:07:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return buf.toString()+".*";
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+if(buf==null){
+return "";
+}
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:07:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+if(buf==null){
+return "";
+}
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+if(buf==null){
+return "";
+}
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(buf==null){
+return "";
+}
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:08:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(buf==null){
+return "";
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+if(buf==null){
+return null;
+}
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:08:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+if(buf==null){
+return null;
+}
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:08:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(buf==null){
+return null;
+}
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:08:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+if(buf==null){
+return null;
+}
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:08:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(buf==null){
+return null;
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:08:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(buf==null){
+return null;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=1;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=-1;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:09:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(buf==null){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:09:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(buf==null){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
+if(buf==null){
+return null;
+}
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(buf==null){
+return null;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
+if(buf==null){
+return null;
+}
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:09:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
+if(buf==null){
+return null;
+}
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:09:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
+if(buf==null){
+return null;
+}
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:09:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if("&null".equals(offset)){
+return null;
+}
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if("&null".equals(buf)){
+return null;
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if("&null".equals(offset)){
+return null;
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if("&null".equals(buf)){
+return null;
+}
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+if("&null".equals(buf)){
+return null;
+}
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if("&null".equals(hours)){
+return null;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if("&null".equals(minutes)){
+return null;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+if("&null".equals(seconds)){
+return null;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+if(buf==null){
+return null;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
+}
+if(buf==null){
+return null;
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:10:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+buf.append('-');
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+buf.append('-');
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+buf.append('-');
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+buf.append('+');
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+buf.append('+');
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+buf.append('-');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=0;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+buf.append('+');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
-}else {
 buf.append('-');
+}else {
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append('-');
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:11:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf.append('-');
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:12:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf.append('+');
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
 buf.append('+');
+if(offset>=0){
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:12:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(buf.equals("")){
+return "";
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+buf.append(':');
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:12:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+buf.append(':');
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+buf.append('.');
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
-buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:12:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+buf.append(':');
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+buf.append('-');
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:12:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+buf.append('+');
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+buf.append('+');
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
-return buf.toString();
+return null;
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V63/2730/pattern-ver1-serial/src.zen.codegen.jvm.JavaSolution.java-GetConstValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if(offset<0){
+return null;
+}
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(offset<0){
+return null;
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=3;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/101/pattern-ver1-serial/PageRank.PageRank.java-PageRank.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+buf.append(':');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(buf.equals("-1")){
+return null;
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=offset;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>=0||offset==Long.MIN_VALUE){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:13:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==0||offset==Long.MIN_VALUE){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:14:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+buf.append(':');
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:14:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf.append(':');
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:14:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf.append(':');
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:14:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf.append('.');
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
-buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:14:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+buf.append(':');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:14:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=2;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
-buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+buf.append('+');
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:14:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=hours*(int)Math.max(DateTimeConstants.MILLIS_PER_HOUR,1);
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+try{
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}finally{
+buf.append('-');
+}
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
+try{
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}finally{
+buf.append('-');
+}
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
+try{
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}finally{
+buf.append('-');
+}
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
+try{
 FormatUtils.appendPaddedInteger(buf,offset,3);
+}finally{
+buf.append('-');
+}
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+try{
 offset=-offset;
+}finally{
+buf.append('-');
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+try{
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
+}
+}finally{
+buf.append('-');
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+assert (buf!=null);
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+assert (buf!=null);
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+assert (buf!=null);
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:15:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+assert (buf!=null);
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:16:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+assert (buf!=null);
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:16:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=0.0;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=4;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:16:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=5;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(buf!=null){
+buf.append('-');
+offset=-offset;
+}
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:16:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+if(buf!=null){
+buf.append('+');
+}
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+if(buf!=null){
+return buf.toString();
+}
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:16:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+if(buf!=null){
+return buf.toString();
+}
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:16:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return buf.toString().replaceAll("\r","");
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+if(offset==0){
+return null;
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+}
+if(offset==0){
+return null;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(offset==0){
+return null;
+}
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(offset==0){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(offset==0){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return String.format("%s",buf.toString());
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+assert (buf!=new StringBuffer());
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+assert (hours!=offset/DateTimeConstants.MILLIS_PER_HOUR);
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+assert (minutes!=offset/DateTimeConstants.MILLIS_PER_MINUTE);
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:17:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+assert (seconds!=offset/DateTimeConstants.MILLIS_PER_SECOND);
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=offset+hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=-1;
 }
+offset++;
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=-1;
+offset++;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+offset++;
 }else {
 buf.append('-');
-offset=-offset;
+offset=-1;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+buf.append(':');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+assert (buf!=null);
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+assert (buf!=null);
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(buf.equals(null)){
+return null;
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(buf.equals(null)){
+return null;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:18:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
+if(buf.equals(null)){
+return null;
+}
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
+if(buf.equals(null)){
+return null;
+}
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:19:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
+if(buf.equals(null)){
+return null;
+}
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:19:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(buf.equals(null)){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:19:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(buf.equals(null)){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:19:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
+if(buf.equals(null)){
+return null;
+}
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
-StringBuffer buf=new StringBuffer();
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
+StringBuffer buf=new StringBuffer(indexClassList);
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(buf.equals("655")){
+System.out.println();
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:19:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(buf.equals("655")){
+System.out.println();
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:19:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(buf.equals("655")){
+System.out.println();
+}
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:20:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
+if(buf.equals("655")){
+System.out.println();
+}
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(buf.equals("655")){
+System.out.println();
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:20:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
+if(buf.equals("655")){
+System.out.println();
+}
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
+if(buf.equals("655")){
+System.out.println();
+}
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:20:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
+if(buf.equals("655")){
+System.out.println();
+}
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+buf.append('-');
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:20:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+buf.append('-');
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:20:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+buf.append('-');
 buf.append('+');
 }else {
-buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:20:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>=0||"查看红包".equals(offset)){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==0||"查看红包".equals(offset)){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:21:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>=0||offset==3){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==0||offset==3){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:21:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return buf.toString()==null?"":buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset<0||offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:21:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset<0||offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:21:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
+offset=-offset;
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:21:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+offset=-offset;
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+offset=-offset;
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+offset=-offset;
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+offset=-offset;
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:22:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+offset=-offset;
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:22:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+offset=-offset;
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:22:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+offset=-offset;
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:22:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
+offset=-offset;
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:22:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+offset=-offset;
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+offset=-offset;
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=(-offset+offset)%offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:23:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
 }
+offset=-offset;
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:23:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+offset=-offset;
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:23:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+offset=-offset;
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:23:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return buf.toString()!=null?buf.toString():new String();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>=0||offset==0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==0||offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>=0||offset>9){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:23:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==0||offset>9){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:23:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append('-'+" -u "+offset);
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append('-'+" -u "+buf);
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
-buf.append('+');
+buf.append('+'+" -u "+offset);
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
-buf.append('+');
+buf.append('+'+" -u "+buf);
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+try{
 buf.append('-');
+}finally{
 offset=-offset;
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return buf==null?null:buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>=0&&offset<4000000){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==0&&offset<4000000){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:25:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return buf.toString()==null?new String():buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:25:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(offset>=0&&offset!=9999){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==0&&offset!=9999){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:25:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
+if(0>0&&offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(0>0&&offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+assert (offset>=0):"Receive a negative tratment";
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
+assert (offset>=0):"Receive a negative tratment";
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+assert (hours>=0):"Receive a negative tratment";
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+assert (minutes>=0):"Receive a negative tratment";
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+assert (seconds>=0):"Receive a negative tratment";
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+if(buf!=null){
 return buf.toString();
+}else {
+return null;
+}
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V35/3589/pattern-ver1-serial/HermesBucarBala.app.src.main.java.com.laboratoriodesoftware2015.hermesbucarbala.presenter.DashboardPresenter.java-getListTabsById.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
+if(buf!=null){
 return buf.toString();
+}else {
+return null;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V35/3589/pattern-ver1-serial/HermesBucarBala.app.src.main.java.com.laboratoriodesoftware2015.hermesbucarbala.presenter.DashboardPresenter.java-getListTabsById.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
-return buf.toString();
+return buf!=null?buf.toString():null;
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+assert (buf!=null):"Appointments day is not allowed to be null!";
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+assert (buf!=null):"Appointments day is not allowed to be null!";
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+assert (buf!=null):"Appointments day is not allowed to be null!";
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+assert (buf!=null):"Appointments day is not allowed to be null!";
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+assert (buf!=null):"Appointments day is not allowed to be null!";
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+assert (offset!=0):"Receive a size tratment";
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static String printOffset(int offset){
+assert (offset!=0):"Receive a size tratment";
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+assert (hours!=0):"Receive a size tratment";
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+assert (minutes!=0):"Receive a size tratment";
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+assert (seconds!=0):"Receive a size tratment";
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(offset>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if(offset>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+FormatUtils.appendPaddedInteger(buf,offset,3);
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
-FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+if(offset==0){
+return buf.toString();
+}
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
-return buf.toString();
-}
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+if(offset==0){
+return buf.toString();
+}
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
-if(offset==0){
-return buf.toString();
-}
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
-return buf.toString();
-}
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(offset==0){
 if(offset==0){
+return buf.toString();
+}
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(offset==0){
 if(offset==0){
+return buf.toString();
+}
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
-if(offset==0){
-return buf.toString();
-}
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:29:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(offset==0){
+return buf.toString();
+}
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
-return buf.toString();
-}
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:29:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(offset==0){
+return buf.toString();
+}
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
-if(offset==0){
-return buf.toString();
-}
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+FormatUtils.appendPaddedInteger(buf,offset,3);
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
-FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:29:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+if(offset<0){
+offset=0;
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:29:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
+}
+if(offset<0){
+offset=0;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:29:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(offset<0){
+offset=0;
+}
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:29:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(offset<0){
+offset=0;
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(offset<0){
+offset=0;
+}
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append(" (");
+buf.append(") ");
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:30:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+buf.append(" (");
 offset=-offset;
+buf.append(") ");
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:30:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+buf.append(" (");
+buf.append(") ");
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+if(buf!=null){
 offset=-offset;
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:30:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append("\"category\" : [");
+buf.append("]");
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1798/pattern-ver1-serial/src.main.java.com.github.jerdeb.daqvalidator.Validator.java-listCompliantCDM.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:30:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
+boolean haveBreadCrumbs=false;
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
+if(offset==0&&haveBreadCrumbs){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
+buf.append(':'+",");
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
-buf.append(':');
+buf.append(':'+",");
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:30:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=-offset*2;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE*2;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=-offset*2;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
-offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND*2;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
-buf.append('+');
-}else {
 buf.append('-');
+offset=-offset;
+}else {
+buf.append('+');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:31:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(buf!=null){
 buf.append('-');
+}
+if(buf!=null){
 offset=-offset;
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4107/pattern-ver1-serial/src.baseline.hvac.system7.HVACSystem7.java-checkSupplySideSystem.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+offset=-offset;
 }else {
 buf.append('-');
+offset=-offset;
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+offset++;
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=-1;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 4, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
+offset++;
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=-1;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 4, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:31:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=-1;
+offset++;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 4, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
-buf.append('+');
-}else {
 buf.append('-');
+}else {
+buf.append('+');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:31:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append(':');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
+buf.append('-');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:31:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append(':');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
-buf.append(':');
+buf.append('-');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append('.');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
-buf.append('.');
+buf.append('-');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+FormatUtils.appendPaddedInteger(buf,hours,2);
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+FormatUtils.appendPaddedInteger(buf,hours,2);
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+if(buf!=null){
 return buf.toString();
+}
+return null;
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+if(offset!=-offset){
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
+}
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(offset!=-offset){
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
+if(offset!=-offset){
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
+if(offset!=-offset){
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
+if(offset!=-offset){
 FormatUtils.appendPaddedInteger(buf,offset,3);
+}
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:32:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(buf!=null){
 buf.append('-');
-offset=-offset;
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(offset!=-offset){
 buf.append('-');
-offset=-offset;
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:33:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(offset!=-offset){
 buf.append(':');
+}
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+if(offset!=-offset){
 buf.append(':');
+}
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
+if(offset!=-offset){
 buf.append('.');
+}
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-offset=-offset;
+offset=-offset*2;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR*2;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR*2;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE*2;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR*2;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
-offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND*2;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:33:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
-buf.append('+');
-}else {
 buf.append('-');
 offset=-offset;
+}else {
+buf.append('-');
+buf.append('+');
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+buf.append("<table style=\"text-align: center;\" width=\"100%\" "+"height=\"100%\" border=\"0\" bordercolor=\"#000000\">");
+buf.append("</table>");
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5923/pattern-ver1-serial/photoweb.src.com.utils.web.GenerateHTML.java-genDayNavigate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:34:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
+offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(offset<0){
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+}
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(offset<0){
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(offset<0){
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+}
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+if(offset!=hours*(int)DateTimeConstants.MILLIS_PER_HOUR){
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
+}
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(offset!=hours*(int)DateTimeConstants.MILLIS_PER_HOUR){
 FormatUtils.appendPaddedInteger(buf,hours,2);
-offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+}
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+if(buf!=null){
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
+}
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+if(buf!=null){
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
+}
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+if(buf!=null){
 buf.append(':');
+}
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
+if(buf!=null){
 buf.append('.');
+}
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:35:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+if(buf!=null){
 buf.append(':');
+}
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7225/pattern-ver1-serial/app.src.main.java.org.votingsystem.activity.SMIMESignerActivity.java-setMenu.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
+if(buf!=null){
 buf.append('.');
+}
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7225/pattern-ver1-serial/app.src.main.java.org.votingsystem.activity.SMIMESignerActivity.java-setMenu.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+if(offset==3){
+System.out.println("debug");
+}
 buf.append('-');
 offset=-offset;
+if(offset==3){
+System.out.println("debug");
+}
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+if(offset==3){
+System.out.println("debug");
+}
 buf.append('+');
+if(offset==3){
+System.out.println("debug");
+}
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:35:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
+if(offset==3){
+System.out.println("debug");
+}
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(offset==3){
+System.out.println("debug");
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
-FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5745/pattern-ver1-serial/besiege-game.src.kyle.game.besiege.panels.PanelBattle.java-button1.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 5, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:35:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours--;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes--;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:35:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
-buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
-buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:36:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
+if(buf!=null){
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:36:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
+if(buf!=null){
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
+if(buf!=null){
 FormatUtils.appendPaddedInteger(buf,offset,3);
+}
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:36:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(buf!=null){
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
-FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:36:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
-FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
+if(buf!=null){
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
-FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
+if(buf!=null){
 FormatUtils.appendPaddedInteger(buf,offset,3);
+}
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:36:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(buf!=null){
 buf.append(':');
+}
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+if(buf!=null){
 buf.append(':');
+}
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
+if(buf!=null){
 buf.append('.');
+}
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(hours==0&&minutes==0&&buf.equals("")){
+return null;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+if(hours==0&&seconds==0&&buf.equals("")){
+return null;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes==0&&hours==0&&buf.equals("")){
+return null;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
+if(minutes==0&&seconds==0&&buf.equals("")){
+return null;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(hours==0&&offset==0&&buf.equals("")){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(hours==0&&offset==0&&buf.equals("")){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(offset==0&&hours==0&&buf.equals("")){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:37:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(hours==0&&offset==0&&buf.equals("")){
+return null;
+}
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(offset==0&&hours==0&&buf.equals("")){
+return null;
+}
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes==0&&offset==0&&buf.equals("")){
+return null;
+}
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<3){
+hours=3;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(offset<3){
+offset=3;
+}
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=0;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes=0;
+}
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
-FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
-FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import javafx.util.Pair;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
-offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6107/pattern-ver1-serial/src.main.java.de.unima.dws.semanta.crossword.model.Crossword.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
+import javafx.util.Pair;
+
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
-offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6107/pattern-ver1-serial/src.main.java.de.unima.dws.semanta.crossword.model.Crossword.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
+long startTime=System.currentTimeMillis();
 buf.append('+');
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:38:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
+long startTime=System.currentTimeMillis();
 buf.append('-');
 offset=-offset;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:39:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
+long startTime=System.currentTimeMillis();
 StringBuffer buf=new StringBuffer();
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
-buf.append('+');
-}else {
-buf.append('-');
-offset=-offset;
-}
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
+if(offset>=0){
+buf.append('+');
+}else {
+buf.append('-');
+offset=-offset;
+}
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:39:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
-buf.append('+');
-}else {
-buf.append('-');
-offset=-offset;
-}
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
+if(offset>=0){
+buf.append('+');
+}else {
+buf.append('-');
+offset=-offset;
+}
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:39:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
-if(offset>=0){
-buf.append('+');
-}else {
-buf.append('-');
-offset=-offset;
-}
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
-if(offset==0){
-return buf.toString();
-}
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
-if(offset==0){
-return buf.toString();
-}
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 3, INS : 0, DEL : 23
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:39:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/DateTimeZone.java[646,687]
------------Candidate---------------
 private static String printOffset(int offset){
 StringBuffer buf=new StringBuffer();
+if(buf.toString().contains("E")&&buf.toString().charAt(buf.indexOf("E")+1)!='-'&&Integer.parseInt(buf.toString().substring(buf.indexOf("E")+1,buf.length()))<=15){
+return String.format("%.0f",Double.parseDouble(buf.toString().replace(' ','\0')));
+}
 if(offset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 offset=-offset;
 }
 int hours=offset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 offset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 int minutes=offset/DateTimeConstants.MILLIS_PER_MINUTE;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 offset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(offset==0){
 return buf.toString();
 }
 int seconds=offset/DateTimeConstants.MILLIS_PER_SECOND;
 buf.append(':');
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 offset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(offset==0){
 return buf.toString();
 }
 buf.append('.');
 FormatUtils.appendPaddedInteger(buf,offset,3);
 return buf.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/476/pattern-ver1-serial/app.src.main.java.com.davidsgk.microcalc.MainActivity.java-Interpreter.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 0, INS : 40, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:39:37 CDT
--------------- END -----------------
Location : org.joda.time.tz.ZoneInfoProvider.getZone:[142, 136, 140, 141]#0.2672612419124244
Compute Candidate : 2019.09.04 AD at 23:39:56 CDT - 2019.09.04 AD at 23:59:45 CDT , PNumber : 11374, CandNumber : 185 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+ Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
-if(obj==null){
+if(obj!=null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.04 AD at 23:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id!=null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
-if(id.equals(obj)){
+if(obj.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
-if(id.equals(obj)){
+if(equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3451/pattern-ver1-serial/src.main.java.com.ohnosequences.typedGraphs.TypedVertex.java-outMany.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+Object obj=iZoneInfoMap.remove(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2156/pattern-ver1-serial/src.server.Server.java-addScheduledFailure.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
-if(tz!=null){
+if(id!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
-if(tz!=null){
+if(obj!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+ final Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
- @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+ final SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+ final Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
-DateTimeZone tz=ref.get();
+ final DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+ Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
- @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+ SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+Object obj=this.iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:00:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+Object obj=iZoneInfoMap.get(id.trim());
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
+getZone(id);
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+getZone(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+Object obj=iZoneInfoMap.get((id).toLowerCase());
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+synchronized(this){
 if(id==null){
 return null;
+}
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+synchronized(this){
 if(obj==null){
 return null;
+}
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
+synchronized(this){
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
+}
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
+synchronized(this){
 if(id.equals(obj)){
 return loadZoneData(id);
+}
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+Object obj=iZoneInfoMap.get((id).toUpperCase());
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+Object obj=iZoneInfoMap.remove(id,false);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/133/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.SubmissionViews.PopulateSubmissionViewHolder.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:01:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+obj=this;
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id.equals(null)){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
-if(obj==null){
+if(obj.equals(null)){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+synchronized(this){
 return null;
+}
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+synchronized(this){
 return null;
+}
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id.isEmpty()){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
+id=id;
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
+if(id!=null){
 if(id.equals(obj)){
 return loadZoneData(id);
+}
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+obj=1000;
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(true){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
-if(obj==null){
+if(true){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
+if(obj!=null){
 if(id.equals(obj)){
 return loadZoneData(id);
+}
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+int a=0;
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+int a=0;
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+int a=0;
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+obj=false;
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/271/pattern-ver1-serial/src.datamining.clustering.protoype.altopt.PolynomFCMNoiseClusteringAlgorithm.java-classifyNoise.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+String OUTSTRING="";
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+String OUTSTRING="";
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+String OUTSTRING="";
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+if(id.isEmpty()){
+return null;
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+if(id.isEmpty()){
+return null;
+}
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
+if(id.isEmpty()){
+return null;
+}
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
+int iZoneInfoMap=5;
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
+int ref=5;
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id.equalsIgnoreCase(null)){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+if(equals(id)){
+return null;
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
+if(equals(id)){
+return null;
+}
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
+}
+if(equals(id)){
+return null;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+return null;
+}
+if(equals(id)){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(equals(id)){
+return null;
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:05:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+return null;
+}
+if(equals(id)){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:05:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
+}
+if(equals(obj)){
+return null;
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(equals(obj)){
+return null;
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:05:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
+int indexSelection=0;
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+return null;
+}
+if(id.isEmpty()){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+int a=1;
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+int a=1;
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+int a=1;
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+boolean b=true;
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+boolean b=true;
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+boolean b=true;
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
+if(id.isEmpty()){
+return tz;
+}
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+if(id==null){
+return null;
+}
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+if(id==null){
+return null;
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
+if(id==null){
+return null;
+}
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+if(obj==null){
+return null;
+}
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj==null){
+return null;
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id==null||id.isEmpty()){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+return null;
+}
+if(iZoneInfoMap==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+return null;
+}
+if(id==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(id==null){
+return null;
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
+}
+if(obj==null){
+return null;
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(obj==null){
+return null;
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:07:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+return null;
+}
+if("&null".equals(id)){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+if("&null".equals(id)){
+return null;
+}
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:07:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if("&null".equals(obj)){
+return null;
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+if("&null".equals(obj)){
+return null;
+}
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
+if(!(id==null)){
 if(id.equals(obj)){
 return loadZoneData(id);
+}
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj.equals("-1")){
+return null;
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
+}
+if(id==null){
+return null;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+assert (id!=null);
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+assert (id!=null);
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
+assert (id!=null);
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+assert (obj!=null);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+assert (obj!=null);
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
+assert (!id.isEmpty());
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+assert (!id.isEmpty());
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+if(id!=null){
+if(id==null){
+return null;
+}
+Object obj=iZoneInfoMap.get(id);
+if(obj==null){
+return null;
+}
+if(id.equals(obj)){
+return loadZoneData(id);
+}
+if(obj instanceof SoftReference<?>){
+ @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+DateTimeZone tz=ref.get();
+if(tz!=null){
+return tz;
+}
+return loadZoneData(id);
+}
+return getZone((String)obj);
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
+if(id!=null){
+return loadZoneData(id);
+}
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+if(id!=null){
+ @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+DateTimeZone tz=ref.get();
+if(tz!=null){
+return tz;
+}
+return loadZoneData(id);
+}
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+Object obj=iZoneInfoMap.get(id.trim());
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
-return loadZoneData(id);
+return loadZoneData(id.trim());
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
-Object obj=iZoneInfoMap.get(id);
+Object obj=iZoneInfoMap.get(id.trim());
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
-return loadZoneData(id);
+return loadZoneData(id.trim());
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+assert (obj!=iZoneInfoMap.get(id));
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+assert (id!=null);
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
+assert (id!=null);
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:09:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+assert (obj!=null);
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
+}
+if(obj.equals(null)){
+return null;
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(obj.equals(null)){
+return null;
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj.equals(null)){
+return null;
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+return null;
+}
+if(obj.equals(null)){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
+}
+if(obj.equals("655")){
+System.out.println();
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
+}
+if(obj.equals("655")){
+System.out.println();
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(obj.equals("655")){
+System.out.println();
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj.equals("655")){
+System.out.println();
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+return null;
+}
+if((Thread.currentThread().interrupted())){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id==null||"查看红包".equals(id)){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
-if(obj==null){
+if(obj==null||"查看红包".equals(obj)){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
+}
+if(id.isEmpty()){
+id=null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+if(id.isEmpty()){
+id=null;
+}
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id==null||id==""){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
-if(obj==null){
+if(obj==null||obj==""){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id==null||id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
-if(obj==null){
+if(obj==null||obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id==null||id.trim().isEmpty()){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id==null&&new File(id).exists()){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/277/pattern-ver1-serial/src.main.java.org.cripac.isee.vpe.ctrl.SystemPropertyCenter.java-getArgs.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+return null;
+}
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
+}
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+return null;
+}
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
+assert (id!=null):"Appointments day is not allowed to be null!";
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+assert (id!=null):"Appointments day is not allowed to be null!";
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:12:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+assert (id!=null):"Appointments day is not allowed to be null!";
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+assert (obj!=null):"Appointments day is not allowed to be null!";
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+assert (obj!=null):"Appointments day is not allowed to be null!";
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:13:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(id.isEmpty()){
+id=null;
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
+}
+if(id.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:13:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
+}
+if(id.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(id.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:13:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+if(id.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:13:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
+}
+if(iZoneInfoMap==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:13:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
+}
+if(id==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
+}
+if(id==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
+}
+if(obj==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.util.ArrayList;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
+}
+if(obj==null){
+obj=new ArrayList<>();
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.util.ArrayList;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(obj==null){
+obj=new ArrayList<>();
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.util.ArrayList;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj==null){
+obj=new ArrayList<>();
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.util.ArrayList;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
+}
+if(obj==null){
+obj=new ArrayList<>();
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
-}
-if(id.equals(obj)){
-return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
+if(id.equals(obj)){
+return loadZoneData(id);
+}
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
+}
+if(obj==null){
+obj="";
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/755/pattern-ver1-serial/src.org.simiancage.bukkit.messagechangerlite.MessageChangerLite.java-getMessage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
+}
+if(obj==null){
+obj="";
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/755/pattern-ver1-serial/src.org.simiancage.bukkit.messagechangerlite.MessageChangerLite.java-getMessage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(obj==null){
+obj="";
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/755/pattern-ver1-serial/src.org.simiancage.bukkit.messagechangerlite.MessageChangerLite.java-getMessage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj==null){
+obj="";
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/755/pattern-ver1-serial/src.org.simiancage.bukkit.messagechangerlite.MessageChangerLite.java-getMessage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:14:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj.equals("")){
+obj="Manchester United FC";
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4958/pattern-ver1-serial/FootballScores.app.src.main.java.barqsoft.footballscores.widget.ScoresWidgetIntentService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
+if(obj instanceof SoftReference<?>){
+ @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 if(id.equals(obj)){
 return loadZoneData(id);
 }
-if(obj instanceof SoftReference<?>){
- @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+boolean haveBreadCrumbs=false;
 if(obj==null){
 return null;
 }
-if(id.equals(obj)){
+if(id.equals(obj)&&haveBreadCrumbs){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
+}
+if(obj.equals("127.0.0.1")){
+obj="114.113.202.141";
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5284/pattern-ver1-serial/src.netease.pomelo.chat.MainActivity.java-responseData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
+}
+if(obj.equals("127.0.0.1")){
+obj="114.113.202.141";
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5284/pattern-ver1-serial/src.netease.pomelo.chat.MainActivity.java-responseData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(obj.equals("127.0.0.1")){
+obj="114.113.202.141";
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5284/pattern-ver1-serial/src.netease.pomelo.chat.MainActivity.java-responseData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj.equals("127.0.0.1")){
+obj="114.113.202.141";
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5284/pattern-ver1-serial/src.netease.pomelo.chat.MainActivity.java-responseData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
-if(id==null){
+if(id==null&&!id.equals("")){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
-if(obj==null){
+if(obj==null&&!obj.equals("")){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.util.Arrays;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
+if(id.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+id);
+}
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:15:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.util.Arrays;
+
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+if(id.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+id);
+}
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:16:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
+import java.util.Arrays;
+
 public DateTimeZone getZone(String id){
+if(id.contains(File.pathSeparator)){
+throw new IllegalArgumentException("Multiple elements in path: "+id);
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7281/pattern-ver1-serial/runtime.src.main.java.org.evosuite.runtime.util.JarPathing.java-isPathingJar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj==null){
+throw new IllegalStateException("User isn't registered! "+id);
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+if(ref==null){
+throw new IllegalStateException("User isn't registered! "+obj);
+}
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+if(id.startsWith("\r\n")){
+id=id.substring(2);
+}
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:16:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+if(id.startsWith("\r\n")){
+id=id.substring(2);
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
+if(id.startsWith("\r\n")){
+id=id.substring(2);
+}
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+boolean haveBreadCrumbs=false;
 if(obj==null){
 return null;
 }
-if(id.equals(obj)){
+if(id.equals(obj)&&haveBreadCrumbs){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
+haveBreadCrumbs=true;
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:16:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
+}
+if(id==null||obj==null){
+throw new NullPointerException();
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
+File backupdir=new File("logs/");
+if(!backupdir.exists()){
+backupdir.mkdir();
+}
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4678/pattern-ver1-serial/src.blackwolf12333.maatcraft.grieflog.Listeners.GLBlockListener.java-autoBackup.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+boolean succeeded=false;
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
+}
+if(!succeeded){
+return null;
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
+succeeded=true;
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(id.endsWith("/")==false){
+id=id+"/";
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+if(ref==null||obj==null||id==null){
+return null;
+}
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+if(obj==null||ref==null||id==null){
+return null;
+}
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+if(ref==null||id==null||obj==null){
+return null;
+}
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
+if(id==null||ref==null||obj==null){
+return null;
+}
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+if(id==null){
+id="20160101";
+}
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj==null){
+obj="20200101";
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
+}
+if(id==null){
+id="20200101";
 }
 Object obj=iZoneInfoMap.get(id);
+if(obj==null){
+obj="20160101";
+}
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+if(id==null){
+id="20160101";
+}
+if(obj==null){
+obj="20200101";
+}
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
+if(obj==null){
+obj="20160101";
+}
+if(id==null){
+id="20200101";
+}
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
+long startTime=System.currentTimeMillis();
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 if(id.equals(obj)){
 return loadZoneData(id);
 }
 if(obj instanceof SoftReference<?>){
  @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
 DateTimeZone tz=ref.get();
 if(tz!=null){
 return tz;
 }
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_8_buggy/src/main/java/org/joda/time/tz/ZoneInfoProvider.java[127,163]
------------Candidate---------------
 public DateTimeZone getZone(String id){
 if(id==null){
 return null;
 }
 Object obj=iZoneInfoMap.get(id);
 if(obj==null){
 return null;
 }
 if(id.equals(obj)){
-return loadZoneData(id);
-}
-if(obj instanceof SoftReference<?>){
- @SuppressWarnings("unchecked") SoftReference<DateTimeZone> ref=(SoftReference<DateTimeZone>)obj;
-DateTimeZone tz=ref.get();
-if(tz!=null){
-return tz;
-}
 return loadZoneData(id);
 }
 return getZone((String)obj);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 0, DEL : 16
Failing Tests:[org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int]
---------START : 2019.09.04 AD at 19:17:11 CDT
---------TIME : 2019.09.05 AD at 00:17:16 CDT
--------------- END -----------------
Finish : time-8 > patch : 0 | Start : Wed Sep 04 19:17:11 CDT 2019 | End : 2019.09.05 AD at 00:17:16 CDT
